[
  {
    "id": 1241805,
    "slug": "kaesfg",
    "title": "无标题",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "",
    "body_draft": "",
    "body_html": null,
    "public": 1,
    "status": 0,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-13T04:26:05.000Z",
    "deleted_at": null,
    "created_at": "2019-02-13T04:26:05.000Z",
    "updated_at": "2019-02-13T04:26:05.000Z",
    "published_at": null,
    "first_published_at": null,
    "word_count": 0,
    "cover": null,
    "description": "",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1239331,
    "slug": "xkkt0p",
    "title": "在macOS home目录下创建文件夹",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "mac 是基于unix， 自带就有home目录，但是为空。home目录的默认所属用户是root wheel，mac默认的root账号所属用户是root admin，所以root也无法在home目录下创建文件夹。如果非要使用home目录，下面会详细说明(**备注：个人不建议使用home目录**)\n\n### 修改auto_master\n\n```bash\n$ sudo vim /etc/auto_master \n# \n# Automounter master map \n# \n+auto_master        # Use directory service \n/net            -hosts      -nobrowse,hidefromfinder,nosuid \n#/home          auto_home   -nobrowse,hidefromfinder   //注释掉本行 \n/Network/Servers    -fstab \n/-          -static \n```\n\n### **加载auto_master**\n\n```bash\n$ cd /    //必须切换到根目录 \n$ sudo automount  //必须在根目录下执行 \n```\n\n### **创建目录与修改权限**\n\n```bash\n$ sudo mkdir /home/test //创建目录 \n$ cd /home \n$ sudo chown wuwenze.staff -R test  //修改文件所属 \n$ ls -l /home/ \ntotal 0 \ndr-xr-xr-x 7 root wheel 238 2 26 17:48 ./ \ndrwxr-xr-x 30 root wheel 1088 8 30 17:28 ../ \ndrwxr-xr-x 2 wuwenze staff 68 2 26 17:45 test/ \n```\n\n",
    "body_draft": "",
    "body_html": "<p>mac 是基于unix， 自带就有home目录，但是为空。home目录的默认所属用户是root wheel，mac默认的root账号所属用户是root admin，所以root也无法在home目录下创建文件夹。如果非要使用home目录，下面会详细说明(<strong>备注：个人不建议使用home目录</strong>)</p><p><br /></p><h3 id=\"603532f4\">修改auto_master</h3><p><br /></p><pre data-lang=\"bash\"><code>$ sudo vim /etc/auto_master \n# \n# Automounter master map \n# \n+auto_master        # Use directory service \n/net            -hosts      -nobrowse,hidefromfinder,nosuid \n#/home          auto_home   -nobrowse,hidefromfinder   //注释掉本行 \n/Network/Servers    -fstab \n/-          -static </code></pre><p><br /></p><h3 id=\"14166e5c\"><strong>加载auto_master</strong></h3><p><br /></p><pre data-lang=\"bash\"><code>$ cd /    //必须切换到根目录 \n$ sudo automount  //必须在根目录下执行 </code></pre><p><br /></p><h3 id=\"bd875630\"><strong>创建目录与修改权限</strong></h3><p><br /></p><pre data-lang=\"bash\"><code>$ sudo mkdir /home/test //创建目录 \n$ cd /home \n$ sudo chown wuwenze.staff -R test  //修改文件所属 \n$ ls -l /home/ \ntotal 0 \ndr-xr-xr-x 7 root wheel 238 2 26 17:48 ./ \ndrwxr-xr-x 30 root wheel 1088 8 30 17:28 ../ \ndrwxr-xr-x 2 wuwenze staff 68 2 26 17:45 test/ </code></pre><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-12T08:29:12.000Z",
    "deleted_at": null,
    "created_at": "2019-02-12T08:25:53.000Z",
    "updated_at": "2019-02-12T08:29:12.000Z",
    "published_at": "2019-02-12T08:29:12.000Z",
    "first_published_at": "2019-02-12T08:29:12.000Z",
    "word_count": 225,
    "cover": "",
    "description": "mac 是基于unix， 自带就有home目录，但是为空。home目录的默认所属用户是root wheel，mac默认的root账号所属用户是root admin，所以root也无法在home目录下创建文件夹。如果非要使用home目录，下面会详细说明(备注：个人不建议使用home目录)修改au...",
    "custom_description": "mac 是基于unix， 自带就有home目录，但是为空。home目录的默认所属用户是root wheel，mac默认的root账号所属用户是root admin，所以root也无法在home目录下创建文件夹。如果非要使用home目录，下面会详细说明(备注：个人不建议使用home目录)修改au...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1228808,
    "slug": "gklv51",
    "title": "解决Updating Homebrew问题",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "在国内的网络环境下使用 Homebrew 安装软件的过程中可能会长时间卡在 Updating Homebrew 这个步骤。\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/243237/1549466096906-5123e30a-01da-4c3e-9dc0-12c9d997fdbf.png#align=left&display=inline&height=508&linkTarget=_blank&name=image.png&originHeight=970&originWidth=1330&size=135705&width=697)\n\n每次执行`brew install`命令时，会尝试更新Homebrew，但是由于众所周知的原因，这一步被挡在了墙外，本文有两种方式可解决此问题。\n\n## 临时解决\n出现此提示时，轻按`Control + C`命令终止更新操作。\n\n```bash\n~ brew install macvim\nUpdating Homebrew...\n^C==> Satisfying dependencies\n==> ....\n```\n这个方法是临时性的，每次都去按一下也是神烦。\n\n## 使用Alibaba加速镜像\n### 1) 替换/还原 brew.git 仓库地址\n\n```bash\n# 替换成阿里巴巴的 brew.git 仓库地址:\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\n\n#=======================================================\n\n# 还原为官方提供的 brew.git 仓库地址\ncd \"$(brew --repo)\"\ngit remote set-url origin https://github.com/Homebrew/brew.git\n```\n\n### 2) 替换/还原 homebrew-core.git 仓库地址\n\n```bash\n# 替换成阿里巴巴的 homebrew-core.git 仓库地址:\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-core.git 仓库地址\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n\n### 3) 替换/还原 homebrew-bottles 访问地址\n这个步骤跟你的 macOS 系统使用的 shell 版本有关系，所以，先来查看当前使用的 shell 版本：\n\n```bash\necho $SHELL\n# /bin/zsh or /bin/bash\n```\n\n#### 3.1) zsh 终端操作方式\n\n```bash\n# 替换成阿里巴巴的 homebrew-bottles 访问地址:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.zshrc\nsource ~/.zshrc\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.zshrc\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.zshrc\n```\n\n\n#### 3.2) bash 终端操作方式\n\n```bash\n# 替换 homebrew-bottles 访问 URL:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.bash_profile\nsource ~/.bash_profile\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.bash_profile\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.bash_profile\n```\n\n",
    "body_draft": "",
    "body_html": "<p style=\"text-align: left;\">在国内的网络环境下使用 Homebrew 安装软件的过程中可能会长时间卡在 Updating Homebrew 这个步骤。</p><p><br /></p><p><img alt=\"image.png\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549466096906-5123e30a-01da-4c3e-9dc0-12c9d997fdbf.png#align=left&amp;display=inline&amp;height=508&amp;linkTarget=_blank&amp;name=image.png&amp;originHeight=970&amp;originWidth=1330&amp;size=135705&amp;width=697\" style=\"max-width: 600px; width: 697px;\" /></p><p><br /></p><p>每次执行<code>brew install</code>命令时，会尝试更新Homebrew，但是由于众所周知的原因，这一步被挡在了墙外，本文有两种方式可解决此问题。</p><p><br /></p><h2 id=\"1720afbc\">临时解决</h2><p>出现此提示时，轻按<code>Control + C</code>命令终止更新操作。</p><p><br /></p><pre data-lang=\"bash\"><code>~ brew install macvim\nUpdating Homebrew...\n^C==&gt; Satisfying dependencies\n==&gt; ....</code></pre><p>这个方法是临时性的，每次都去按一下也是神烦。</p><p><br /></p><h2 id=\"aecce536\">使用Alibaba加速镜像</h2><h3 id=\"05a9a6e6\" style=\"text-align: left;\">1) 替换/还原 brew.git 仓库地址</h3><p><br /></p><pre data-lang=\"bash\"><code># 替换成阿里巴巴的 brew.git 仓库地址:\ncd &quot;$(brew --repo)&quot;\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\n\n#=======================================================\n\n# 还原为官方提供的 brew.git 仓库地址\ncd &quot;$(brew --repo)&quot;\ngit remote set-url origin https://github.com/Homebrew/brew.git</code></pre><p><br /></p><h3 id=\"90ef3587\">2) 替换/还原 homebrew-core.git 仓库地址</h3><p><br /></p><pre data-lang=\"bash\"><code># 替换成阿里巴巴的 homebrew-core.git 仓库地址:\ncd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-core.git 仓库地址\ncd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;\ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git</code></pre><p><br /></p><p><br /></p><h3 id=\"9358b039\">3) 替换/还原 homebrew-bottles 访问地址</h3><p style=\"text-align: left;\">这个步骤跟你的 macOS 系统使用的 shell 版本有关系，所以，先来查看当前使用的 shell 版本：</p><p><br /></p><pre data-lang=\"bash\"><code>echo $SHELL\n# /bin/zsh or /bin/bash</code></pre><p><br /></p><h4 id=\"8f1c9d4d\">3.1) zsh 终端操作方式</h4><p><br /></p><pre data-lang=\"bash\"><code># 替换成阿里巴巴的 homebrew-bottles 访问地址:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.zshrc\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.zshrc</code></pre><p><br /></p><p><br /></p><h4 id=\"e23d9670\">3.2) bash 终端操作方式</h4><p><br /></p><pre data-lang=\"bash\"><code># 替换 homebrew-bottles 访问 URL:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.bash_profile\nsource ~/.bash_profile\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.bash_profile\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.bash_profile</code></pre><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-06T15:28:17.000Z",
    "deleted_at": null,
    "created_at": "2019-02-06T15:12:24.000Z",
    "updated_at": "2019-02-06T15:28:23.000Z",
    "published_at": "2019-02-06T15:28:23.000Z",
    "first_published_at": "2019-02-06T15:24:26.000Z",
    "word_count": 496,
    "cover": "",
    "description": "在国内的网络环境下使用 Homebrew 安装软件的过程中可能会长时间卡在 Updating Homebrew 这个步骤。每次执行brew install命令时，会尝试更新Homebrew，但是由于众所周知的原因，这一步被挡在了墙外，本文有两种方式可解决此问题。临时解决出现此提示时，轻按Con...",
    "custom_description": "在国内的网络环境下使用 Homebrew 安装软件的过程中可能会长时间卡在 Updating Homebrew 这个步骤。每次执行brew install命令时，会尝试更新Homebrew，但是由于众所周知的原因，这一步被挡在了墙外，本文有两种方式可解决此问题。临时解决出现此提示时，轻按Con...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224429,
    "slug": "wechat-smallapp-template",
    "title": "微信小程序模板消息推送实现案例",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-08-21 15:05:17<br />tags: [\"微信\",\"小程序\",\"模板消息\"]\n---\n\n模板消息是基于微信的通知渠道，为开发者提供了可以高效触达用户的模板消息能力，以便实现服务的闭环并提供更佳的体验。\n\n想推送模板消息，得满足一些前提条件：\n\n1. 用户在小程序中完成支付后，小程序可以向用户发送模板消息。\n1. 用户在小程序中有提交表单的行为，小程序可以向用户发送模板消息。<br />\n例如：\n1. 用户在小程序里购买了商品，小程序可以将商品物流的情况，实时发送给用户。\n1. 用户在小程序里填写了活动报名表后，小程序可以将报名情况（成功或失败）推送给用户。\n\n> 需要注意的是，即使条件达成了，小程序也不能无限制地发送模板消息。\n\n\n具体的发送数量限制是：\n\n1. 用户完成一次支付，小程序可以获得 3 次发送模板消息的机会。\n1. 用户提交一次表单，小程序可以获得 1 次发送模板消息的机会。\n1. 发送模板消息的机会在用户完成操作后的 7 天内有效。一旦超过 7 天，这些发送资格将会自动失效。\n## 前置准备工作\n\n### 内网穿透（需要支持80端口、绑定`已备案域名`、`SSL证书`）用于开发时调试后端接口。\n\n> 源码中已提供该工具\n\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006575495-8c2f7ff7-4259-48d1-a6d7-f11237e4ed98.png#align=left&display=inline&height=139&linkTarget=_blank&originHeight=139&originWidth=643&size=0&width=643)\n\n### 注册小程序账号，同时申请或`定制`对应的模板消息，拿到模板ID和模板结构备用。\n\n> [https://mp.weixin.qq.com/wxopen/waregister?action=step1](https://mp.weixin.qq.com/wxopen/waregister?action=step1)\n\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006575501-eda382d7-6873-4334-9353-05f46975649d.png#align=left&display=inline&height=179&linkTarget=_blank&originHeight=307&originWidth=1279&size=0&width=746)<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006575505-859e13ee-576b-44bb-babf-59882b1777e7.png#align=left&display=inline&height=388&linkTarget=_blank&originHeight=662&originWidth=1274&size=0&width=746)<br />\n可以选择自行定制模板消息格式，但是最终需要微信审核后方可使用，这里我们测试，就随意在模板库中挑选了一款，最终得到模板消息格式如下：\n\n```json\n购买地点 {{keyword1.DATA}}\n购买时间 {{keyword2.DATA}}\n物品名称 {{keyword3.DATA}}\n交易单号 {{keyword4.DATA}}\n```\n\n### 配置可信服务器域名\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006575547-bc77bf95-29a7-4bd9-b79b-8ad2fed430be.png#align=left&display=inline&height=181&linkTarget=_blank&originHeight=303&originWidth=1246&size=0&width=746)<br />\n此处的可信域名，最终为内网穿透映射的域名，用于小程序向本地后端接口发送HTTP请求。\n\n## 相关的微信API\n\n### 获取AccessToken [GET]\n\n[https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET](https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET)\n\n| 参数 | 是否必须 | 说明 |\n| :--- | :--- | :--- |\n| grant_type | 是 | 获取access_token填写client_credential |\n| appid | 是 | 第三方用户唯一凭证 |\n| secret | 是 | 第三方用户唯一凭证密钥，即appsecret |\n\n\n正常情况下，微信会返回下述JSON数据包给公众号：\n\n```json\n{\"access_token\":\"ACCESS_TOKEN\",\"expires_in\":7200}\n```\n\n### 登录凭证校验: 根据js_code换取当前用户的openId [GET]\n\n先通过小程序获取当前用户的js_code，再调用相关接口接口换取openId\n\n`wx.login(OBJECT)`\n\n调用接口wx.login() 获取临时登录凭证（js_code）\n\n```javascript\nwx.login({\n  success: function(res) {\n    if (res.code) {\n      // 获取到js_code, 可继续调用接口换取openId\n    } else {\n      console.log('登录失败！' + res.errMsg)\n    }\n  }\n});\n```\n\n[https://api.weixin.qq.com/sns/jscode2session?appid={}&secret={}&js_code={}&grant_type=authorization_code](https://api.weixin.qq.com/sns/jscode2session?appid=%7B%7D&secret=%7B%7D&js_code=%7B%7D&grant_type=authorization_code)\n\n| 参数 | 是否必须 | 说明 |\n| :--- | :--- | :--- |\n| appid | 是 | 小程序唯一标识 |\n| secret | 是 | 小程序的 app secret |\n| js_code | 是 | 登录时获取的 code |\n| grant_type | 是 | 填写为 authorization_code |\n\n\n```json\n//正常返回的JSON数据包\n{\n    \"openid\": \"OPENID\",\n    \"session_key\": \"SESSIONKEY\",\n}\n\n//满足UnionID返回条件时，返回的JSON数据包\n{\n    \"openid\": \"OPENID\",\n    \"session_key\": \"SESSIONKEY\",\n    \"unionid\": \"UNIONID\"\n}\n//错误时返回JSON数据包(示例为Code无效)\n{\n    \"errcode\": 40029,\n    \"errmsg\": \"invalid code\"\n}\n```\n\n### 发送模板消息 [POST]\n\n[https://api.weixin.qq.com/cgi-bin/message/wxopen/template/send?access_token=ACCESS_TOKEN](https://api.weixin.qq.com/cgi-bin/message/wxopen/template/send?access_token=ACCESS_TOKEN)\n\n| 参数 | 是否必须 | 说明 |\n| :--- | :--- | :--- |\n| touser | 是 | 接收者（用户）的 openid |\n| template_id | 是 | 所需下发的模板消息的id |\n| page | 否 | 点击模板卡片后的跳转页面，仅限本小程序内的页面。支持带参数,（示例index?foo=bar）。该字段不填则模板无跳转。 |\n| form_id | 是 | 表单提交场景下，为 submit 事件带上的 formId；支付场景下，为本次支付的 prepay_id |\n| data | 是 | 模板内容，不填则下发空模板 |\n| emphasis_keyword | 否 | 模板需要放大的关键词，不填则默认无放大 |\n\n\n请求示例：\n\n```json\n{\n  \"touser\": \"OPENID\",\n  \"template_id\": \"TEMPLATE_ID\",\n  \"page\": \"index\",\n  \"form_id\": \"FORMID\",\n  \"data\": {\n      \"keyword1\": {\n          \"value\": \"339208499\"\n      },\n      \"keyword2\": {\n          \"value\": \"2015年01月05日 12:30\"\n      },\n      \"keyword3\": {\n          \"value\": \"粤海喜来登酒店\"\n      } ,\n      \"keyword4\": {\n          \"value\": \"广州市天河区天河路208号\"\n      }\n  },\n  \"emphasis_keyword\": \"keyword1.DATA\"\n}\n```\n\n## 代码实现\n\n> 注意：下面的代码均为测试代码，未考虑严谨性，仅为实现功能。\n\n\n#### 小程序端\n\n```javascript\n<!--index.wxml-->\n<view class=\"container\">\n  <view class=\"userinfo\">\n    <button wx:if=\"{{!hasUserInfo || !hasOpenId}}\"\n            open-type=\"getUserInfo\"\n            bindgetuserinfo=\"getUserInfo\"\n            type='primary'\n            size='mini'>获取用户信息</button>\n    <block wx:else>\n      <image class=\"userinfo-avatar\" src=\"{{userInfo.avatarUrl}}\" mode=\"cover\"></image>\n      <text class=\"userinfo-nickname\">{{userInfo.nickName}}</text>\n      <text class=\"userinfo-nickname\">{{openId}}</text>\n    </block>\n  </view>\n  <view wx:if=\"{{hasUserInfo && hasOpenId}}\" class='usermotto'>\n    <form bindsubmit=\"templateSend\" report-submit=\"true\">\n      <button type='primary' formType=\"submit\" size='mini'>发送模板消息</button>\n    </form>\n  </view>\n  <view wx:if=\"{{logMessage}}\">\n    <p style=\"color:red\"><span>{{logMessage}}</span></p>\n  </view>\n</view>\n```\n\n需要注意的是，这里的表单需要加上`report-submit=\"true\"`属性，标识该属性表示可以获得一次`formId`的机会，该formId可以用来推送模板消息，下面是控制器相关的代码：\n\n```javascript\n//index.js\n//获取应用实例\nconst app = getApp();\nconst requestHost = \"https://wuwz.guyubao.com/wx_small_app\";\n\nPage({\n  data: {\n    userInfo: {},\n    openId: null,\n    hasUserInfo: false,\n    hasOpenId: false,\n    logMessage: null\n  },\n  getUserInfo: function(e) {\n    app.globalData.userInfo = e.detail.userInfo\n    this.setData({\n      userInfo: e.detail.userInfo,\n      hasUserInfo: true,\n      logMessage: '加载用户信息中..'\n    })\n    this.getOpenId();\n  },\n  getOpenId: function() {\n    var _this = this;\n    wx.login({\n      success: function(res) {\n        if (res.code) {\n          // 换取openid\n          wx.request({\n            url: requestHost + \"/get_openid_by_js_code\",\n            data: {\n              js_code: res.code\n            },\n            method: 'GET',\n            success: function(res) {\n              if (res.data.openid) {\n                _this.setData({\n                  openId: res.data.openid,\n                  hasOpenId: true,\n                  logMessage: '加载用户信息完成'\n                });\n              }\n            },\n            fail: function (err) {\n              _this.setData({\n                logMessage: '[fail]' + JSON.stringify(err)\n              });\n            }\n          });\n        }\n      }\n    })\n  },\n  templateSend: function(e) {\n    var _this = this;\n    var openId = _this.data.openId;\n    // 表单需设置report-submit=\"true\"\n    var formId = e.detail.formId;\n\n    if (!formId || 'the formId is a mock one' === formId) {\n      _this.setData({\n        logMessage: '[fail]请使用真机调试，否则获取不到formId'\n      });\n      return;\n    }\n\n    // 发送随机模板消息\n    wx.request({\n      url: requestHost + \"/template_send\",\n      data: {\n        openId: openId,\n        formId: formId\n      },\n      method: 'POST',\n      success: function(res) {\n        if (res.data.status === 0) {\n          _this.setData({\n            logMessage: '发送模板消息成功[' + new Date().getTime()+']'\n          });\n        }\n      },\n      fail: function(err) {\n        _this.setData({\n          logMessage: '[fail]' + JSON.stringify(err)\n        });\n      }\n    });\n  }\n})\n```\n\n### 后端接口\n\n先针对需要使用的微信API做一个简单的封装：\n\n```java\npackage com.wuwenze.wechatsmallapptmplmsg.wechat;\n\nimport cn.hutool.core.util.StrUtil;\nimport cn.hutool.http.HttpRequest;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * @author wwz\n * @version 1 (2018/8/20)\n * @since Java7\n */\n@Slf4j\npublic class WechatApi {\n    private final static LoadingCache<String, String> mAccessTokenCache =\n            CacheBuilder.newBuilder()\n                    .expireAfterWrite(7200, TimeUnit.SECONDS)\n                    .build(new CacheLoader<String, String>() {\n                        @Override\n                        public String load(String key) {\n                            // key: appId#appSecret\n                            String[] array = key.split(\"#\");\n                            if (null == array || array.length != 2) {\n                                throw new IllegalArgumentException(\"load access_token error, key = \" + key);\n                            }\n                            return getAccessToken(array[0], array[1]);\n                        }\n                    });\n\n    public static String getAccessToken() {\n        String cacheKey = WechatConf.appId + \"#\" + WechatConf.appSecrct;\n        try {\n            return mAccessTokenCache.get(cacheKey);\n        } catch (ExecutionException e) {\n            log.error(\"#getAccessToken error, cacheKey=\" + cacheKey, e);\n        }\n        return null;\n    }\n\n    private static String getAccessToken(String appId, String appSecret) {\n        String apiUrl = StrUtil.format(//\n                \"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid={}&secret={}\",//\n                appId, appSecret\n        );\n        String body = HttpRequest.get(apiUrl).execute().body();\n        return throwErrorMessageIfExists(body).getString(\"access_token\");\n    }\n\n    public static void templateSend(String accessToken, WechatTemplate template) {\n        String apiUrl = \"https://api.weixin.qq.com/cgi-bin/message/wxopen/template/send?access_token=\"//\n                + (StrUtil.isEmpty(accessToken) ? getAccessToken() : accessToken);\n        String body = HttpRequest.post(apiUrl).body(JSON.toJSONString(template)).execute().body();\n        throwErrorMessageIfExists(body);\n    }\n\n    public static JSONObject getOpenIdByJSCode(String js_code) {\n        String apiUrl = StrUtil.format(//\n                \"https://api.weixin.qq.com/sns/jscode2session?appid={}&secret={}&js_code={}&grant_type=authorization_code\",//\n                WechatConf.appId, WechatConf.appSecrct, js_code\n        );\n        String body = HttpRequest.get(apiUrl).execute().body();\n        return throwErrorMessageIfExists(body);\n    }\n\n    private static JSONObject throwErrorMessageIfExists(String body) {\n        String callMethodName = (new Throwable()).getStackTrace()[1].getMethodName();\n        log.info(\"#0820 {} body={}\", callMethodName, body);\n        JSONObject jsonObject = JSON.parseObject(body);\n        if (jsonObject.containsKey(\"errcode\") && jsonObject.getIntValue(\"errcode\") > 0) {\n            throw new RuntimeException(StrUtil.format(\"#WechatApi[{}] call error: {}\", callMethodName, body));\n        }\n        return jsonObject;\n    }\n}\n```\n\n对外开放相关的接口：\n\n```java\npackage com.wuwenze.wechatsmallapptmplmsg.controller;\n\nimport cn.hutool.core.date.DateUtil;\nimport cn.hutool.core.util.RandomUtil;\nimport cn.hutool.core.util.StrUtil;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.wuwenze.wechatsmallapptmplmsg.util.MapUtil;\nimport com.wuwenze.wechatsmallapptmplmsg.wechat.WechatApi;\nimport com.wuwenze.wechatsmallapptmplmsg.wechat.WechatConf;\nimport com.wuwenze.wechatsmallapptmplmsg.util.SecurityUtil;\nimport com.wuwenze.wechatsmallapptmplmsg.util.WebUtil;\nimport com.wuwenze.wechatsmallapptmplmsg.wechat.WechatTemplate;\nimport com.wuwenze.wechatsmallapptmplmsg.wechat.WechatTemplateItem;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Map;\nimport java.util.stream.Stream;\n\n/**\n * @author wwz\n * @version 1 (2018/8/16)\n * @since Java7\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/wx_small_app\")\npublic class WechatController {\n\n    @GetMapping(\"/get_openid_by_js_code\")\n    public Map<String, Object> getOpenIdByJSCode(String js_code) {\n        return WechatApi.getOpenIdByJSCode(js_code);\n    }\n\n    @PostMapping(\"/template_send\")\n    public Map<String, Object> templateSend() {\n        String accessToken = WechatApi.getAccessToken();\n        JSONObject body = JSON.parseObject(WebUtil.getBody());\n\n        // 填充模板数据 （测试代码，写死）\n        WechatTemplate wechatTemplate = new WechatTemplate()\n                .setTouser(body.getString(\"openId\"))\n                .setTemplate_id(WechatConf.templateId)\n                // 表单提交场景下为formid，支付场景下为prepay_id\n                .setForm_id(body.getString(\"formId\"))\n                // 跳转页面\n                .setPage(\"index\")\n                /**\n                 * 模板内容填充：随机字符\n                 * 购买地点 {{keyword1.DATA}}\n                 * 购买时间 {{keyword2.DATA}}\n                 * 物品名称 {{keyword3.DATA}}\n                 * 交易单号 {{keyword4.DATA}}\n                 * -> {\"keyword1\": {\"value\":\"xxx\"}, \"keyword2\": ...}\n                 */\n                .setData(MapUtil.newHashMap(//\n                        \"keyword1\", new WechatTemplateItem(RandomUtil.randomString(10)),//\n                        \"keyword2\", new WechatTemplateItem(DateUtil.now()),//\n                        \"keyword3\", new WechatTemplateItem(RandomUtil.randomString(10)),//\n                        \"keyword4\", new WechatTemplateItem(RandomUtil.randomNumbers(10)) //\n                ));\n        WechatApi.templateSend(accessToken, wechatTemplate);\n        return MapUtil.newHashMap(\"status\", 0);\n    }\n\n    @GetMapping(\"/validate\")\n    public void validate(String signature, String timestamp, String nonce, String echostr) {\n        final StringBuilder attrs = new StringBuilder();\n        Stream.of(WechatConf.token, timestamp, nonce)//\n                .sorted()//\n                .forEach((item) -> attrs.append(item));\n        String sha1 = SecurityUtil.getSha1(attrs.toString());\n        if (StrUtil.equalsIgnoreCase(sha1, signature)) {\n            WebUtil.write(echostr);\n            return;\n        }\n        log.error(\"#0820 WechatController.validate() error, attrs = {}\", attrs);\n    }\n}\n```\n\n## 最终效果\n\n### 小程序界面\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006575513-5e8a5d84-bbc3-4786-be65-a7ef943272fb.png#align=left&display=inline&height=832&linkTarget=_blank&originHeight=832&originWidth=515&size=0&width=515)\n\n### 收到的模板消息\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006575558-9af04d4f-7b53-4985-9546-42fad34b2772.png#align=left&display=inline&height=897&linkTarget=_blank&originHeight=897&originWidth=511&size=0&width=511)\n\n## 其他：突破发送模板消息的限制\n\n> 如非必要，尽量不要这样做，一旦发现小程序滥用模板消息，微信是有权进行封禁的。\n\n\n简单来说，我们可以将小程序的表单组件进行封装，伪装小程序中其他功能按钮。当用户点击按钮时，表单组件就自动把formId上传给服务器保存（7天后过期），当收集到一定的用户点击事件后，就可以拿来使用了（主动消息推送群发），哈哈哈。\n\n## 源码地址\n\n> 包含用到的内网穿透工具\n\n\n[https://gitee.com/wuwenze/wechat-smallapp-tmplmsg](https://gitee.com/wuwenze/wechat-smallapp-tmplmsg)<br />\n[https://github.com/wuwz/wechat-smallapp-tmplmsg](https://github.com/wuwz/wechat-smallapp-tmplmsg)\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-08-21 15:05:17</p><p>tags: [&quot;微信&quot;,&quot;小程序&quot;,&quot;模板消息&quot;]</p><hr /><p><br /></p><p>模板消息是基于微信的通知渠道，为开发者提供了可以高效触达用户的模板消息能力，以便实现服务的闭环并提供更佳的体验。</p><p><br /></p><p>想推送模板消息，得满足一些前提条件：</p><p><br /></p><ol start=\"1\"><li>用户在小程序中完成支付后，小程序可以向用户发送模板消息。</li></ol><ol start=\"2\"><li>用户在小程序中有提交表单的行为，小程序可以向用户发送模板消息。<br />\n例如：</li></ol><ol start=\"3\"><li>用户在小程序里购买了商品，小程序可以将商品物流的情况，实时发送给用户。</li></ol><ol start=\"4\"><li>用户在小程序里填写了活动报名表后，小程序可以将报名情况（成功或失败）推送给用户。</li></ol><p><br /></p><blockquote><p>需要注意的是，即使条件达成了，小程序也不能无限制地发送模板消息。</p></blockquote><p><br /></p><p>具体的发送数量限制是：</p><p><br /></p><ol start=\"1\"><li>用户完成一次支付，小程序可以获得 3 次发送模板消息的机会。</li></ol><ol start=\"2\"><li>用户提交一次表单，小程序可以获得 1 次发送模板消息的机会。</li></ol><ol start=\"3\"><li>发送模板消息的机会在用户完成操作后的 7 天内有效。一旦超过 7 天，这些发送资格将会自动失效。</li></ol><h2 id=\"1b801f66\">前置准备工作</h2><p><br /></p><h3 id=\"81bd6523\">内网穿透（需要支持80端口、绑定<code>已备案域名</code>、<code>SSL证书</code>）用于开发时调试后端接口。</h3><p><br /></p><blockquote><p>源码中已提供该工具</p></blockquote><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006575495-8c2f7ff7-4259-48d1-a6d7-f11237e4ed98.png#align=left&amp;display=inline&amp;height=139&amp;linkTarget=_blank&amp;originHeight=139&amp;originWidth=643&amp;size=0&amp;width=643\" style=\"max-width: 600px; width: 643px;\" /></p><p><br /></p><h3 id=\"f2e59c5d\">注册小程序账号，同时申请或<code>定制</code>对应的模板消息，拿到模板ID和模板结构备用。</h3><p><br /></p><blockquote><p><a href=\"https://mp.weixin.qq.com/wxopen/waregister?action=step1\" target=\"_blank\">https://mp.weixin.qq.com/wxopen/waregister?action=step1</a></p></blockquote><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006575501-eda382d7-6873-4334-9353-05f46975649d.png#align=left&amp;display=inline&amp;height=179&amp;linkTarget=_blank&amp;originHeight=307&amp;originWidth=1279&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006575505-859e13ee-576b-44bb-babf-59882b1777e7.png#align=left&amp;display=inline&amp;height=388&amp;linkTarget=_blank&amp;originHeight=662&amp;originWidth=1274&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n可以选择自行定制模板消息格式，但是最终需要微信审核后方可使用，这里我们测试，就随意在模板库中挑选了一款，最终得到模板消息格式如下：</p><p><br /></p><pre data-lang=\"json\"><code>购买地点 {{keyword1.DATA}}\n购买时间 {{keyword2.DATA}}\n物品名称 {{keyword3.DATA}}\n交易单号 {{keyword4.DATA}}</code></pre><p><br /></p><h3 id=\"a46dfa90\">配置可信服务器域名</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006575547-bc77bf95-29a7-4bd9-b79b-8ad2fed430be.png#align=left&amp;display=inline&amp;height=181&amp;linkTarget=_blank&amp;originHeight=303&amp;originWidth=1246&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n此处的可信域名，最终为内网穿透映射的域名，用于小程序向本地后端接口发送HTTP请求。</p><p><br /></p><h2 id=\"618500b6\">相关的微信API</h2><p><br /></p><h3 id=\"fcc9455b\">获取AccessToken [GET]</h3><p><br /></p><p><a href=\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET\" target=\"_blank\">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</a></p><p><br /></p><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"240\"></col><col width=\"240\"></col><col width=\"241\"></col></colgroup><tbody><tr><td style=\"text-align: left;\">参数</td><td style=\"text-align: left;\">是否必须</td><td style=\"text-align: left;\">说明</td></tr></tbody><tbody><tr><td style=\"text-align: left;\">grant_type</td><td style=\"text-align: left;\">是</td><td style=\"text-align: left;\">获取access_token填写client_credential</td></tr><tr><td style=\"text-align: left;\">appid</td><td style=\"text-align: left;\">是</td><td style=\"text-align: left;\">第三方用户唯一凭证</td></tr><tr><td style=\"text-align: left;\">secret</td><td style=\"text-align: left;\">是</td><td style=\"text-align: left;\">第三方用户唯一凭证密钥，即appsecret</td></tr></tbody></table><p><br /></p><p>正常情况下，微信会返回下述JSON数据包给公众号：</p><p><br /></p><pre data-lang=\"json\"><code>{&quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,&quot;expires_in&quot;:7200}</code></pre><p><br /></p><h3 id=\"1df5dc0b\">登录凭证校验: 根据js_code换取当前用户的openId [GET]</h3><p><br /></p><p>先通过小程序获取当前用户的js_code，再调用相关接口接口换取openId</p><p><br /></p><p><code>wx.login(OBJECT)</code></p><p><br /></p><p>调用接口wx.login() 获取临时登录凭证（js_code）</p><p><br /></p><pre data-lang=\"javascript\"><code>wx.login({\n  success: function(res) {\n    if (res.code) {\n      // 获取到js_code, 可继续调用接口换取openId\n    } else {\n      console.log('登录失败！' + res.errMsg)\n    }\n  }\n});</code></pre><p><br /></p><p><a href=\"https://api.weixin.qq.com/sns/jscode2session?appid=%7B%7D&amp;secret=%7B%7D&amp;js_code=%7B%7D&amp;grant_type=authorization_code\" target=\"_blank\">https://api.weixin.qq.com/sns/jscode2session?appid={}&amp;secret={}&amp;js_code={}&amp;grant_type=authorization_code</a></p><p><br /></p><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"240\"></col><col width=\"240\"></col><col width=\"241\"></col></colgroup><tbody><tr><td style=\"text-align: left;\">参数</td><td style=\"text-align: left;\">是否必须</td><td style=\"text-align: left;\">说明</td></tr></tbody><tbody><tr><td style=\"text-align: left;\">appid</td><td style=\"text-align: left;\">是</td><td style=\"text-align: left;\">小程序唯一标识</td></tr><tr><td style=\"text-align: left;\">secret</td><td style=\"text-align: left;\">是</td><td style=\"text-align: left;\">小程序的 app secret</td></tr><tr><td style=\"text-align: left;\">js_code</td><td style=\"text-align: left;\">是</td><td style=\"text-align: left;\">登录时获取的 code</td></tr><tr><td style=\"text-align: left;\">grant_type</td><td style=\"text-align: left;\">是</td><td style=\"text-align: left;\">填写为 authorization_code</td></tr></tbody></table><p><br /></p><pre data-lang=\"json\"><code>//正常返回的JSON数据包\n{\n    &quot;openid&quot;: &quot;OPENID&quot;,\n    &quot;session_key&quot;: &quot;SESSIONKEY&quot;,\n}\n\n//满足UnionID返回条件时，返回的JSON数据包\n{\n    &quot;openid&quot;: &quot;OPENID&quot;,\n    &quot;session_key&quot;: &quot;SESSIONKEY&quot;,\n    &quot;unionid&quot;: &quot;UNIONID&quot;\n}\n//错误时返回JSON数据包(示例为Code无效)\n{\n    &quot;errcode&quot;: 40029,\n    &quot;errmsg&quot;: &quot;invalid code&quot;\n}</code></pre><p><br /></p><h3 id=\"75eb01dc\">发送模板消息 [POST]</h3><p><br /></p><p><a href=\"https://api.weixin.qq.com/cgi-bin/message/wxopen/template/send?access_token=ACCESS_TOKEN\" target=\"_blank\">https://api.weixin.qq.com/cgi-bin/message/wxopen/template/send?access_token=ACCESS_TOKEN</a></p><p><br /></p><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"240\"></col><col width=\"240\"></col><col width=\"241\"></col></colgroup><tbody><tr><td style=\"text-align: left;\">参数</td><td style=\"text-align: left;\">是否必须</td><td style=\"text-align: left;\">说明</td></tr></tbody><tbody><tr><td style=\"text-align: left;\">touser</td><td style=\"text-align: left;\">是</td><td style=\"text-align: left;\">接收者（用户）的 openid</td></tr><tr><td style=\"text-align: left;\">template_id</td><td style=\"text-align: left;\">是</td><td style=\"text-align: left;\">所需下发的模板消息的id</td></tr><tr><td style=\"text-align: left;\">page</td><td style=\"text-align: left;\">否</td><td style=\"text-align: left;\">点击模板卡片后的跳转页面，仅限本小程序内的页面。支持带参数,（示例index?foo=bar）。该字段不填则模板无跳转。</td></tr><tr><td style=\"text-align: left;\">form_id</td><td style=\"text-align: left;\">是</td><td style=\"text-align: left;\">表单提交场景下，为 submit 事件带上的 formId；支付场景下，为本次支付的 prepay_id</td></tr><tr><td style=\"text-align: left;\">data</td><td style=\"text-align: left;\">是</td><td style=\"text-align: left;\">模板内容，不填则下发空模板</td></tr><tr><td style=\"text-align: left;\">emphasis_keyword</td><td style=\"text-align: left;\">否</td><td style=\"text-align: left;\">模板需要放大的关键词，不填则默认无放大</td></tr></tbody></table><p><br /></p><p>请求示例：</p><p><br /></p><pre data-lang=\"json\"><code>{\n  &quot;touser&quot;: &quot;OPENID&quot;,\n  &quot;template_id&quot;: &quot;TEMPLATE_ID&quot;,\n  &quot;page&quot;: &quot;index&quot;,\n  &quot;form_id&quot;: &quot;FORMID&quot;,\n  &quot;data&quot;: {\n      &quot;keyword1&quot;: {\n          &quot;value&quot;: &quot;339208499&quot;\n      },\n      &quot;keyword2&quot;: {\n          &quot;value&quot;: &quot;2015年01月05日 12:30&quot;\n      },\n      &quot;keyword3&quot;: {\n          &quot;value&quot;: &quot;粤海喜来登酒店&quot;\n      } ,\n      &quot;keyword4&quot;: {\n          &quot;value&quot;: &quot;广州市天河区天河路208号&quot;\n      }\n  },\n  &quot;emphasis_keyword&quot;: &quot;keyword1.DATA&quot;\n}</code></pre><p><br /></p><h2 id=\"83175ad0\">代码实现</h2><p><br /></p><blockquote><p>注意：下面的代码均为测试代码，未考虑严谨性，仅为实现功能。</p></blockquote><p><br /></p><h4 id=\"2aa12bad\">小程序端</h4><p><br /></p><pre data-lang=\"javascript\"><code>&lt;!--index.wxml--&gt;\n&lt;view class=&quot;container&quot;&gt;\n  &lt;view class=&quot;userinfo&quot;&gt;\n    &lt;button wx:if=&quot;{{!hasUserInfo || !hasOpenId}}&quot;\n            open-type=&quot;getUserInfo&quot;\n            bindgetuserinfo=&quot;getUserInfo&quot;\n            type='primary'\n            size='mini'&gt;获取用户信息&lt;/button&gt;\n    &lt;block wx:else&gt;\n      &lt;image class=&quot;userinfo-avatar&quot; src=&quot;{{userInfo.avatarUrl}}&quot; mode=&quot;cover&quot;&gt;&lt;/image&gt;\n      &lt;text class=&quot;userinfo-nickname&quot;&gt;{{userInfo.nickName}}&lt;/text&gt;\n      &lt;text class=&quot;userinfo-nickname&quot;&gt;{{openId}}&lt;/text&gt;\n    &lt;/block&gt;\n  &lt;/view&gt;\n  &lt;view wx:if=&quot;{{hasUserInfo &amp;&amp; hasOpenId}}&quot; class='usermotto'&gt;\n    &lt;form bindsubmit=&quot;templateSend&quot; report-submit=&quot;true&quot;&gt;\n      &lt;button type='primary' formType=&quot;submit&quot; size='mini'&gt;发送模板消息&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/view&gt;\n  &lt;view wx:if=&quot;{{logMessage}}&quot;&gt;\n    &lt;p style=&quot;color:red&quot;&gt;&lt;span&gt;{{logMessage}}&lt;/span&gt;&lt;/p&gt;\n  &lt;/view&gt;\n&lt;/view&gt;</code></pre><p><br /></p><p>需要注意的是，这里的表单需要加上<code>report-submit=&quot;true&quot;</code>属性，标识该属性表示可以获得一次<code>formId</code>的机会，该formId可以用来推送模板消息，下面是控制器相关的代码：</p><p><br /></p><pre data-lang=\"javascript\"><code>//index.js\n//获取应用实例\nconst app = getApp();\nconst requestHost = &quot;https://wuwz.guyubao.com/wx_small_app&quot;;\n\nPage({\n  data: {\n    userInfo: {},\n    openId: null,\n    hasUserInfo: false,\n    hasOpenId: false,\n    logMessage: null\n  },\n  getUserInfo: function(e) {\n    app.globalData.userInfo = e.detail.userInfo\n    this.setData({\n      userInfo: e.detail.userInfo,\n      hasUserInfo: true,\n      logMessage: '加载用户信息中..'\n    })\n    this.getOpenId();\n  },\n  getOpenId: function() {\n    var _this = this;\n    wx.login({\n      success: function(res) {\n        if (res.code) {\n          // 换取openid\n          wx.request({\n            url: requestHost + &quot;/get_openid_by_js_code&quot;,\n            data: {\n              js_code: res.code\n            },\n            method: 'GET',\n            success: function(res) {\n              if (res.data.openid) {\n                _this.setData({\n                  openId: res.data.openid,\n                  hasOpenId: true,\n                  logMessage: '加载用户信息完成'\n                });\n              }\n            },\n            fail: function (err) {\n              _this.setData({\n                logMessage: '[fail]' + JSON.stringify(err)\n              });\n            }\n          });\n        }\n      }\n    })\n  },\n  templateSend: function(e) {\n    var _this = this;\n    var openId = _this.data.openId;\n    // 表单需设置report-submit=&quot;true&quot;\n    var formId = e.detail.formId;\n\n    if (!formId || 'the formId is a mock one' === formId) {\n      _this.setData({\n        logMessage: '[fail]请使用真机调试，否则获取不到formId'\n      });\n      return;\n    }\n\n    // 发送随机模板消息\n    wx.request({\n      url: requestHost + &quot;/template_send&quot;,\n      data: {\n        openId: openId,\n        formId: formId\n      },\n      method: 'POST',\n      success: function(res) {\n        if (res.data.status === 0) {\n          _this.setData({\n            logMessage: '发送模板消息成功[' + new Date().getTime()+']'\n          });\n        }\n      },\n      fail: function(err) {\n        _this.setData({\n          logMessage: '[fail]' + JSON.stringify(err)\n        });\n      }\n    });\n  }\n})</code></pre><p><br /></p><h3 id=\"20496c3c\">后端接口</h3><p><br /></p><p>先针对需要使用的微信API做一个简单的封装：</p><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.wechatsmallapptmplmsg.wechat;\n\nimport cn.hutool.core.util.StrUtil;\nimport cn.hutool.http.HttpRequest;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * @author wwz\n * @version 1 (2018/8/20)\n * @since Java7\n */\n@Slf4j\npublic class WechatApi {\n    private final static LoadingCache&lt;String, String&gt; mAccessTokenCache =\n            CacheBuilder.newBuilder()\n                    .expireAfterWrite(7200, TimeUnit.SECONDS)\n                    .build(new CacheLoader&lt;String, String&gt;() {\n                        @Override\n                        public String load(String key) {\n                            // key: appId#appSecret\n                            String[] array = key.split(&quot;#&quot;);\n                            if (null == array || array.length != 2) {\n                                throw new IllegalArgumentException(&quot;load access_token error, key = &quot; + key);\n                            }\n                            return getAccessToken(array[0], array[1]);\n                        }\n                    });\n\n    public static String getAccessToken() {\n        String cacheKey = WechatConf.appId + &quot;#&quot; + WechatConf.appSecrct;\n        try {\n            return mAccessTokenCache.get(cacheKey);\n        } catch (ExecutionException e) {\n            log.error(&quot;#getAccessToken error, cacheKey=&quot; + cacheKey, e);\n        }\n        return null;\n    }\n\n    private static String getAccessToken(String appId, String appSecret) {\n        String apiUrl = StrUtil.format(//\n                &quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid={}&amp;secret={}&quot;,//\n                appId, appSecret\n        );\n        String body = HttpRequest.get(apiUrl).execute().body();\n        return throwErrorMessageIfExists(body).getString(&quot;access_token&quot;);\n    }\n\n    public static void templateSend(String accessToken, WechatTemplate template) {\n        String apiUrl = &quot;https://api.weixin.qq.com/cgi-bin/message/wxopen/template/send?access_token=&quot;//\n                + (StrUtil.isEmpty(accessToken) ? getAccessToken() : accessToken);\n        String body = HttpRequest.post(apiUrl).body(JSON.toJSONString(template)).execute().body();\n        throwErrorMessageIfExists(body);\n    }\n\n    public static JSONObject getOpenIdByJSCode(String js_code) {\n        String apiUrl = StrUtil.format(//\n                &quot;https://api.weixin.qq.com/sns/jscode2session?appid={}&amp;secret={}&amp;js_code={}&amp;grant_type=authorization_code&quot;,//\n                WechatConf.appId, WechatConf.appSecrct, js_code\n        );\n        String body = HttpRequest.get(apiUrl).execute().body();\n        return throwErrorMessageIfExists(body);\n    }\n\n    private static JSONObject throwErrorMessageIfExists(String body) {\n        String callMethodName = (new Throwable()).getStackTrace()[1].getMethodName();\n        log.info(&quot;#0820 {} body={}&quot;, callMethodName, body);\n        JSONObject jsonObject = JSON.parseObject(body);\n        if (jsonObject.containsKey(&quot;errcode&quot;) &amp;&amp; jsonObject.getIntValue(&quot;errcode&quot;) &gt; 0) {\n            throw new RuntimeException(StrUtil.format(&quot;#WechatApi[{}] call error: {}&quot;, callMethodName, body));\n        }\n        return jsonObject;\n    }\n}</code></pre><p><br /></p><p>对外开放相关的接口：</p><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.wechatsmallapptmplmsg.controller;\n\nimport cn.hutool.core.date.DateUtil;\nimport cn.hutool.core.util.RandomUtil;\nimport cn.hutool.core.util.StrUtil;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.wuwenze.wechatsmallapptmplmsg.util.MapUtil;\nimport com.wuwenze.wechatsmallapptmplmsg.wechat.WechatApi;\nimport com.wuwenze.wechatsmallapptmplmsg.wechat.WechatConf;\nimport com.wuwenze.wechatsmallapptmplmsg.util.SecurityUtil;\nimport com.wuwenze.wechatsmallapptmplmsg.util.WebUtil;\nimport com.wuwenze.wechatsmallapptmplmsg.wechat.WechatTemplate;\nimport com.wuwenze.wechatsmallapptmplmsg.wechat.WechatTemplateItem;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Map;\nimport java.util.stream.Stream;\n\n/**\n * @author wwz\n * @version 1 (2018/8/16)\n * @since Java7\n */\n@Slf4j\n@RestController\n@RequestMapping(&quot;/wx_small_app&quot;)\npublic class WechatController {\n\n    @GetMapping(&quot;/get_openid_by_js_code&quot;)\n    public Map&lt;String, Object&gt; getOpenIdByJSCode(String js_code) {\n        return WechatApi.getOpenIdByJSCode(js_code);\n    }\n\n    @PostMapping(&quot;/template_send&quot;)\n    public Map&lt;String, Object&gt; templateSend() {\n        String accessToken = WechatApi.getAccessToken();\n        JSONObject body = JSON.parseObject(WebUtil.getBody());\n\n        // 填充模板数据 （测试代码，写死）\n        WechatTemplate wechatTemplate = new WechatTemplate()\n                .setTouser(body.getString(&quot;openId&quot;))\n                .setTemplate_id(WechatConf.templateId)\n                // 表单提交场景下为formid，支付场景下为prepay_id\n                .setForm_id(body.getString(&quot;formId&quot;))\n                // 跳转页面\n                .setPage(&quot;index&quot;)\n                /**\n                 * 模板内容填充：随机字符\n                 * 购买地点 {{keyword1.DATA}}\n                 * 购买时间 {{keyword2.DATA}}\n                 * 物品名称 {{keyword3.DATA}}\n                 * 交易单号 {{keyword4.DATA}}\n                 * -&gt; {&quot;keyword1&quot;: {&quot;value&quot;:&quot;xxx&quot;}, &quot;keyword2&quot;: ...}\n                 */\n                .setData(MapUtil.newHashMap(//\n                        &quot;keyword1&quot;, new WechatTemplateItem(RandomUtil.randomString(10)),//\n                        &quot;keyword2&quot;, new WechatTemplateItem(DateUtil.now()),//\n                        &quot;keyword3&quot;, new WechatTemplateItem(RandomUtil.randomString(10)),//\n                        &quot;keyword4&quot;, new WechatTemplateItem(RandomUtil.randomNumbers(10)) //\n                ));\n        WechatApi.templateSend(accessToken, wechatTemplate);\n        return MapUtil.newHashMap(&quot;status&quot;, 0);\n    }\n\n    @GetMapping(&quot;/validate&quot;)\n    public void validate(String signature, String timestamp, String nonce, String echostr) {\n        final StringBuilder attrs = new StringBuilder();\n        Stream.of(WechatConf.token, timestamp, nonce)//\n                .sorted()//\n                .forEach((item) -&gt; attrs.append(item));\n        String sha1 = SecurityUtil.getSha1(attrs.toString());\n        if (StrUtil.equalsIgnoreCase(sha1, signature)) {\n            WebUtil.write(echostr);\n            return;\n        }\n        log.error(&quot;#0820 WechatController.validate() error, attrs = {}&quot;, attrs);\n    }\n}</code></pre><p><br /></p><h2 id=\"3a29e779\">最终效果</h2><p><br /></p><h3 id=\"239157c6\">小程序界面</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006575513-5e8a5d84-bbc3-4786-be65-a7ef943272fb.png#align=left&amp;display=inline&amp;height=832&amp;linkTarget=_blank&amp;originHeight=832&amp;originWidth=515&amp;size=0&amp;width=515\" style=\"max-width: 600px; width: 515px;\" /></p><p><br /></p><h3 id=\"8d6717d4\">收到的模板消息</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006575558-9af04d4f-7b53-4985-9546-42fad34b2772.png#align=left&amp;display=inline&amp;height=897&amp;linkTarget=_blank&amp;originHeight=897&amp;originWidth=511&amp;size=0&amp;width=511\" style=\"max-width: 600px; width: 511px;\" /></p><p><br /></p><h2 id=\"f55225d4\">其他：突破发送模板消息的限制</h2><p><br /></p><blockquote><p>如非必要，尽量不要这样做，一旦发现小程序滥用模板消息，微信是有权进行封禁的。</p></blockquote><p><br /></p><p>简单来说，我们可以将小程序的表单组件进行封装，伪装小程序中其他功能按钮。当用户点击按钮时，表单组件就自动把formId上传给服务器保存（7天后过期），当收集到一定的用户点击事件后，就可以拿来使用了（主动消息推送群发），哈哈哈。</p><p><br /></p><h2 id=\"bd3b4348\">源码地址</h2><p><br /></p><blockquote><p>包含用到的内网穿透工具</p></blockquote><p><br /></p><p><a href=\"https://gitee.com/wuwenze/wechat-smallapp-tmplmsg\" target=\"_blank\">https://gitee.com/wuwenze/wechat-smallapp-tmplmsg</a><br />\n<a href=\"https://github.com/wuwz/wechat-smallapp-tmplmsg\" target=\"_blank\">https://github.com/wuwz/wechat-smallapp-tmplmsg</a></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:37:06.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:35:28.000Z",
    "updated_at": "2019-02-01T07:37:06.000Z",
    "published_at": "2019-02-01T07:37:06.000Z",
    "first_published_at": "2019-02-01T07:37:06.000Z",
    "word_count": 2695,
    "cover": "",
    "description": "date: 2018-08-21 15:05:17tags: [&quot;微信&quot;,&quot;小程序&quot;,&quot;模板消息&quot;]模板消息是基于微信的通知渠道，为开发者提供了可以高效触达用户的模板消息能力，以便实现服务的闭环并提供更佳的体验。想推送模板消息，得满足...",
    "custom_description": "模板消息是基于微信的通知渠道，为开发者提供了可以高效触达用户的模板消息能力，以便实现服务的闭环并提供更佳的体验。想推送模板消息，得满足...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224426,
    "slug": "vmware-centos-network-config",
    "title": "解决VMware安装CentOS无法联网的问题",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-08-12 15:48:00<br />tags: [\"VMware\",\"CentOS\",\"Linux\"]\n---\n\n由于centos 6.5 minimal默认没有开启网卡，所以需要手动配置一下；\n\n## 导致的问题\n\n1. 无法与主机通讯；\n1. 无法连接外网；\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515798-043c18a1-4305-479f-9828-c511374d4e3a.png#align=left&display=inline&height=465&linkTarget=_blank&originHeight=584&originWidth=937&size=0&width=746)\n\n## 配置步骤\n\n### 1) 确认虚拟机是否使用`NAT模式`：\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515821-125fb144-cd82-438b-8337-72f1783f2b66.png#align=left&display=inline&height=663&linkTarget=_blank&originHeight=663&originWidth=735&size=0&width=735)\n\n### 2) 记录一下网关、网段信息：进入菜单（`编辑`-`虚拟网络编辑器`）\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515750-246d0458-5b8e-43fd-b6f2-f88461862eed.png#align=left&display=inline&height=526&linkTarget=_blank&originHeight=526&originWidth=594&size=0&width=594)\n\n### 3) 选择`VMnet8 (NAT模式)`，`取消DHCP服务勾选`，然后点击NAT设置：\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515763-e9584625-5fbb-4c3b-878e-dadce090793a.png#align=left&display=inline&height=520&linkTarget=_blank&originHeight=520&originWidth=498&size=0&width=498)\n\n> 记录一下网关地址（`192.168.253.2`）后面会用到的\n\n\n### 4) 打开`网络和共享中心` - `更改适配器设置` - 选择`VMware Network Adapter VMnet8` - 右键状态 - 详细信息\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515790-fda8df70-8f46-4027-b24f-4ee84b61c044.png#align=left&display=inline&height=421&linkTarget=_blank&originHeight=421&originWidth=373&size=0&width=373)\n\n> 其中，IPv4地址是虚拟路由器为Windows分配的地址，IPv4 WINS 服务器是虚拟路由器的网关地址\n\n\n### 5) 进入CentOS，进行网络配置：\n\n```\n/etc/sysconfig/network-scripts/ifcfg-eth0\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515818-ecbd14f1-007a-4be4-baba-b0f4a4f95b11.png#align=left&display=inline&height=419&linkTarget=_blank&originHeight=526&originWidth=937&size=0&width=746)\n\n```\n## 修改的内容\nONBOOT=yes #自启动,默认为no\nNM_CONTROLLED=no #不需要,关闭\nBOOTPROTO=static #默认为dbcp, 修改为静态\n \n## 添加的内容\nIPADDR=192.168.253.110 #根据网关设置的静态IP\nNETMASK=255.255.255.0\nGATEWAY=192.168.253.2 #网关地址\n```\n\n### 6) 重启网卡\n\n```\nservice network restart\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515832-5851a2ac-ca76-46dc-8b54-dc11c15efdd5.png#align=left&display=inline&height=419&linkTarget=_blank&originHeight=526&originWidth=937&size=0&width=746)\n\n### 7) 检测是否能够与主机进行通讯\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515784-eebd2cac-7715-4a7b-b161-f455ae6c1088.png#align=left&display=inline&height=419&linkTarget=_blank&originHeight=526&originWidth=937&size=0&width=746)\n\n### 8) 设置DNS服务器： vi /etc/resolv.conf\n\n```\nnameserver 114.114.114.114\n```\n\n### 9) 检测是否能够连接外网\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515783-ace2f38d-09a7-4156-b60e-b04bd85c18e9.png#align=left&display=inline&height=419&linkTarget=_blank&originHeight=526&originWidth=937&size=0&width=746)\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-08-12 15:48:00</p><p>tags: [&quot;VMware&quot;,&quot;CentOS&quot;,&quot;Linux&quot;]</p><hr /><p><br /></p><p>由于centos 6.5 minimal默认没有开启网卡，所以需要手动配置一下；</p><p><br /></p><h2 id=\"9c358714\">导致的问题</h2><p><br /></p><ol start=\"1\"><li>无法与主机通讯；</li></ol><ol start=\"2\"><li>无法连接外网；</li></ol><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515798-043c18a1-4305-479f-9828-c511374d4e3a.png#align=left&amp;display=inline&amp;height=465&amp;linkTarget=_blank&amp;originHeight=584&amp;originWidth=937&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"1fc4c1f5\">配置步骤</h2><p><br /></p><h3 id=\"930e87b2\">1) 确认虚拟机是否使用<code>NAT模式</code>：</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515821-125fb144-cd82-438b-8337-72f1783f2b66.png#align=left&amp;display=inline&amp;height=663&amp;linkTarget=_blank&amp;originHeight=663&amp;originWidth=735&amp;size=0&amp;width=735\" style=\"max-width: 600px; width: 735px;\" /></p><p><br /></p><h3 id=\"7af112c4\">2) 记录一下网关、网段信息：进入菜单（<code>编辑</code>-<code>虚拟网络编辑器</code>）</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515750-246d0458-5b8e-43fd-b6f2-f88461862eed.png#align=left&amp;display=inline&amp;height=526&amp;linkTarget=_blank&amp;originHeight=526&amp;originWidth=594&amp;size=0&amp;width=594\" style=\"max-width: 600px; width: 594px;\" /></p><p><br /></p><h3 id=\"44ce2bf2\">3) 选择<code>VMnet8 (NAT模式)</code>，<code>取消DHCP服务勾选</code>，然后点击NAT设置：</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515763-e9584625-5fbb-4c3b-878e-dadce090793a.png#align=left&amp;display=inline&amp;height=520&amp;linkTarget=_blank&amp;originHeight=520&amp;originWidth=498&amp;size=0&amp;width=498\" style=\"max-width: 600px; width: 498px;\" /></p><p><br /></p><blockquote><p>记录一下网关地址（<code>192.168.253.2</code>）后面会用到的</p></blockquote><p><br /></p><h3 id=\"6ca9b5ea\">4) 打开<code>网络和共享中心</code> - <code>更改适配器设置</code> - 选择<code>VMware Network Adapter VMnet8</code> - 右键状态 - 详细信息</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515790-fda8df70-8f46-4027-b24f-4ee84b61c044.png#align=left&amp;display=inline&amp;height=421&amp;linkTarget=_blank&amp;originHeight=421&amp;originWidth=373&amp;size=0&amp;width=373\" style=\"max-width: 600px; width: 373px;\" /></p><p><br /></p><blockquote><p>其中，IPv4地址是虚拟路由器为Windows分配的地址，IPv4 WINS 服务器是虚拟路由器的网关地址</p></blockquote><p><br /></p><h3 id=\"28f6e19e\">5) 进入CentOS，进行网络配置：</h3><p><br /></p><pre><code>/etc/sysconfig/network-scripts/ifcfg-eth0</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515818-ecbd14f1-007a-4be4-baba-b0f4a4f95b11.png#align=left&amp;display=inline&amp;height=419&amp;linkTarget=_blank&amp;originHeight=526&amp;originWidth=937&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><pre><code>## 修改的内容\nONBOOT=yes #自启动,默认为no\nNM_CONTROLLED=no #不需要,关闭\nBOOTPROTO=static #默认为dbcp, 修改为静态\n \n## 添加的内容\nIPADDR=192.168.253.110 #根据网关设置的静态IP\nNETMASK=255.255.255.0\nGATEWAY=192.168.253.2 #网关地址</code></pre><p><br /></p><h3 id=\"1288c1c0\">6) 重启网卡</h3><p><br /></p><pre><code>service network restart</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515832-5851a2ac-ca76-46dc-8b54-dc11c15efdd5.png#align=left&amp;display=inline&amp;height=419&amp;linkTarget=_blank&amp;originHeight=526&amp;originWidth=937&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"17c1d880\">7) 检测是否能够与主机进行通讯</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515784-eebd2cac-7715-4a7b-b161-f455ae6c1088.png#align=left&amp;display=inline&amp;height=419&amp;linkTarget=_blank&amp;originHeight=526&amp;originWidth=937&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"54e76586\">8) 设置DNS服务器： vi /etc/resolv.conf</h3><p><br /></p><pre><code>nameserver 114.114.114.114</code></pre><p><br /></p><h3 id=\"23147db8\">9) 检测是否能够连接外网</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006515783-ace2f38d-09a7-4156-b60e-b04bd85c18e9.png#align=left&amp;display=inline&amp;height=419&amp;linkTarget=_blank&amp;originHeight=526&amp;originWidth=937&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:35:23.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:34:38.000Z",
    "updated_at": "2019-02-01T07:35:23.000Z",
    "published_at": "2019-02-01T07:35:23.000Z",
    "first_published_at": "2019-02-01T07:35:23.000Z",
    "word_count": 330,
    "cover": "",
    "description": "date: 2018-08-12 15:48:00tags: [&quot;VMware&quot;,&quot;CentOS&quot;,&quot;Linux&quot;]由于centos 6.5 minimal默认没有开启网卡，所以需要手动配置一下；导致的问题无法与主机通讯；无法连接外网...",
    "custom_description": "由于centos 6.5 minimal默认没有开启网卡，所以需要手动配置一下；\n",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224422,
    "slug": "ubuntu-shadowsocks-gfwlist",
    "title": "Ubuntu下使用Shadowsocks GFWList",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-07-26 14:59:42<br />tags: [\"Ubuntu\",\"Linux\",\"Shadowsocks\"]\n---\n\n现有的SS客户端在Linux上仅支持全局代理，本文以Ubuntu发行版为例，配置PAC自动代理，达到无缝切换的目的。\n\n### 更新系统\n\n```\n$ sudo apt update\n$ sudo apt upgrade\n```\n\n### 安装Shadowsocks GUI\n\n> 非ubuntu系统可以参考此链接自行编译<br />\n[https://github.com/shadowsocks/shadowsocks-qt5](https://github.com/shadowsocks/shadowsocks-qt5)\n\n\n在ubuntu上安装相当简单，可直接使用PPA源（`14.04 lts以上系统`）\n#### 安装相关依赖\n\n```\n$ sudo apt install libappindicator1 libindicator7\n```\n\n#### 安装shadowsocks-qt5\n\n```\n$ sudo add-apt-repository ppa:hzwhuang/ss-qt5\n$ sudo apt-get update\n$ sudo apt-get install shadowsocks-qt5\n```\n\n### 配置Shadowsocks服务\n\n配置过程不做过多描述, 自行购买相关服务后配置, 配置完成后如下图所示：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006438726-3a18b19d-e6c6-4eba-9705-fa4a758e5332.png#align=left&display=inline&height=343&linkTarget=_blank&originHeight=429&originWidth=934&size=0&width=746)\n\n### 配置网络代理（全局）\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006438692-cd67ba51-a5c4-440d-8a07-d5c057345418.png#align=left&display=inline&height=433&linkTarget=_blank&originHeight=494&originWidth=852&size=0&width=746)<br />\n此时，所有的HTTP请求都将通过代理，显然不是想要的结果；\n\n### 配置基于gfwlist的pac文件生成工具\n\n>什么是gfwlist? [https://github.com/gfwlist/gfwlist](https://github.com/gfwlist/gfwlist)<br />\n什么是PAC? [https://baike.baidu.com/item/PAC/16292100](https://baike.baidu.com/item/PAC/16292100)\n\n#### 1. 安装pip\n\n```\n$ sudo apt install python-pip\n$ pip install --upgrade pip\n```\n\n#### 2. 安装GenPAC\n\n```\n$ sudo pip install genpac\n$ pip install --upgrade genpac\n```\n\n#### 3. 使用GenPAC生成pac文件(基于gfwlist)\n\nGenPAC: [https://github.com/JinnLynn/GenPAC](https://github.com/JinnLynn/GenPAC)\n\n```\n$ genpac -p \"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=\"autoproxy.pac\"\n```\n\n生成文件位于当前执行命令路径(我的生成为：/home/ubuntu/autoproxy.pac),文件内容如下：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006439729-4d6cd69e-fc0f-432b-8f3a-11dea519cd32.png#align=left&display=inline&height=663&linkTarget=_blank&originHeight=667&originWidth=750&size=0&width=746)\n\n### 配置网络代理（自动PAC）\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006439521-a27ec3ee-b54b-47dd-ac5a-13b621075125.png#align=left&display=inline&height=433&linkTarget=_blank&originHeight=494&originWidth=852&size=0&width=746)<br />\n参考上图配置网络代理,其中<br />\n“方法=自动”<br />\n“配置URL=file://{pacFilePath}”\n\nOK, 大功告成。\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-07-26 14:59:42</p><p>tags: [&quot;Ubuntu&quot;,&quot;Linux&quot;,&quot;Shadowsocks&quot;]</p><hr /><p><br /></p><p>现有的SS客户端在Linux上仅支持全局代理，本文以Ubuntu发行版为例，配置PAC自动代理，达到无缝切换的目的。</p><p><br /></p><h3 id=\"f82c3a2c\">更新系统</h3><p><br /></p><pre><code>$ sudo apt update\n$ sudo apt upgrade</code></pre><p><br /></p><h3 id=\"fc3ba93f\">安装Shadowsocks GUI</h3><p><br /></p><blockquote><p>非ubuntu系统可以参考此链接自行编译<br />\n<a href=\"https://github.com/shadowsocks/shadowsocks-qt5\" target=\"_blank\">https://github.com/shadowsocks/shadowsocks-qt5</a></p></blockquote><p><br /></p><p>在ubuntu上安装相当简单，可直接使用PPA源（<code>14.04 lts以上系统</code>）</p><h4 id=\"19a04dfc\">安装相关依赖</h4><p><br /></p><pre><code>$ sudo apt install libappindicator1 libindicator7</code></pre><p><br /></p><h4 id=\"383f29a2\">安装shadowsocks-qt5</h4><p><br /></p><pre><code>$ sudo add-apt-repository ppa:hzwhuang/ss-qt5\n$ sudo apt-get update\n$ sudo apt-get install shadowsocks-qt5</code></pre><p><br /></p><h3 id=\"464eadf9\">配置Shadowsocks服务</h3><p><br /></p><p>配置过程不做过多描述, 自行购买相关服务后配置, 配置完成后如下图所示：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006438726-3a18b19d-e6c6-4eba-9705-fa4a758e5332.png#align=left&amp;display=inline&amp;height=343&amp;linkTarget=_blank&amp;originHeight=429&amp;originWidth=934&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"0fabc41e\">配置网络代理（全局）</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006438692-cd67ba51-a5c4-440d-8a07-d5c057345418.png#align=left&amp;display=inline&amp;height=433&amp;linkTarget=_blank&amp;originHeight=494&amp;originWidth=852&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n此时，所有的HTTP请求都将通过代理，显然不是想要的结果；</p><p><br /></p><h3 id=\"b4c3a7e8\">配置基于gfwlist的pac文件生成工具</h3><p><br /></p><p>&gt;什么是gfwlist? <a href=\"https://github.com/gfwlist/gfwlist\" target=\"_blank\">https://github.com/gfwlist/gfwlist</a><br />\n什么是PAC? <a href=\"https://baike.baidu.com/item/PAC/16292100\" target=\"_blank\">https://baike.baidu.com/item/PAC/16292100</a></p><p><br /></p><h4 id=\"caafb8ff\">1. 安装pip</h4><p><br /></p><pre><code>$ sudo apt install python-pip\n$ pip install --upgrade pip</code></pre><p><br /></p><h4 id=\"5207d314\">2. 安装GenPAC</h4><p><br /></p><pre><code>$ sudo pip install genpac\n$ pip install --upgrade genpac</code></pre><p><br /></p><h4 id=\"669c77a7\">3. 使用GenPAC生成pac文件(基于gfwlist)</h4><p><br /></p><p>GenPAC: <a href=\"https://github.com/JinnLynn/GenPAC\" target=\"_blank\">https://github.com/JinnLynn/GenPAC</a></p><p><br /></p><pre><code>$ genpac -p &quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-proxy=&quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=&quot;autoproxy.pac&quot;</code></pre><p><br /></p><p>生成文件位于当前执行命令路径(我的生成为：/home/ubuntu/autoproxy.pac),文件内容如下：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006439729-4d6cd69e-fc0f-432b-8f3a-11dea519cd32.png#align=left&amp;display=inline&amp;height=663&amp;linkTarget=_blank&amp;originHeight=667&amp;originWidth=750&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"c895a326\">配置网络代理（自动PAC）</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006439521-a27ec3ee-b54b-47dd-ac5a-13b621075125.png#align=left&amp;display=inline&amp;height=433&amp;linkTarget=_blank&amp;originHeight=494&amp;originWidth=852&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n参考上图配置网络代理,其中<br />\n“方法=自动”<br />\n“配置URL=file://{pacFilePath}”</p><p><br /></p><p>OK, 大功告成。</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:34:23.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:33:34.000Z",
    "updated_at": "2019-02-01T07:47:55.000Z",
    "published_at": "2019-02-01T07:47:55.000Z",
    "first_published_at": "2019-02-01T07:34:23.000Z",
    "word_count": 404,
    "cover": "",
    "description": "date: 2018-07-26 14:59:42tags: [&quot;Ubuntu&quot;,&quot;Linux&quot;,&quot;Shadowsocks&quot;]现有的SS客户端在Linux上仅支持全局代理，本文以Ubuntu发行版为例，配置PAC自动代理，达到无缝切换...",
    "custom_description": "现有的SS客户端在Linux上仅支持全局代理，本文以Ubuntu发行版为例，配置PAC自动代理，达到无缝切换...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224419,
    "slug": "sql-optimization",
    "title": "一些常见的 SQL 语句优化方法",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-06-24 14:45:55<br />tags: [\"MySQL\"]\n---\n\n1. 应尽量避免在 where 子句中使用!=或操作符，否则将引擎放弃使用索引而进行全表扫描。\n1. 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n1. 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n```sql\nselect id from t where num is null\n# 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\nselect id from t where num=0\n```\n1. 尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n```sql\nselect id from t where num=10 or num=20\n#可以这样查询：\nselect id from t where num=10\nunion all\nselect id from t where num=20\n```\n\n1. 下面的查询也将导致全表扫描：(不能前置百分号)\n\n```sql\nselect id from t where name like ‘%c%’\n#若要提高效率，可以考虑全文检索。\n```\n\n1. in 和 not in 也要慎用，否则会导致全表扫描，如：\n\n```sql\nselect id from t where num in(1,2,3)\n#对于连续的数值，能用 between 就不要用 in 了：\nselect id from t where num between 1 and 3\n```\n\n1. 如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：\n\n```sql\nselect id from t where num=@num\n#可以改为强制查询使用索引：\nselect id from t with(index(索引名)) where num=@num\n```\n\n1. 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：\n\n```sql\nselect id from t where num/2=100\n#应改为:\nselect id from t where num=100*2\n```\n\n1. 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：\n\n```sql\nselect id from t where substring(name,1,3)=’abc’–name以abc开头的id\nselect id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id\n#应改为:\n\nselect id from t where name like ‘abc%’\nselect id from t where createdate&gt;=’2005-11-30′ and createdate&lt;’2005-12-1′\n```\n\n1. 不要在 where 子句中的“=”左边进行函数. 算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n1. 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。\n1. 不要写一些没有意义的查询，如需要生成一个空表结构：\n\n```sql\nselect col1,col2 into #t from t where 1=0\n#这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：\n\ncreate table #t(…)\n```\n\n1. 很多时候用 exists 代替 in 是一个好的选择：\n\n```sql\nselect num from a where num in(select num from b)\n用下面的语句替换：\n\nselect num from a where exists(select 1 from b where num=a.num)\n```\n\n1. 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male. female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n1. 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。\n1. 应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。\n1. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n1. 尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n1. 任何地方都不要使用 select _ from t ，用具体的字段列表代替“_”，不要返回用不到的任何字段。\n1. 尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。\n1. 避免频繁创建和删除临时表，以减少系统表资源的消耗。\n1. 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使 用导出表。\n1. 在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n1. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n1. 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n1. 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n1. 与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n1. 在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。\n1. 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。\n1. 尽量避免大事务操作，提高系统并发能力。\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-06-24 14:45:55</p><p>tags: [&quot;MySQL&quot;]</p><hr /><p><br /></p><ol start=\"1\"><li>应尽量避免在 where 子句中使用!=或操作符，否则将引擎放弃使用索引而进行全表扫描。</li></ol><ol start=\"2\"><li>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</li></ol><ol start=\"3\"><li>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</li></ol><p><br /></p><pre data-lang=\"sql\"><code>select id from t where num is null\n# 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\nselect id from t where num=0</code></pre><ol start=\"4\"><li>尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</li></ol><p><br /></p><pre data-lang=\"sql\"><code>select id from t where num=10 or num=20\n#可以这样查询：\nselect id from t where num=10\nunion all\nselect id from t where num=20</code></pre><p><br /></p><ol start=\"5\"><li>下面的查询也将导致全表扫描：(不能前置百分号)</li></ol><p><br /></p><pre data-lang=\"sql\"><code>select id from t where name like ‘%c%’\n#若要提高效率，可以考虑全文检索。</code></pre><p><br /></p><ol start=\"6\"><li>in 和 not in 也要慎用，否则会导致全表扫描，如：</li></ol><p><br /></p><pre data-lang=\"sql\"><code>select id from t where num in(1,2,3)\n#对于连续的数值，能用 between 就不要用 in 了：\nselect id from t where num between 1 and 3</code></pre><p><br /></p><ol start=\"7\"><li>如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</li></ol><p><br /></p><pre data-lang=\"sql\"><code>select id from t where num=@num\n#可以改为强制查询使用索引：\nselect id from t with(index(索引名)) where num=@num</code></pre><p><br /></p><ol start=\"8\"><li>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</li></ol><p><br /></p><pre data-lang=\"sql\"><code>select id from t where num/2=100\n#应改为:\nselect id from t where num=100*2</code></pre><p><br /></p><ol start=\"9\"><li>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</li></ol><p><br /></p><pre data-lang=\"sql\"><code>select id from t where substring(name,1,3)=’abc’–name以abc开头的id\nselect id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id\n#应改为:\n\nselect id from t where name like ‘abc%’\nselect id from t where createdate&amp;gt;=’2005-11-30′ and createdate&amp;lt;’2005-12-1′</code></pre><p><br /></p><ol start=\"10\"><li>不要在 where 子句中的“=”左边进行函数. 算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</li></ol><ol start=\"11\"><li>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。</li></ol><ol start=\"12\"><li>不要写一些没有意义的查询，如需要生成一个空表结构：</li></ol><p><br /></p><pre data-lang=\"sql\"><code>select col1,col2 into #t from t where 1=0\n#这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：\n\ncreate table #t(…)</code></pre><p><br /></p><ol start=\"13\"><li>很多时候用 exists 代替 in 是一个好的选择：</li></ol><p><br /></p><pre data-lang=\"sql\"><code>select num from a where num in(select num from b)\n用下面的语句替换：\n\nselect num from a where exists(select 1 from b where num=a.num)</code></pre><p><br /></p><ol start=\"14\"><li>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male. female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</li></ol><ol start=\"15\"><li>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</li></ol><ol start=\"16\"><li>应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</li></ol><ol start=\"17\"><li>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</li></ol><ol start=\"18\"><li>尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</li></ol><ol start=\"19\"><li>任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。</li></ol><ol start=\"20\"><li>尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</li></ol><ol start=\"21\"><li>避免频繁创建和删除临时表，以减少系统表资源的消耗。</li></ol><ol start=\"22\"><li>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使 用导出表。</li></ol><ol start=\"23\"><li>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</li></ol><ol start=\"24\"><li>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</li></ol><ol start=\"25\"><li>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</li></ol><ol start=\"26\"><li>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</li></ol><ol start=\"27\"><li>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</li></ol><ol start=\"28\"><li>在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</li></ol><ol start=\"29\"><li>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</li></ol><ol start=\"30\"><li>尽量避免大事务操作，提高系统并发能力。</li></ol><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:33:19.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:32:38.000Z",
    "updated_at": "2019-02-01T07:49:51.000Z",
    "published_at": "2019-02-01T07:49:51.000Z",
    "first_published_at": "2019-02-01T07:33:19.000Z",
    "word_count": 1940,
    "cover": "",
    "description": "date: 2018-06-24 14:45:55tags: [&quot;MySQL&quot;]应尽量避免在 where 子句中使用!=或操作符，否则将引擎放弃使用索引而进行全表扫描。对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。应...",
    "custom_description": "应尽量避免在 where 子句中使用!=或操作符，否则将引擎放弃使用索引而进行全表扫描。对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。应...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224417,
    "slug": "springcloud-eureka-restapi",
    "title": "开放Spring Cloud Eureka API",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-05-26 14:42:36<br />tags: [\"SpringBoot\",\"SpringCloud\",\"Eureka\",\"RESTful\"]\n---\n\n一般来说，Eureka 默认提供了一套 UI 界面，但在大多数情况下，由于 UI 风格问题并不适合直接嵌入到业务系统中使用；<br />\n本文通过扩展 Eureka 项目，实现相关的自定义接口，以便业务系统集成调用；\n\n#### 1. Eureka Project;\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n</dependency>\n```\n\n```java\n@EnableEurekaServer\n@SpringBootApplication(scanBasePackages = \"com.fastjee\")\npublic class FastjeeEurekaApplication {\n\n    public static void main(String[] args) {\n        FastjeeApplication.run(FastjeeEurekaApplication.class, args);\n    }\n}\n```\n#### 2. RESTful API\n\n```java\npackage com.fastjee.eureka.rest;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n\nimport com.netflix.appinfo.AmazonInfo;\nimport com.netflix.appinfo.ApplicationInfoManager;\nimport com.netflix.appinfo.DataCenterInfo;\nimport com.netflix.appinfo.InstanceInfo;\nimport com.netflix.config.ConfigurationManager;\nimport com.netflix.config.DeploymentContext;\nimport com.netflix.discovery.shared.Application;\nimport com.netflix.discovery.shared.Pair;\nimport com.netflix.eureka.EurekaServerContext;\nimport com.netflix.eureka.EurekaServerContextHolder;\nimport com.netflix.eureka.cluster.PeerEurekaNode;\nimport com.netflix.eureka.registry.PeerAwareInstanceRegistry;\nimport com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl;\nimport com.netflix.eureka.resources.StatusResource;\nimport com.netflix.eureka.util.StatusInfo;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.annotation.Resource;\n\nimport cn.hutool.core.util.ReflectUtil;\n\n/**\n * Eureka RestAPI.\n */\n@RestController\n@RequestMapping(\"/eureka_rest_api\")\npublic class EurekaRestApi {\n\n    @Resource\n    private ApplicationInfoManager applicationInfoManager;\n\n    /**\n     * Simple System Status, DS Replicas\n     */\n    @GetMapping(\"/system_status\")\n    public ResponseEntity<?> systemStatus() {\n        Map<String, Object> model = Maps.newHashMap();\n        DeploymentContext deploymentContext = ConfigurationManager.getDeploymentContext();\n        model.put(\"currentTime\", new Date());\n        model.put(\"upTime\", StatusInfo.getUpTime());\n        model.put(\"applicationId\", deploymentContext.getApplicationId());\n        model.put(\"environment\", deploymentContext.getDeploymentEnvironment());\n        model.put(\"datacenter\", deploymentContext.getDeploymentDatacenter());\n        PeerAwareInstanceRegistry registry = getRegistry();\n        // model.put(\"registry\", registry);\n        model.put(\"leaseExpirationEnabled\", registry.isLeaseExpirationEnabled());\n        model.put(\"renewsPerMinThreshold\", registry.getNumOfRenewsPerMinThreshold());\n        model.put(\"renewsInLastMin\", registry.getNumOfRenewsInLastMin());\n        // model.put(\"isBelowRenewThresold\", registry.isBelowRenewThresold() == 1);\n        String warningMessage = \"\";\n        if (registry.isBelowRenewThresold() == 1) {\n            if (!registry.isSelfPreservationModeEnabled()) {\n                warningMessage = \"注意: 续订量低于阈值, 自我保护模式被改变。\";\n            } else {\n                warningMessage = \"注意: 已经进入自我保护模式, 该模式下将不会注销任何微服务(即使服务已经失效)。\";\n            }\n        } else if (!registry.isSelfPreservationModeEnabled()) {\n            warningMessage = \"注意: 自我保护模式已关闭。\";\n        }\n        model.put(\"warningMessage\", warningMessage);\n        DataCenterInfo info = applicationInfoManager.getInfo().getDataCenterInfo();\n        if (info.getName() == DataCenterInfo.Name.Amazon) {\n            AmazonInfo amazonInfo = (AmazonInfo) info;\n            model.put(\"amazonInfo\", amazonInfo);\n            model.put(\"amiId\", amazonInfo.get(AmazonInfo.MetaDataKey.amiId));\n            model.put(\"availabilityZone\", amazonInfo.get(AmazonInfo.MetaDataKey.availabilityZone));\n            model.put(\"instanceId\", amazonInfo.get(AmazonInfo.MetaDataKey.instanceId));\n        }\n        Map<String, String> replicas = Maps.newHashMap();\n        List<PeerEurekaNode> list = getServerContext().getPeerEurekaNodes().getPeerNodesView();\n        for (PeerEurekaNode node : list) {\n            try {\n                URI uri = new URI(node.getServiceUrl());\n                String href = scrubBasicAuth(node.getServiceUrl());\n                replicas.put(uri.getHost(), href);\n            } catch (Exception ex) {\n                // ignore?\n            }\n        }\n        model.put(\"replicas\", replicas.entrySet());\n        return ResponseEntity.ok(model);\n    }\n\n    /**\n     * General Info, Instance Info\n     */\n    @GetMapping(\"/info\")\n    public ResponseEntity<?> info() {\n        Map<String, Object> model = Maps.newHashMap();\n        StatusInfo statusInfo = null;\n        try {\n            statusInfo = new StatusResource().getStatusInfo();\n            statusInfo.isHealthy(); // throw NullPointerException\n        } catch (Exception e) {\n            if (e instanceof NullPointerException) {\n                ReflectUtil.setFieldValue(statusInfo, \"isHeathly\", true);\n            } else {\n                statusInfo = StatusInfo.Builder.newBuilder().isHealthy(false).build();\n            }\n        }\n        // Instance Info\n        model.put(\"instanceInfo\", getInstanceInfo(statusInfo));\n\n        // General Info\n        model.put(\"generalInfo\", getGeneralInfo(statusInfo));\n        return ResponseEntity.ok(model);\n    }\n\n    /**\n     * Instances currently registered with Eureka\n     */\n    @GetMapping(\"/registered_apps\")\n    public ResponseEntity<?> registeredApps() {\n        List<Map<String, Object>> registeredApps = Lists.newArrayList();\n        List<Application> sortedApplications = getRegistry().getSortedApplications();\n        for (Application app : sortedApplications) {\n            LinkedHashMap<String, Object> appData = new LinkedHashMap<>();\n            registeredApps.add(appData);\n            appData.put(\"name\", app.getName());\n            Map<String, Integer> amiCounts = new HashMap<>();\n            Map<InstanceInfo.InstanceStatus, List<Pair<String, String>>> instancesByStatus = new HashMap<>();\n            Map<String, Integer> zoneCounts = new HashMap<>();\n            for (InstanceInfo info : app.getInstances()) {\n                String id = info.getId();\n                String url = info.getStatusPageUrl();\n                InstanceInfo.InstanceStatus status = info.getStatus();\n                String ami = \"n/a\";\n                String zone = \"\";\n                if (info.getDataCenterInfo().getName() == DataCenterInfo.Name.Amazon) {\n                    AmazonInfo dcInfo = (AmazonInfo) info.getDataCenterInfo();\n                    ami = dcInfo.get(AmazonInfo.MetaDataKey.amiId);\n                    zone = dcInfo.get(AmazonInfo.MetaDataKey.availabilityZone);\n                }\n                Integer count = amiCounts.get(ami);\n                if (count != null) {\n                    amiCounts.put(ami, count + 1);\n                } else {\n                    amiCounts.put(ami, 1);\n                }\n                count = zoneCounts.get(zone);\n                if (count != null) {\n                    zoneCounts.put(zone, count + 1);\n                } else {\n                    zoneCounts.put(zone, 1);\n                }\n                List<Pair<String, String>> list = instancesByStatus.get(status);\n                if (list == null) {\n                    list = new ArrayList<>();\n                    instancesByStatus.put(status, list);\n                }\n                list.add(new Pair<>(id, url));\n            }\n            appData.put(\"amiCounts\", amiCounts.entrySet());\n            appData.put(\"zoneCounts\", zoneCounts.entrySet());\n            ArrayList<Map<String, Object>> instanceInfos = new ArrayList<>();\n            appData.put(\"instanceInfos\", instanceInfos);\n            for (Iterator<Map.Entry<InstanceInfo.InstanceStatus, List<Pair<String, String>>>> iter = instancesByStatus.entrySet().iterator(); iter.hasNext(); ) {\n                Map.Entry<InstanceInfo.InstanceStatus, List<Pair<String, String>>> entry = iter.next();\n                List<Pair<String, String>> value = entry.getValue();\n                InstanceInfo.InstanceStatus status = entry.getKey();\n                LinkedHashMap<String, Object> instanceData = new LinkedHashMap<>();\n                instanceInfos.add(instanceData);\n                instanceData.put(\"status\", entry.getKey());\n                ArrayList<Map<String, Object>> instances = new ArrayList<>();\n                instanceData.put(\"instances\", instances);\n                instanceData.put(\"isNotUp\", status != InstanceInfo.InstanceStatus.UP);\n                for (Pair<String, String> p : value) {\n                    LinkedHashMap<String, Object> instance = new LinkedHashMap<>();\n                    instances.add(instance);\n                    instance.put(\"id\", p.first());\n                    String url = p.second();\n                    instance.put(\"url\", url);\n                    boolean isHref = url != null && url.startsWith(\"http\");\n                    instance.put(\"isHref\", isHref);\n                }\n            }\n        }\n        return ResponseEntity.ok(registeredApps);\n    }\n\n    /**\n     * Last 1000 cancelled leases, Last 1000 newly registered leases\n     */\n    @GetMapping(\"/lastn_leases\")\n    public ResponseEntity<?> lastn() {\n        Map<String, Object> lastN = Maps.newHashMap();\n        PeerAwareInstanceRegistryImpl registry = (PeerAwareInstanceRegistryImpl) getRegistry();\n        ArrayList<Map<String, Object>> lastNCanceled = new ArrayList<>();\n        List<Pair<Long, String>> list = registry.getLastNCanceledInstances();\n        for (Pair<Long, String> entry : list) {\n            lastNCanceled.add(registeredInstance(entry.second(), entry.first()));\n        }\n        lastN.put(\"lastNCanceled\", lastNCanceled);\n        list = registry.getLastNRegisteredInstances();\n        ArrayList<Map<String, Object>> lastNRegistered = new ArrayList<>();\n        for (Pair<Long, String> entry : list) {\n            lastNRegistered.add(registeredInstance(entry.second(), entry.first()));\n        }\n        lastN.put(\"lastNRegistered\", lastNRegistered);\n        return ResponseEntity.ok(lastN);\n    }\n\n    private Map<String, String> getGeneralInfo(StatusInfo statusInfo) {\n        Map<String, String> generalInfoMap = Maps.newHashMap(statusInfo.getGeneralStats());\n        generalInfoMap.putAll(statusInfo.getApplicationStats());\n        if (generalInfoMap.get(\"registered-replicas\").contains(\"@\")) {\n            generalInfoMap.put(\"registered-replicas\", scrubBasicAuth(generalInfoMap.get(\"registered-replicas\")));\n        }\n        if (generalInfoMap.get(\"unavailable-replicas\").contains(\"@\")) {\n            generalInfoMap.put(\"unavailable-replicas\", scrubBasicAuth(generalInfoMap.get(\"unavailable-replicas\")));\n        }\n        if (generalInfoMap.get(\"available-replicas\").contains(\"@\")) {\n            generalInfoMap.put(\"available-replicas\", scrubBasicAuth(generalInfoMap.get(\"available-replicas\")));\n        }\n        return generalInfoMap;\n    }\n\n    private Map<String, String> getInstanceInfo(StatusInfo statusInfo) {\n        InstanceInfo instanceInfo = statusInfo.getInstanceInfo();\n        Map<String, String> instanceMap = new HashMap<>();\n        instanceMap.put(\"ipAddr\", instanceInfo.getIPAddr());\n        instanceMap.put(\"status\", instanceInfo.getStatus().toString());\n        if (instanceInfo.getDataCenterInfo().getName() == DataCenterInfo.Name.Amazon) {\n            AmazonInfo info = (AmazonInfo) instanceInfo.getDataCenterInfo();\n            instanceMap.put(\"availability-zone\",info.get(AmazonInfo.MetaDataKey.availabilityZone));\n            instanceMap.put(\"public-ipv4\", info.get(AmazonInfo.MetaDataKey.publicIpv4));\n            instanceMap.put(\"instance-id\", info.get(AmazonInfo.MetaDataKey.instanceId));\n            instanceMap.put(\"public-hostname\",info.get(AmazonInfo.MetaDataKey.publicHostname));\n            instanceMap.put(\"ami-id\", info.get(AmazonInfo.MetaDataKey.amiId));\n            instanceMap.put(\"instance-type\",info.get(AmazonInfo.MetaDataKey.instanceType));\n        }\n        return instanceMap;\n    }\n\n    private Map<String, Object> registeredInstance(String lease, long date) {\n        Map<String, Object> map = Maps.newHashMap();\n        map.put(\"timestamp\", new Date(date));\n        map.put(\"lease\", lease);\n        return map;\n    }\n\n    private PeerAwareInstanceRegistry getRegistry() {\n        return getServerContext().getRegistry();\n    }\n\n    private EurekaServerContext getServerContext() {\n        return EurekaServerContextHolder.getInstance().getServerContext();\n    }\n\n    private String scrubBasicAuth(String urlList) {\n        String[] urls = urlList.split(\",\");\n        StringBuilder filteredUrls = new StringBuilder();\n        for (String u : urls) {\n            if (u.contains(\"@\")) {\n                filteredUrls.append(u.substring(0, u.indexOf(\"//\") + 2)).append(u.substring(u.indexOf(\"@\") + 1, u.length())).append(\",\");\n            } else {\n                filteredUrls.append(u).append(\",\");\n            }\n        }\n        return filteredUrls.substring(0, filteredUrls.length() - 1);\n    }\n}\n```\n\n#### 3. Preview\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006350771-5151df4b-c05d-400c-af2b-c7e8a80aa500.png#align=left&display=inline&height=433&linkTarget=_blank&originHeight=1950&originWidth=3358&size=0&width=746)\n\n#### 4. TODO List\n\n1. 鉴权；\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-05-26 14:42:36</p><p>tags: [&quot;SpringBoot&quot;,&quot;SpringCloud&quot;,&quot;Eureka&quot;,&quot;RESTful&quot;]</p><hr /><p><br /></p><p>一般来说，Eureka 默认提供了一套 UI 界面，但在大多数情况下，由于 UI 风格问题并不适合直接嵌入到业务系统中使用；<br />\n本文通过扩展 Eureka 项目，实现相关的自定义接口，以便业务系统集成调用；</p><p><br /></p><h4 id=\"a7de3d50\">1. Eureka Project;</h4><p><br /></p><pre data-lang=\"xml\"><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre><p><br /></p><pre data-lang=\"java\"><code>@EnableEurekaServer\n@SpringBootApplication(scanBasePackages = &quot;com.fastjee&quot;)\npublic class FastjeeEurekaApplication {\n\n    public static void main(String[] args) {\n        FastjeeApplication.run(FastjeeEurekaApplication.class, args);\n    }\n}</code></pre><h4 id=\"687e50a4\">2. RESTful API</h4><p><br /></p><pre data-lang=\"java\"><code>package com.fastjee.eureka.rest;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n\nimport com.netflix.appinfo.AmazonInfo;\nimport com.netflix.appinfo.ApplicationInfoManager;\nimport com.netflix.appinfo.DataCenterInfo;\nimport com.netflix.appinfo.InstanceInfo;\nimport com.netflix.config.ConfigurationManager;\nimport com.netflix.config.DeploymentContext;\nimport com.netflix.discovery.shared.Application;\nimport com.netflix.discovery.shared.Pair;\nimport com.netflix.eureka.EurekaServerContext;\nimport com.netflix.eureka.EurekaServerContextHolder;\nimport com.netflix.eureka.cluster.PeerEurekaNode;\nimport com.netflix.eureka.registry.PeerAwareInstanceRegistry;\nimport com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl;\nimport com.netflix.eureka.resources.StatusResource;\nimport com.netflix.eureka.util.StatusInfo;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.annotation.Resource;\n\nimport cn.hutool.core.util.ReflectUtil;\n\n/**\n * Eureka RestAPI.\n */\n@RestController\n@RequestMapping(&quot;/eureka_rest_api&quot;)\npublic class EurekaRestApi {\n\n    @Resource\n    private ApplicationInfoManager applicationInfoManager;\n\n    /**\n     * Simple System Status, DS Replicas\n     */\n    @GetMapping(&quot;/system_status&quot;)\n    public ResponseEntity&lt;?&gt; systemStatus() {\n        Map&lt;String, Object&gt; model = Maps.newHashMap();\n        DeploymentContext deploymentContext = ConfigurationManager.getDeploymentContext();\n        model.put(&quot;currentTime&quot;, new Date());\n        model.put(&quot;upTime&quot;, StatusInfo.getUpTime());\n        model.put(&quot;applicationId&quot;, deploymentContext.getApplicationId());\n        model.put(&quot;environment&quot;, deploymentContext.getDeploymentEnvironment());\n        model.put(&quot;datacenter&quot;, deploymentContext.getDeploymentDatacenter());\n        PeerAwareInstanceRegistry registry = getRegistry();\n        // model.put(&quot;registry&quot;, registry);\n        model.put(&quot;leaseExpirationEnabled&quot;, registry.isLeaseExpirationEnabled());\n        model.put(&quot;renewsPerMinThreshold&quot;, registry.getNumOfRenewsPerMinThreshold());\n        model.put(&quot;renewsInLastMin&quot;, registry.getNumOfRenewsInLastMin());\n        // model.put(&quot;isBelowRenewThresold&quot;, registry.isBelowRenewThresold() == 1);\n        String warningMessage = &quot;&quot;;\n        if (registry.isBelowRenewThresold() == 1) {\n            if (!registry.isSelfPreservationModeEnabled()) {\n                warningMessage = &quot;注意: 续订量低于阈值, 自我保护模式被改变。&quot;;\n            } else {\n                warningMessage = &quot;注意: 已经进入自我保护模式, 该模式下将不会注销任何微服务(即使服务已经失效)。&quot;;\n            }\n        } else if (!registry.isSelfPreservationModeEnabled()) {\n            warningMessage = &quot;注意: 自我保护模式已关闭。&quot;;\n        }\n        model.put(&quot;warningMessage&quot;, warningMessage);\n        DataCenterInfo info = applicationInfoManager.getInfo().getDataCenterInfo();\n        if (info.getName() == DataCenterInfo.Name.Amazon) {\n            AmazonInfo amazonInfo = (AmazonInfo) info;\n            model.put(&quot;amazonInfo&quot;, amazonInfo);\n            model.put(&quot;amiId&quot;, amazonInfo.get(AmazonInfo.MetaDataKey.amiId));\n            model.put(&quot;availabilityZone&quot;, amazonInfo.get(AmazonInfo.MetaDataKey.availabilityZone));\n            model.put(&quot;instanceId&quot;, amazonInfo.get(AmazonInfo.MetaDataKey.instanceId));\n        }\n        Map&lt;String, String&gt; replicas = Maps.newHashMap();\n        List&lt;PeerEurekaNode&gt; list = getServerContext().getPeerEurekaNodes().getPeerNodesView();\n        for (PeerEurekaNode node : list) {\n            try {\n                URI uri = new URI(node.getServiceUrl());\n                String href = scrubBasicAuth(node.getServiceUrl());\n                replicas.put(uri.getHost(), href);\n            } catch (Exception ex) {\n                // ignore?\n            }\n        }\n        model.put(&quot;replicas&quot;, replicas.entrySet());\n        return ResponseEntity.ok(model);\n    }\n\n    /**\n     * General Info, Instance Info\n     */\n    @GetMapping(&quot;/info&quot;)\n    public ResponseEntity&lt;?&gt; info() {\n        Map&lt;String, Object&gt; model = Maps.newHashMap();\n        StatusInfo statusInfo = null;\n        try {\n            statusInfo = new StatusResource().getStatusInfo();\n            statusInfo.isHealthy(); // throw NullPointerException\n        } catch (Exception e) {\n            if (e instanceof NullPointerException) {\n                ReflectUtil.setFieldValue(statusInfo, &quot;isHeathly&quot;, true);\n            } else {\n                statusInfo = StatusInfo.Builder.newBuilder().isHealthy(false).build();\n            }\n        }\n        // Instance Info\n        model.put(&quot;instanceInfo&quot;, getInstanceInfo(statusInfo));\n\n        // General Info\n        model.put(&quot;generalInfo&quot;, getGeneralInfo(statusInfo));\n        return ResponseEntity.ok(model);\n    }\n\n    /**\n     * Instances currently registered with Eureka\n     */\n    @GetMapping(&quot;/registered_apps&quot;)\n    public ResponseEntity&lt;?&gt; registeredApps() {\n        List&lt;Map&lt;String, Object&gt;&gt; registeredApps = Lists.newArrayList();\n        List&lt;Application&gt; sortedApplications = getRegistry().getSortedApplications();\n        for (Application app : sortedApplications) {\n            LinkedHashMap&lt;String, Object&gt; appData = new LinkedHashMap&lt;&gt;();\n            registeredApps.add(appData);\n            appData.put(&quot;name&quot;, app.getName());\n            Map&lt;String, Integer&gt; amiCounts = new HashMap&lt;&gt;();\n            Map&lt;InstanceInfo.InstanceStatus, List&lt;Pair&lt;String, String&gt;&gt;&gt; instancesByStatus = new HashMap&lt;&gt;();\n            Map&lt;String, Integer&gt; zoneCounts = new HashMap&lt;&gt;();\n            for (InstanceInfo info : app.getInstances()) {\n                String id = info.getId();\n                String url = info.getStatusPageUrl();\n                InstanceInfo.InstanceStatus status = info.getStatus();\n                String ami = &quot;n/a&quot;;\n                String zone = &quot;&quot;;\n                if (info.getDataCenterInfo().getName() == DataCenterInfo.Name.Amazon) {\n                    AmazonInfo dcInfo = (AmazonInfo) info.getDataCenterInfo();\n                    ami = dcInfo.get(AmazonInfo.MetaDataKey.amiId);\n                    zone = dcInfo.get(AmazonInfo.MetaDataKey.availabilityZone);\n                }\n                Integer count = amiCounts.get(ami);\n                if (count != null) {\n                    amiCounts.put(ami, count + 1);\n                } else {\n                    amiCounts.put(ami, 1);\n                }\n                count = zoneCounts.get(zone);\n                if (count != null) {\n                    zoneCounts.put(zone, count + 1);\n                } else {\n                    zoneCounts.put(zone, 1);\n                }\n                List&lt;Pair&lt;String, String&gt;&gt; list = instancesByStatus.get(status);\n                if (list == null) {\n                    list = new ArrayList&lt;&gt;();\n                    instancesByStatus.put(status, list);\n                }\n                list.add(new Pair&lt;&gt;(id, url));\n            }\n            appData.put(&quot;amiCounts&quot;, amiCounts.entrySet());\n            appData.put(&quot;zoneCounts&quot;, zoneCounts.entrySet());\n            ArrayList&lt;Map&lt;String, Object&gt;&gt; instanceInfos = new ArrayList&lt;&gt;();\n            appData.put(&quot;instanceInfos&quot;, instanceInfos);\n            for (Iterator&lt;Map.Entry&lt;InstanceInfo.InstanceStatus, List&lt;Pair&lt;String, String&gt;&gt;&gt;&gt; iter = instancesByStatus.entrySet().iterator(); iter.hasNext(); ) {\n                Map.Entry&lt;InstanceInfo.InstanceStatus, List&lt;Pair&lt;String, String&gt;&gt;&gt; entry = iter.next();\n                List&lt;Pair&lt;String, String&gt;&gt; value = entry.getValue();\n                InstanceInfo.InstanceStatus status = entry.getKey();\n                LinkedHashMap&lt;String, Object&gt; instanceData = new LinkedHashMap&lt;&gt;();\n                instanceInfos.add(instanceData);\n                instanceData.put(&quot;status&quot;, entry.getKey());\n                ArrayList&lt;Map&lt;String, Object&gt;&gt; instances = new ArrayList&lt;&gt;();\n                instanceData.put(&quot;instances&quot;, instances);\n                instanceData.put(&quot;isNotUp&quot;, status != InstanceInfo.InstanceStatus.UP);\n                for (Pair&lt;String, String&gt; p : value) {\n                    LinkedHashMap&lt;String, Object&gt; instance = new LinkedHashMap&lt;&gt;();\n                    instances.add(instance);\n                    instance.put(&quot;id&quot;, p.first());\n                    String url = p.second();\n                    instance.put(&quot;url&quot;, url);\n                    boolean isHref = url != null &amp;&amp; url.startsWith(&quot;http&quot;);\n                    instance.put(&quot;isHref&quot;, isHref);\n                }\n            }\n        }\n        return ResponseEntity.ok(registeredApps);\n    }\n\n    /**\n     * Last 1000 cancelled leases, Last 1000 newly registered leases\n     */\n    @GetMapping(&quot;/lastn_leases&quot;)\n    public ResponseEntity&lt;?&gt; lastn() {\n        Map&lt;String, Object&gt; lastN = Maps.newHashMap();\n        PeerAwareInstanceRegistryImpl registry = (PeerAwareInstanceRegistryImpl) getRegistry();\n        ArrayList&lt;Map&lt;String, Object&gt;&gt; lastNCanceled = new ArrayList&lt;&gt;();\n        List&lt;Pair&lt;Long, String&gt;&gt; list = registry.getLastNCanceledInstances();\n        for (Pair&lt;Long, String&gt; entry : list) {\n            lastNCanceled.add(registeredInstance(entry.second(), entry.first()));\n        }\n        lastN.put(&quot;lastNCanceled&quot;, lastNCanceled);\n        list = registry.getLastNRegisteredInstances();\n        ArrayList&lt;Map&lt;String, Object&gt;&gt; lastNRegistered = new ArrayList&lt;&gt;();\n        for (Pair&lt;Long, String&gt; entry : list) {\n            lastNRegistered.add(registeredInstance(entry.second(), entry.first()));\n        }\n        lastN.put(&quot;lastNRegistered&quot;, lastNRegistered);\n        return ResponseEntity.ok(lastN);\n    }\n\n    private Map&lt;String, String&gt; getGeneralInfo(StatusInfo statusInfo) {\n        Map&lt;String, String&gt; generalInfoMap = Maps.newHashMap(statusInfo.getGeneralStats());\n        generalInfoMap.putAll(statusInfo.getApplicationStats());\n        if (generalInfoMap.get(&quot;registered-replicas&quot;).contains(&quot;@&quot;)) {\n            generalInfoMap.put(&quot;registered-replicas&quot;, scrubBasicAuth(generalInfoMap.get(&quot;registered-replicas&quot;)));\n        }\n        if (generalInfoMap.get(&quot;unavailable-replicas&quot;).contains(&quot;@&quot;)) {\n            generalInfoMap.put(&quot;unavailable-replicas&quot;, scrubBasicAuth(generalInfoMap.get(&quot;unavailable-replicas&quot;)));\n        }\n        if (generalInfoMap.get(&quot;available-replicas&quot;).contains(&quot;@&quot;)) {\n            generalInfoMap.put(&quot;available-replicas&quot;, scrubBasicAuth(generalInfoMap.get(&quot;available-replicas&quot;)));\n        }\n        return generalInfoMap;\n    }\n\n    private Map&lt;String, String&gt; getInstanceInfo(StatusInfo statusInfo) {\n        InstanceInfo instanceInfo = statusInfo.getInstanceInfo();\n        Map&lt;String, String&gt; instanceMap = new HashMap&lt;&gt;();\n        instanceMap.put(&quot;ipAddr&quot;, instanceInfo.getIPAddr());\n        instanceMap.put(&quot;status&quot;, instanceInfo.getStatus().toString());\n        if (instanceInfo.getDataCenterInfo().getName() == DataCenterInfo.Name.Amazon) {\n            AmazonInfo info = (AmazonInfo) instanceInfo.getDataCenterInfo();\n            instanceMap.put(&quot;availability-zone&quot;,info.get(AmazonInfo.MetaDataKey.availabilityZone));\n            instanceMap.put(&quot;public-ipv4&quot;, info.get(AmazonInfo.MetaDataKey.publicIpv4));\n            instanceMap.put(&quot;instance-id&quot;, info.get(AmazonInfo.MetaDataKey.instanceId));\n            instanceMap.put(&quot;public-hostname&quot;,info.get(AmazonInfo.MetaDataKey.publicHostname));\n            instanceMap.put(&quot;ami-id&quot;, info.get(AmazonInfo.MetaDataKey.amiId));\n            instanceMap.put(&quot;instance-type&quot;,info.get(AmazonInfo.MetaDataKey.instanceType));\n        }\n        return instanceMap;\n    }\n\n    private Map&lt;String, Object&gt; registeredInstance(String lease, long date) {\n        Map&lt;String, Object&gt; map = Maps.newHashMap();\n        map.put(&quot;timestamp&quot;, new Date(date));\n        map.put(&quot;lease&quot;, lease);\n        return map;\n    }\n\n    private PeerAwareInstanceRegistry getRegistry() {\n        return getServerContext().getRegistry();\n    }\n\n    private EurekaServerContext getServerContext() {\n        return EurekaServerContextHolder.getInstance().getServerContext();\n    }\n\n    private String scrubBasicAuth(String urlList) {\n        String[] urls = urlList.split(&quot;,&quot;);\n        StringBuilder filteredUrls = new StringBuilder();\n        for (String u : urls) {\n            if (u.contains(&quot;@&quot;)) {\n                filteredUrls.append(u.substring(0, u.indexOf(&quot;//&quot;) + 2)).append(u.substring(u.indexOf(&quot;@&quot;) + 1, u.length())).append(&quot;,&quot;);\n            } else {\n                filteredUrls.append(u).append(&quot;,&quot;);\n            }\n        }\n        return filteredUrls.substring(0, filteredUrls.length() - 1);\n    }\n}</code></pre><p><br /></p><h4 id=\"28026dd6\">3. Preview</h4><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006350771-5151df4b-c05d-400c-af2b-c7e8a80aa500.png#align=left&amp;display=inline&amp;height=433&amp;linkTarget=_blank&amp;originHeight=1950&amp;originWidth=3358&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h4 id=\"d720553b\">4. TODO List</h4><p><br /></p><ol start=\"1\"><li>鉴权；</li></ol><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:32:34.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:31:34.000Z",
    "updated_at": "2019-02-01T07:32:34.000Z",
    "published_at": "2019-02-01T07:32:34.000Z",
    "first_published_at": "2019-02-01T07:32:34.000Z",
    "word_count": 1635,
    "cover": "",
    "description": "date: 2018-05-26 14:42:36tags: [&quot;SpringBoot&quot;,&quot;SpringCloud&quot;,&quot;Eureka&quot;,&quot;RESTful&quot;]一般来说，Eureka 默认提供了一套 UI 界面，但在大...",
    "custom_description": "一般来说，Eureka 默认提供了一套 UI 界面，但在大多数情况下，由于 UI 风格问题并不适合直接嵌入到业务系统中使用；\n本文通过扩展 Eureka 项目，实现相关的自定义接口，以便业务系统集成调用；",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224413,
    "slug": "springcloud-consul",
    "title": "使用Consul代替Spring Cloud Eureka",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-07-06 14:54:32<br />tags: [\"SpringBoot\",\"SpringCloud\",\"Consul\"]\n---\n\n随着Eureka 2.0 开源工作宣告停止，其实是可以考虑转战其他方式来实现注册中心了（如：Zookeeper、Redis、Consul等）<br />\n本文通过简单的描述，快速将Consul集成到SpringCloud环境中。\n#### Consul环境搭建\n\n> 官网：[https://www.consul.io/](https://www.consul.io/)\n\n\n官网提供了（macOS、FreeBSD、Linux、Solaris、Windows）全平台的相关包，下面以Windows为例：\n\n1. 下载 [https://releases.hashicorp.com/consul/1.2.0/consul_1.2.0_windows_amd64.zip](https://releases.hashicorp.com/consul/1.2.0/consul_1.2.0_windows_amd64.zip)\n1. 解压，并创建快速启动脚本：\n\n```bat\nconsul agent -dev\npause\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006276234-70c5a5dd-c547-4ace-b2a7-74eb2c089c64.png#align=left&display=inline&height=136&linkTarget=_blank&originHeight=136&originWidth=701&size=0&width=701)\n\n1. 启动，然后浏览器访问：[http://localhost:8500](http://localhost:8500), 出现UI界面则搭建成功。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006277687-a068b83f-208e-4f86-9481-1484f280ed2d.png#align=left&display=inline&height=411&linkTarget=_blank&originHeight=735&originWidth=1333&size=0&width=746)\n\n#### 将服务注册到Consul\n\n##### pom.xml\n\n> 这里列举了集成Consul的核心依赖\n\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency><!--健康检查相关依赖,后面会用到-->\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-consul-discovery</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n#### bootstrap.yml\n\n```yml\nserver:\n  port: 8762\nspring:\n  application:\n    name: angercloud-consul\n  cloud:\n    consul:\n      host: localhost\n      port: 8500\n    discovery:\n      client:\n        healthCheckInterval: 15s\n        instance-id: angercloud-consul\n        # 健康检查URI.由spring-boot-starter-actuator提供。\n        healthCheckPath: ${management.contextPath}/actuator/health\n```\n\n### 启动测试\n\n> 通过注解 @EnableDiscoveryClient 标识该服务为发现客户端，然后根据配置文件注册中Consul\n\n\n```java\npackage com.angercloud.registry.consul;\n\nimport com.angercloud.support.core.consts.AngerCloudPackages;\nimport com.angercloud.support.core.web.JSONEntity;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author wwz\n * @version 1 (2018/7/6)\n * @since Java7\n */\n@RestController\n@EnableDiscoveryClient\n@SpringBootApplication(scanBasePackages = {\n        AngerCloudPackages.SUPPORT_CORE, AngerCloudPackages.REGISTRY_CONSUL\n})\npublic class AngerCloudConsulApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AngerCloudConsulApplication.class, args);\n    }\n\n    @GetMapping(\"/sayHello\")\n    public JSONEntity<?> sayHello() {\n        return JSONEntity.ok(\"Hello, AngerCloudConsulApplication\");\n    }\n}\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006276287-fdaf7cb1-5d0a-47ec-9ea1-b75ce1a9e3f4.png#align=left&display=inline&height=189&linkTarget=_blank&originHeight=211&originWidth=835&size=0&width=746)<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006277077-89d787a7-dc31-4264-a963-3872db1cd7c3.png#align=left&display=inline&height=237&linkTarget=_blank&originHeight=364&originWidth=1145&size=0&width=746)<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006277315-7d45a1b2-7e43-42a8-b4a0-6d05ffce5e3b.png#align=left&display=inline&height=339&linkTarget=_blank&originHeight=529&originWidth=1163&size=0&width=746)\n\n有关更多细节，后面使用的时候再详细研究（或自己实现redis注册中心）\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-07-06 14:54:32</p><p>tags: [&quot;SpringBoot&quot;,&quot;SpringCloud&quot;,&quot;Consul&quot;]</p><hr /><p><br /></p><p>随着Eureka 2.0 开源工作宣告停止，其实是可以考虑转战其他方式来实现注册中心了（如：Zookeeper、Redis、Consul等）<br />\n本文通过简单的描述，快速将Consul集成到SpringCloud环境中。</p><h4 id=\"c1ddc3af\">Consul环境搭建</h4><p><br /></p><blockquote><p>官网：<a href=\"https://www.consul.io/\" target=\"_blank\">https://www.consul.io/</a></p></blockquote><p><br /></p><p>官网提供了（macOS、FreeBSD、Linux、Solaris、Windows）全平台的相关包，下面以Windows为例：</p><p><br /></p><ol start=\"1\"><li>下载 <a href=\"https://releases.hashicorp.com/consul/1.2.0/consul_1.2.0_windows_amd64.zip\" target=\"_blank\">https://releases.hashicorp.com/consul/1.2.0/consul_1.2.0_windows_amd64.zip</a></li></ol><ol start=\"2\"><li>解压，并创建快速启动脚本：</li></ol><p><br /></p><pre data-lang=\"bat\"><code>consul agent -dev\npause</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006276234-70c5a5dd-c547-4ace-b2a7-74eb2c089c64.png#align=left&amp;display=inline&amp;height=136&amp;linkTarget=_blank&amp;originHeight=136&amp;originWidth=701&amp;size=0&amp;width=701\" style=\"max-width: 600px; width: 701px;\" /></p><p><br /></p><ol start=\"3\"><li>启动，然后浏览器访问：<a href=\"http://localhost:8500\" target=\"_blank\">http://localhost:8500</a>, 出现UI界面则搭建成功。</li></ol><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006277687-a068b83f-208e-4f86-9481-1484f280ed2d.png#align=left&amp;display=inline&amp;height=411&amp;linkTarget=_blank&amp;originHeight=735&amp;originWidth=1333&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h4 id=\"30813f7c\">将服务注册到Consul</h4><p><br /></p><h5 id=\"pom.xml\">pom.xml</h5><p><br /></p><blockquote><p>这里列举了集成Consul的核心依赖</p></blockquote><p><br /></p><pre data-lang=\"xml\"><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n&lt;/dependency&gt;&lt;!--健康检查相关依赖,后面会用到--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre><p><br /></p><h4 id=\"bootstrap.yml\">bootstrap.yml</h4><p><br /></p><pre data-lang=\"yml\"><code>server:\n  port: 8762\nspring:\n  application:\n    name: angercloud-consul\n  cloud:\n    consul:\n      host: localhost\n      port: 8500\n    discovery:\n      client:\n        healthCheckInterval: 15s\n        instance-id: angercloud-consul\n        # 健康检查URI.由spring-boot-starter-actuator提供。\n        healthCheckPath: ${management.contextPath}/actuator/health</code></pre><p><br /></p><h3 id=\"9c817a02\">启动测试</h3><p><br /></p><blockquote><p>通过注解 @EnableDiscoveryClient 标识该服务为发现客户端，然后根据配置文件注册中Consul</p></blockquote><p><br /></p><pre data-lang=\"java\"><code>package com.angercloud.registry.consul;\n\nimport com.angercloud.support.core.consts.AngerCloudPackages;\nimport com.angercloud.support.core.web.JSONEntity;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author wwz\n * @version 1 (2018/7/6)\n * @since Java7\n */\n@RestController\n@EnableDiscoveryClient\n@SpringBootApplication(scanBasePackages = {\n        AngerCloudPackages.SUPPORT_CORE, AngerCloudPackages.REGISTRY_CONSUL\n})\npublic class AngerCloudConsulApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AngerCloudConsulApplication.class, args);\n    }\n\n    @GetMapping(&quot;/sayHello&quot;)\n    public JSONEntity&lt;?&gt; sayHello() {\n        return JSONEntity.ok(&quot;Hello, AngerCloudConsulApplication&quot;);\n    }\n}</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006276287-fdaf7cb1-5d0a-47ec-9ea1-b75ce1a9e3f4.png#align=left&amp;display=inline&amp;height=189&amp;linkTarget=_blank&amp;originHeight=211&amp;originWidth=835&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006277077-89d787a7-dc31-4264-a963-3872db1cd7c3.png#align=left&amp;display=inline&amp;height=237&amp;linkTarget=_blank&amp;originHeight=364&amp;originWidth=1145&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006277315-7d45a1b2-7e43-42a8-b4a0-6d05ffce5e3b.png#align=left&amp;display=inline&amp;height=339&amp;linkTarget=_blank&amp;originHeight=529&amp;originWidth=1163&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>有关更多细节，后面使用的时候再详细研究（或自己实现redis注册中心）</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:31:21.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:30:15.000Z",
    "updated_at": "2019-02-01T07:31:21.000Z",
    "published_at": "2019-02-01T07:31:21.000Z",
    "first_published_at": "2019-02-01T07:31:21.000Z",
    "word_count": 480,
    "cover": "",
    "description": "date: 2018-07-06 14:54:32tags: [&quot;SpringBoot&quot;,&quot;SpringCloud&quot;,&quot;Consul&quot;]随着Eureka 2.0 开源工作宣告停止，其实是可以考虑转战其他方式来实现注册中心了（如：Zoo...",
    "custom_description": "随着Eureka 2.0 开源工作宣告停止，其实是可以考虑转战其他方式来实现注册中心了（如：Zookeeper、Redis、Consul等）\n本文通过简单的描述，快速将Consul集成到SpringCloud环境中。",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224411,
    "slug": "springcloud-config-ha",
    "title": "Spring Cloud Config 高可用架构",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-03-31 14:34:29<br />tags: [\"SpringBoot\",\"SpringCloud\"]\n---\n\n## 何为高可用?\n\n高可用HA（**_High Availability_**）是分布式系统架构设计中必须考虑的因素之一,它通常是指,通过设计减少系统不能提供服务的时间.\n\n1) 假设系统一直能够提供服务,我们说系统的可用性是100%.\n\n2) 如果系统每运行100个时间单位,会有1个时间单位无法提供服务,我们说系统的可用性是99%.\n\n举个例子,百度的搜索首页是业界公认的高可用保障非常出色的系统<br />\n我们通常会通过ping baidu.com来判断网络是否通畅,这也恰巧说明了百度首页的可用性非常之高,值得信赖.\n## 高可用的实现方式\n\n1. **_主从复制:_** 主服务挂掉后,从服务升级为主服务继续工作.\n1. **_双机热备:_** 一台工作,一台备用,工作服务器挂掉后,备用服务器继续工作.\n1. **_分布式集群:_** 多台实例同时工作,当其中一台挂掉后,前端或者代理踢出这台服务器,负载均衡算法将不再调度它.\n\n## Config Server高可用的实现\n\nConfig Server 的高可用方案,是借助Eureka(注册中心)实现的,也就是上面提到的**_分布式集群_**方案.<br />\n多个Config Server同时工作,任何一台挂掉后,Eureka服务器都会通知客户端, 客户端后续将不再从这里请求配置信息.\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006198663-d77c7c2f-ddab-4203-9d40-5e4a82db5766.png#align=left&display=inline&height=339&linkTarget=_blank&originHeight=339&originWidth=599&size=0&width=599)\n\n## 1. 将Config Server注册到Eureka\n\n### pom.xml\n\n```xml\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-eureka</artifactId>\n</dependency>\n```\n\n### application.yml\n\n```yml\n# 将配置中心注册到eureka实现高可用\neureka:\n  instance:\n    hostname: fastjee-config.com\n    # 更改eureka更新频率, 关闭eureka的自我保护机制.\n    leaseRenewalIntervalInSeconds: 10 # 租期更新时间间隔(默认30秒)\n    leaseExpirationDurationInSeconds: 30 # 租期到期时间(默认90秒)\n  client:\n    serviceUrl:\n      defaultZone: https://fastjee:123456@fastjee-registration.com:5000/eureka/\n    healthcheck:\n      enabled: true # 开启健康检查（需要spring-boot-starter-actuator依赖）\n```\n\n> 这里更改了eureka的自我保护机制, 为了方便后面的测试, 即时剔除无效服务器.\n\n\n### ConfigApplication.java\n\n添加@EnableDiscoveryClient注解, 标识该服务为eureka客户端.\n\n```java\n@EnableConfigServer\n@EnableDiscoveryClient\n@SpringBootApplication(scanBasePackages = {\"com.fastjee.common.web\",\"com.fastjee.config\"})\npublic class ConfigApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ConfigApplication.class, args);\n    }\n}\n```\n\n> @EnableDiscoveryClient可以替换为@EnableEurekaClient,但后者使用场景比较单一,不兼容其它类型的注册中心.\n\n\n## 2. 测试\n\n在测试前, 建立测试用的Config Clinet项目;\n\n### 添加配置文件\n\n> 将配置文件fastjee-config-server-test-dev.yml push到由configServer指定的github仓库.\n\n\n```yml\nconfig-test:\n  sayHello: HelloWorld!\n```\n\n### 搭建测试客户端\n\npom.xml\n\n```xml\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-config</artifactId>\n</dependency>\n```\n\nbootstrap.yml\n\n```yml\nspring:\n  profiles:\n    active: dev\n  application:\n    name: fastjee-config-server-test\n  # 从配置中心拉取配置, 其他配置文件都在git仓库上\n  cloud:\n    config:\n      fail-fast: true\n      discovery:\n        service-id: fastjee-config\n        enabled: true\n      label: master\n      profile: ${spring.profiles.active}\n      name: ${spring.application.name}\n\n# 注册到注册中心\neureka:\n  instance:\n    hostname: fastjee-config-server-test.com\n  client:\n    serviceUrl:\n      defaultZone: https://fastjee:123456@fastjee-registration.com:5000/eureka/\n```\n\n测试RESTFul接口.\n\n```java\n@Value(\"${config-test.sayHello}\")\nprivate String sayHello;\n\n@GetMapping(\"/sayHello\")\npublic @ResponseBody ResponseEntity<String> sayHello() {\n\n\treturn ResponseEntity.ok(sayHello);\n}\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006198622-59e61456-c3e8-4b21-92c3-7e0e9efc95e9.png#align=left&display=inline&height=533&linkTarget=_blank&originHeight=886&originWidth=1240&size=0&width=746)\n\n### 开始测试\n\n#### 启动相关服务:\n\n1. Eureka Server\n1. Config Server (同时启动两个 => port: 5001, port: 5009)\n1. 测试客户端\n\n启动后的效果图如下:<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006198626-7f299d19-b194-4322-9b3a-76c7f508f066.png#align=left&display=inline&height=192&linkTarget=_blank&originHeight=319&originWidth=1240&size=0&width=746)\n\n#### 测试步骤:\n\n1. 当configServer:5001,configServer:5009同时正常工作时,测试客户端可以启动并拉取配置.\n1. 多次启动测试客户端,观察拉取配置的服务器是否在5001/5009之间负载均衡.\n1. 将configServer:5009实例下线, 测试客户端依然可以正常启动,且接口访问正常.\n1. 将configServer全部下线, 测试客户端启动失败.\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-03-31 14:34:29</p><p>tags: [&quot;SpringBoot&quot;,&quot;SpringCloud&quot;]</p><hr /><p><br /></p><h2 id=\"478e8e57\">何为高可用?</h2><p><br /></p><p>高可用HA（<strong><em>High Availability</em></strong>）是分布式系统架构设计中必须考虑的因素之一,它通常是指,通过设计减少系统不能提供服务的时间.</p><p><br /></p><p>1) 假设系统一直能够提供服务,我们说系统的可用性是100%.</p><p><br /></p><p>2) 如果系统每运行100个时间单位,会有1个时间单位无法提供服务,我们说系统的可用性是99%.</p><p><br /></p><p>举个例子,百度的搜索首页是业界公认的高可用保障非常出色的系统<br />\n我们通常会通过ping baidu.com来判断网络是否通畅,这也恰巧说明了百度首页的可用性非常之高,值得信赖.</p><h2 id=\"a7f7dedb\">高可用的实现方式</h2><p><br /></p><ol start=\"1\"><li><strong><em>主从复制:</em></strong> 主服务挂掉后,从服务升级为主服务继续工作.</li></ol><ol start=\"2\"><li><strong><em>双机热备:</em></strong> 一台工作,一台备用,工作服务器挂掉后,备用服务器继续工作.</li></ol><ol start=\"3\"><li><strong><em>分布式集群:</em></strong> 多台实例同时工作,当其中一台挂掉后,前端或者代理踢出这台服务器,负载均衡算法将不再调度它.</li></ol><p><br /></p><h2 id=\"f7a4db71\">Config Server高可用的实现</h2><p><br /></p><p>Config Server 的高可用方案,是借助Eureka(注册中心)实现的,也就是上面提到的<strong><em>分布式集群</em></strong>方案.<br />\n多个Config Server同时工作,任何一台挂掉后,Eureka服务器都会通知客户端, 客户端后续将不再从这里请求配置信息.</p><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006198663-d77c7c2f-ddab-4203-9d40-5e4a82db5766.png#align=left&amp;display=inline&amp;height=339&amp;linkTarget=_blank&amp;originHeight=339&amp;originWidth=599&amp;size=0&amp;width=599\" style=\"max-width: 600px; width: 599px;\" /></p><p><br /></p><h2 id=\"813ae038\">1. 将Config Server注册到Eureka</h2><p><br /></p><h3 id=\"pom.xml\">pom.xml</h3><p><br /></p><pre data-lang=\"xml\"><code>&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n\t&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre><p><br /></p><h3 id=\"application.yml\">application.yml</h3><p><br /></p><pre data-lang=\"yml\"><code># 将配置中心注册到eureka实现高可用\neureka:\n  instance:\n    hostname: fastjee-config.com\n    # 更改eureka更新频率, 关闭eureka的自我保护机制.\n    leaseRenewalIntervalInSeconds: 10 # 租期更新时间间隔(默认30秒)\n    leaseExpirationDurationInSeconds: 30 # 租期到期时间(默认90秒)\n  client:\n    serviceUrl:\n      defaultZone: https://fastjee:123456@fastjee-registration.com:5000/eureka/\n    healthcheck:\n      enabled: true # 开启健康检查（需要spring-boot-starter-actuator依赖）</code></pre><p><br /></p><blockquote><p>这里更改了eureka的自我保护机制, 为了方便后面的测试, 即时剔除无效服务器.</p></blockquote><p><br /></p><h3 id=\"ConfigApplication.java\">ConfigApplication.java</h3><p><br /></p><p>添加@EnableDiscoveryClient注解, 标识该服务为eureka客户端.</p><p><br /></p><pre data-lang=\"java\"><code>@EnableConfigServer\n@EnableDiscoveryClient\n@SpringBootApplication(scanBasePackages = {&quot;com.fastjee.common.web&quot;,&quot;com.fastjee.config&quot;})\npublic class ConfigApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ConfigApplication.class, args);\n    }\n}</code></pre><p><br /></p><blockquote><p>@EnableDiscoveryClient可以替换为@EnableEurekaClient,但后者使用场景比较单一,不兼容其它类型的注册中心.</p></blockquote><p><br /></p><h2 id=\"d4d04c2f\">2. 测试</h2><p><br /></p><p>在测试前, 建立测试用的Config Clinet项目;</p><p><br /></p><h3 id=\"a37a433b\">添加配置文件</h3><p><br /></p><blockquote><p>将配置文件fastjee-config-server-test-dev.yml push到由configServer指定的github仓库.</p></blockquote><p><br /></p><pre data-lang=\"yml\"><code>config-test:\n  sayHello: HelloWorld!</code></pre><p><br /></p><h3 id=\"90894255\">搭建测试客户端</h3><p><br /></p><p>pom.xml</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre><p><br /></p><p>bootstrap.yml</p><p><br /></p><pre data-lang=\"yml\"><code>spring:\n  profiles:\n    active: dev\n  application:\n    name: fastjee-config-server-test\n  # 从配置中心拉取配置, 其他配置文件都在git仓库上\n  cloud:\n    config:\n      fail-fast: true\n      discovery:\n        service-id: fastjee-config\n        enabled: true\n      label: master\n      profile: ${spring.profiles.active}\n      name: ${spring.application.name}\n\n# 注册到注册中心\neureka:\n  instance:\n    hostname: fastjee-config-server-test.com\n  client:\n    serviceUrl:\n      defaultZone: https://fastjee:123456@fastjee-registration.com:5000/eureka/</code></pre><p><br /></p><p>测试RESTFul接口.</p><p><br /></p><pre data-lang=\"java\"><code>@Value(&quot;${config-test.sayHello}&quot;)\nprivate String sayHello;\n\n@GetMapping(&quot;/sayHello&quot;)\npublic @ResponseBody ResponseEntity&lt;String&gt; sayHello() {\n\n\treturn ResponseEntity.ok(sayHello);\n}</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006198622-59e61456-c3e8-4b21-92c3-7e0e9efc95e9.png#align=left&amp;display=inline&amp;height=533&amp;linkTarget=_blank&amp;originHeight=886&amp;originWidth=1240&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"3df85acb\">开始测试</h3><p><br /></p><h4 id=\"7bb986a7\">启动相关服务:</h4><p><br /></p><ol start=\"1\"><li>Eureka Server</li></ol><ol start=\"2\"><li>Config Server (同时启动两个 =&gt; port: 5001, port: 5009)</li></ol><ol start=\"3\"><li>测试客户端</li></ol><p><br /></p><p>启动后的效果图如下:<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006198626-7f299d19-b194-4322-9b3a-76c7f508f066.png#align=left&amp;display=inline&amp;height=192&amp;linkTarget=_blank&amp;originHeight=319&amp;originWidth=1240&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h4 id=\"e6f24019\">测试步骤:</h4><p><br /></p><ol start=\"1\"><li>当configServer:5001,configServer:5009同时正常工作时,测试客户端可以启动并拉取配置.</li></ol><ol start=\"2\"><li>多次启动测试客户端,观察拉取配置的服务器是否在5001/5009之间负载均衡.</li></ol><ol start=\"3\"><li>将configServer:5009实例下线, 测试客户端依然可以正常启动,且接口访问正常.</li></ol><ol start=\"4\"><li>将configServer全部下线, 测试客户端启动失败.</li></ol><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:30:05.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:29:17.000Z",
    "updated_at": "2019-02-01T07:30:05.000Z",
    "published_at": "2019-02-01T07:30:05.000Z",
    "first_published_at": "2019-02-01T07:30:05.000Z",
    "word_count": 965,
    "cover": "",
    "description": "date: 2018-03-31 14:34:29tags: [&quot;SpringBoot&quot;,&quot;SpringCloud&quot;]何为高可用?高可用HA（High Availability）是分布式系统架构设计中必须考虑的因素之一,它通常是指,通过设计减少系统不能提...",
    "custom_description": "date: 2018-03-31 14:34:29tags: [&quot;SpringBoot&quot;,&quot;SpringCloud&quot;]何为高可用?高可用HA（High Availability）是分布式系统架构设计中必须考虑的因素之一,它通常是指,通过设计减少系统不能提...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224406,
    "slug": "springboot-swagger",
    "title": "Swagger2在SpringBoot中的集成指南",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2019-1-28 11:07:12<br />tags: [\"SpringBoot\",\"Swagger2\"]\n---\n\n### 引入依赖Swagger2及Swagger2 UI\n\n```xml\n<!-- swagger -->\n<dependency>\n  <groupId>io.springfox</groupId>\n  <artifactId>springfox-swagger2</artifactId>\n  <version>2.7.0</version>\n</dependency>\n<!-- swagger-ui -->\n<dependency>\n  <groupId>io.springfox</groupId>\n  <artifactId>springfox-swagger-ui</artifactId>\n  <version>2.7.0</version>\n</dependency>\n```\n### 构建配置文件（基于JavaConfig）\n\n```java\npackage com.wuwenze.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\n\n/**\n * @author wuwenze\n * @date 2019/1/28\n */\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n  @Bean\n  public Docket createRestApi() {\n    return new Docket(DocumentationType.SWAGGER_2)\n        .apiInfo(apiInfo())\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(\"com.wuwenze.api\"))\n        .paths(PathSelectors.any())\n        .build();\n  }\n\n  private ApiInfo apiInfo() {\n    return new ApiInfoBuilder()\n        .title(\"某电商平台在线API文档\")\n        .description(\"这是详细描述详细描述详细描述详细描述详细描述详细描述\")\n        .contact(new Contact(\"吴汶泽\", \"https://wuwenze.com\",\n            \"wenzewoo@gmail.com\"))\n        .version(\"1.0\")\n        .build();\n  }\n}\n```\n\n### 定义需要发布文档接口\n\n```java\npackage com.wuwenze.api;\n\nimport cn.hutool.core.util.RandomUtil;\nimport com.wuwenze.entity.Token;\nimport com.wuwenze.support.mvc.entity.ResultBody;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author wuwenze\n * @date 2019/1/28\n */\n@RestController\n@RequestMapping(\"/UserApi\")\n@Api(value = \"UserApi\", description = \"用户相关接口\")\npublic class UserApi {\n\n  @ApiOperation(value = \"用户登陆\", notes = \"登陆成功后返回Token\")\n  @ApiImplicitParams({\n      @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, paramType = \"query\", dataType = \"String\"),\n      @ApiImplicitParam(name = \"password\", value = \"密码\", required = true, paramType = \"query\", dataType = \"String\")\n  })\n  @RequestMapping(value = \"/login\", method = RequestMethod.POST)\n  ResultBody<Token> login(String username, String password) {\n    return ResultBody.ok(\n        Token.builder().token(RandomUtil.simpleUUID()).build()\n    );\n  }\n}\n```\n\n## 国际化实现\n\n* 国际化文件位于springfox-swagger-ui-2.7.0.jar/META-INF/resources/webjars/springfox-swagger-ui/lang目录中\n* 实现国际化(用自己的swagger-ui.html 代替原生swagger-ui.html)\n  * 新建 src/main/resources/META-INF/resources/swagger-ui.html 文件\n  * 把swaager-ui jar包中 /META-INF/resources/swagger-ui.html的内容复制进去\n  * 在新建的swagger-ui.html补充插入以下js：\n\n```html\n<!--国际化操作：选择中文版 -->\n<script src='webjars/springfox-swagger-ui/lang/translator.js' type='text/javascript'></script>\n<script src='webjars/springfox-swagger-ui/lang/zh-cn.js' type='text/javascript'></script>\n```\n\n* 访问http://localhost:8080/swagger-ui.html 就是开启中文的UI界面\n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549006148846-0489b6bf-14ee-4da1-a56d-de772827a74f.jpeg#align=left&display=inline&height=640&linkTarget=_blank&originHeight=963&originWidth=1122&size=0&width=746)\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2019-1-28 11:07:12</p><p>tags: [&quot;SpringBoot&quot;,&quot;Swagger2&quot;]</p><hr /><p><br /></p><h3 id=\"0c24839d\">引入依赖Swagger2及Swagger2 UI</h3><p><br /></p><pre data-lang=\"xml\"><code>&lt;!-- swagger --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n  &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n  &lt;version&gt;2.7.0&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- swagger-ui --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n  &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n  &lt;version&gt;2.7.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre><h3 id=\"a29537ae\">构建配置文件（基于JavaConfig）</h3><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\n\n/**\n * @author wuwenze\n * @date 2019/1/28\n */\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n  @Bean\n  public Docket createRestApi() {\n    return new Docket(DocumentationType.SWAGGER_2)\n        .apiInfo(apiInfo())\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(&quot;com.wuwenze.api&quot;))\n        .paths(PathSelectors.any())\n        .build();\n  }\n\n  private ApiInfo apiInfo() {\n    return new ApiInfoBuilder()\n        .title(&quot;某电商平台在线API文档&quot;)\n        .description(&quot;这是详细描述详细描述详细描述详细描述详细描述详细描述&quot;)\n        .contact(new Contact(&quot;吴汶泽&quot;, &quot;https://wuwenze.com&quot;,\n            &quot;wenzewoo@gmail.com&quot;))\n        .version(&quot;1.0&quot;)\n        .build();\n  }\n}</code></pre><p><br /></p><h3 id=\"a5fa453d\">定义需要发布文档接口</h3><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.api;\n\nimport cn.hutool.core.util.RandomUtil;\nimport com.wuwenze.entity.Token;\nimport com.wuwenze.support.mvc.entity.ResultBody;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author wuwenze\n * @date 2019/1/28\n */\n@RestController\n@RequestMapping(&quot;/UserApi&quot;)\n@Api(value = &quot;UserApi&quot;, description = &quot;用户相关接口&quot;)\npublic class UserApi {\n\n  @ApiOperation(value = &quot;用户登陆&quot;, notes = &quot;登陆成功后返回Token&quot;)\n  @ApiImplicitParams({\n      @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;),\n      @ApiImplicitParam(name = &quot;password&quot;, value = &quot;密码&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;)\n  })\n  @RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST)\n  ResultBody&lt;Token&gt; login(String username, String password) {\n    return ResultBody.ok(\n        Token.builder().token(RandomUtil.simpleUUID()).build()\n    );\n  }\n}</code></pre><p><br /></p><h2 id=\"67c4f122\">国际化实现</h2><p><br /></p><ul><li>国际化文件位于springfox-swagger-ui-2.7.0.jar/META-INF/resources/webjars/springfox-swagger-ui/lang目录中</li></ul><ul><li>实现国际化(用自己的swagger-ui.html 代替原生swagger-ui.html)</li></ul><ul data-lake-indent=\"1\"><li>新建 src/main/resources/META-INF/resources/swagger-ui.html 文件</li></ul><ul data-lake-indent=\"1\"><li>把swaager-ui jar包中 /META-INF/resources/swagger-ui.html的内容复制进去</li></ul><ul data-lake-indent=\"1\"><li>在新建的swagger-ui.html补充插入以下js：</li></ul><p><br /></p><pre data-lang=\"html\"><code>&lt;!--国际化操作：选择中文版 --&gt;\n&lt;script src='webjars/springfox-swagger-ui/lang/translator.js' type='text/javascript'&gt;&lt;/script&gt;\n&lt;script src='webjars/springfox-swagger-ui/lang/zh-cn.js' type='text/javascript'&gt;&lt;/script&gt;</code></pre><p><br /></p><ul><li>访问http://localhost:8080/swagger-ui.html 就是开启中文的UI界面</li></ul><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549006148846-0489b6bf-14ee-4da1-a56d-de772827a74f.jpeg#align=left&amp;display=inline&amp;height=640&amp;linkTarget=_blank&amp;originHeight=963&amp;originWidth=1122&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:29:13.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:28:27.000Z",
    "updated_at": "2019-02-01T07:29:13.000Z",
    "published_at": "2019-02-01T07:29:13.000Z",
    "first_published_at": "2019-02-01T07:29:13.000Z",
    "word_count": 626,
    "cover": "",
    "description": "date: 2019-1-28 11:07:12tags: [&quot;SpringBoot&quot;,&quot;Swagger2&quot;]引入依赖Swagger2及Swagger2 UI&lt;!-- swagger --&gt; &lt;dependency&gt;   &lt;...",
    "custom_description": "date: 2019-1-28 11:07:12tags: [&quot;SpringBoot&quot;,&quot;Swagger2&quot;]引入依赖Swagger2及Swagger2 UI&lt;!-- swagger --&gt; &lt;dependency&gt;   &lt;...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224403,
    "slug": "springboot-mockmvc",
    "title": "使用MockMvc在SpringBoot中进行单元测试",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-08-10 15:03:53<br />tags: [\"SpringBoot\",\"MockMvc\"]\n---\n\n在开发好常规的RESTful接口后，难免会依次进行单元测试，一般来说使用`Postman`即可, 但是依然是不太方便，有没有更方便，更优雅的方式呢？\n\n## MockMvc\n\n> `org.springframework.test.web.servlet.MockMvc`\n\n\nMockMvc是由Spring提供的，作用是在单元测试代码中，伪造一套MVC环境，常见的方法如下：\n\n| Method | Remark |\n| --- | --- |\n| perform | 执行一个RequestBuilder请求，会自动执行SpringMVC的流程并映射到相应的控制器执行处理； |\n| get/post/delete/put | 声明发送一个get请求的方法。MockHttpServletRequestBuilder get(String urlTemplate, Object... urlVariables)：根据uri模板和uri变量值得到一个GET请求方式的。另外提供了其他的请求的方法，如：post、put、delete等。 |\n| param | 添加request的参数 |\n| content | 添加requestBody的参数 |\n| contentType | 设置contentType属性 |\n| header | 设置header属性 |\n| andExpect | 添加ResultMatcher验证规则，验证控制器执行完成后结果是否正确（对返回的数据进行的判断）； |\n| andDo | 添加ResultHandler结果处理器，比如调试时打印结果到控制台（对返回的数据进行的判断）； |\n| andReturn | 最后返回相应的MvcResult；然后进行自定义验证/进行下一步的异步处理（对返回的数据进行的判断）； |\n\n## 代码实现\n\n现有以下两个接口，/user/login, /user/logout\n\n```java\n@Slf4j\n@RestController\n@RequestMapping(\"/user\")\npublic class UserController {\n\n    @Autowired\n    private ApiContext apiContext;\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private TokenService tokenService;\n\n    @PostMapping(\"/login\")\n    private JSONEntity<?> login() {\n        String requestBodyString = WebUtil.getBody();\n        Assert.notEmpty(requestBodyString, \"requestBody is null\");\n        String userJsonString = Base64.decodeStr(requestBodyString);\n        if (!JSONUtil.isJsonObj(userJsonString)) {\n            throw new BusinessException(JSONEntity.Error.ILLEGAL_ARGUMENT_ERROR);\n        }\n        User requestBody = JSON.parseObject(userJsonString, User.class);\n        if (null == requestBody) {\n            throw new BusinessException(JSONEntity.Error.JSON_SERIALIZATION_ERROR);\n        }\n        try {\n            User userDb = userService.login(requestBody.getUsername(), requestBody.getPassword());\n            Token token = tokenService.findOrCreateToken(userDb.getId());\n            return JSONEntity.ok(\"token\", token.getToken(), \"expire\", token.getExpire());\n        } catch (AuthorityException e) {\n            log.error(\"#sign_in fail. username={}, e=\" + e, requestBody.getUsername());\n            return JSONEntity.error(e.getMessage());\n        }\n    }\n\n    @CheckAccessToken\n    @DeleteMapping(\"/logout\")\n    private JSONEntity<?> logout() {\n        Boolean flag = tokenService.removeToken(apiContext.getToken());\n        return flag ? JSONEntity.ok() : JSONEntity.error(\"注销失败\");\n    }\n}\n```\n\n创建单元测试\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = BlogApplication.class)\npublic class BaseTester {\n    protected MockMvc mockMvc;\n\n    @Autowired\n    protected WebApplicationContext webApplicationContext;\n\n    @Before\n    public void setUp() throws Exception {\n        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();\n    }\n}\n\n@Slf4j\npublic class UserControllerTest extends BaseTester {\n\n    @Test\n    public void testLogin() throws Exception {\n        Map<String, String> requestBodyMap = MapUtil.newHashMap(//\n                \"username\", \"admin\",//\n                \"password\", SecureUtil.md5(\"password@\"));\n        log.info(\"#testLogin requestBodyMap={}\", requestBodyMap);\n        String requestBody = Base64.encode(JSON.toJSONString(requestBodyMap));\n        log.info(\"#testLogin requestBody={}\", requestBody);\n        mockMvc.perform(\n                MockMvcRequestBuilders\n                        .post(\"/user/login\")\n                        .contentType(MediaType.APPLICATION_JSON_UTF8)\n                        .content(requestBody)\n        ).andDo(mvcResult -> log.info(\"#testLogin mvcResult = {}\", mvcResult.getResponse().getContentAsString()));\n    }\n\n    @Test\n    public void testLogout() throws Exception {\n        String token = \"eb33ef4b50d04a288c3c531fab2a32ed\";\n        mockMvc.perform(\n                MockMvcRequestBuilders\n                        .delete(\"/user/logout\")\n                        .contentType(MediaType.APPLICATION_JSON_UTF8)\n                        .header(Consts.ACCESS_TOKEN_HEADER_KEY, token)\n        ).andDo(mvcResult -> log.info(\"#testLogout mvcResult = {}\", mvcResult.getResponse().getContentAsString()));\n    }\n}\n```\n\n结果打印：\n\n```\n2018-08-10 11:34:38.461  INFO 18848 --- [           main] c.w.blog.controller.UserControllerTest   : #testLogin requestBodyMap={password=321f39d6a69ad68534417d4205b7f52c, username=admin}\n2018-08-10 11:34:38.469  INFO 18848 --- [           main] c.w.blog.controller.UserControllerTest   : #testLogin requestBody=eyJwYXNzd29yZCI6IjMyMWYzOWQ2YTY5YWQ2ODUzNDQxN2Q0MjA1YjdmNTJjIiwidXNlcm5hbWUiOiJhZG1pbiJ9\n2018-08-10 11:34:38.968  INFO 18848 --- [           main] c.w.blog.controller.UserControllerTest   : #testLogin mvcResult = {\n\t\"status\":true,\n\t\"result\":{\n\t\t\"expire\":\"2018/08/11 11:34:10\",\n\t\t\"token\":\"a6e71e9b8f0848c8a029934ee975cccc\"\n\t},\n\t\"timestamp\":1533872078964\n}\n2018-08-10 11:34:38.972  INFO 18848 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring FrameworkServlet ''\n2018-08-10 11:34:38.973  INFO 18848 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : FrameworkServlet '': initialization started\n2018-08-10 11:34:38.978  INFO 18848 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : FrameworkServlet '': initialization completed in 5 ms\n2018-08-10 11:34:39.150  WARN 18848 --- [           main] com.wuwenze.blog.util.MapUtil            : MapUtil#newMap() keyValues is null.\n2018-08-10 11:34:39.151  INFO 18848 --- [           main] c.w.blog.controller.UserControllerTest   : #testLogout mvcResult = {\n\t\"status\":true,\n\t\"timestamp\":1533872079151\n}\n```\n\n在以上的例子中，我使用了 `andDo` 结果处理器，通过打印接口返回值的方式，确定了接口是可以正常工作的。\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-08-10 15:03:53</p><p>tags: [&quot;SpringBoot&quot;,&quot;MockMvc&quot;]</p><hr /><p><br /></p><p>在开发好常规的RESTful接口后，难免会依次进行单元测试，一般来说使用<code>Postman</code>即可, 但是依然是不太方便，有没有更方便，更优雅的方式呢？</p><p><br /></p><h2 id=\"MockMvc\">MockMvc</h2><p><br /></p><blockquote><p><code>org.springframework.test.web.servlet.MockMvc</code></p></blockquote><p><br /></p><p>MockMvc是由Spring提供的，作用是在单元测试代码中，伪造一套MVC环境，常见的方法如下：</p><p><br /></p><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"360\"></col><col width=\"361\"></col></colgroup><tbody><tr><td>Method</td><td>Remark</td></tr></tbody><tbody><tr><td>perform</td><td>执行一个RequestBuilder请求，会自动执行SpringMVC的流程并映射到相应的控制器执行处理；</td></tr><tr><td>get/post/delete/put</td><td>声明发送一个get请求的方法。MockHttpServletRequestBuilder get(String urlTemplate, Object... urlVariables)：根据uri模板和uri变量值得到一个GET请求方式的。另外提供了其他的请求的方法，如：post、put、delete等。</td></tr><tr><td>param</td><td>添加request的参数</td></tr><tr><td>content</td><td>添加requestBody的参数</td></tr><tr><td>contentType</td><td>设置contentType属性</td></tr><tr><td>header</td><td>设置header属性</td></tr><tr><td>andExpect</td><td>添加ResultMatcher验证规则，验证控制器执行完成后结果是否正确（对返回的数据进行的判断）；</td></tr><tr><td>andDo</td><td>添加ResultHandler结果处理器，比如调试时打印结果到控制台（对返回的数据进行的判断）；</td></tr><tr><td>andReturn</td><td>最后返回相应的MvcResult；然后进行自定义验证/进行下一步的异步处理（对返回的数据进行的判断）；</td></tr></tbody></table><h2 id=\"83175ad0\">代码实现</h2><p><br /></p><p>现有以下两个接口，/user/login, /user/logout</p><p><br /></p><pre data-lang=\"java\"><code>@Slf4j\n@RestController\n@RequestMapping(&quot;/user&quot;)\npublic class UserController {\n\n    @Autowired\n    private ApiContext apiContext;\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private TokenService tokenService;\n\n    @PostMapping(&quot;/login&quot;)\n    private JSONEntity&lt;?&gt; login() {\n        String requestBodyString = WebUtil.getBody();\n        Assert.notEmpty(requestBodyString, &quot;requestBody is null&quot;);\n        String userJsonString = Base64.decodeStr(requestBodyString);\n        if (!JSONUtil.isJsonObj(userJsonString)) {\n            throw new BusinessException(JSONEntity.Error.ILLEGAL_ARGUMENT_ERROR);\n        }\n        User requestBody = JSON.parseObject(userJsonString, User.class);\n        if (null == requestBody) {\n            throw new BusinessException(JSONEntity.Error.JSON_SERIALIZATION_ERROR);\n        }\n        try {\n            User userDb = userService.login(requestBody.getUsername(), requestBody.getPassword());\n            Token token = tokenService.findOrCreateToken(userDb.getId());\n            return JSONEntity.ok(&quot;token&quot;, token.getToken(), &quot;expire&quot;, token.getExpire());\n        } catch (AuthorityException e) {\n            log.error(&quot;#sign_in fail. username={}, e=&quot; + e, requestBody.getUsername());\n            return JSONEntity.error(e.getMessage());\n        }\n    }\n\n    @CheckAccessToken\n    @DeleteMapping(&quot;/logout&quot;)\n    private JSONEntity&lt;?&gt; logout() {\n        Boolean flag = tokenService.removeToken(apiContext.getToken());\n        return flag ? JSONEntity.ok() : JSONEntity.error(&quot;注销失败&quot;);\n    }\n}</code></pre><p><br /></p><p>创建单元测试</p><p><br /></p><pre data-lang=\"java\"><code>@RunWith(SpringRunner.class)\n@SpringBootTest(classes = BlogApplication.class)\npublic class BaseTester {\n    protected MockMvc mockMvc;\n\n    @Autowired\n    protected WebApplicationContext webApplicationContext;\n\n    @Before\n    public void setUp() throws Exception {\n        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();\n    }\n}\n\n@Slf4j\npublic class UserControllerTest extends BaseTester {\n\n    @Test\n    public void testLogin() throws Exception {\n        Map&lt;String, String&gt; requestBodyMap = MapUtil.newHashMap(//\n                &quot;username&quot;, &quot;admin&quot;,//\n                &quot;password&quot;, SecureUtil.md5(&quot;password@&quot;));\n        log.info(&quot;#testLogin requestBodyMap={}&quot;, requestBodyMap);\n        String requestBody = Base64.encode(JSON.toJSONString(requestBodyMap));\n        log.info(&quot;#testLogin requestBody={}&quot;, requestBody);\n        mockMvc.perform(\n                MockMvcRequestBuilders\n                        .post(&quot;/user/login&quot;)\n                        .contentType(MediaType.APPLICATION_JSON_UTF8)\n                        .content(requestBody)\n        ).andDo(mvcResult -&gt; log.info(&quot;#testLogin mvcResult = {}&quot;, mvcResult.getResponse().getContentAsString()));\n    }\n\n    @Test\n    public void testLogout() throws Exception {\n        String token = &quot;eb33ef4b50d04a288c3c531fab2a32ed&quot;;\n        mockMvc.perform(\n                MockMvcRequestBuilders\n                        .delete(&quot;/user/logout&quot;)\n                        .contentType(MediaType.APPLICATION_JSON_UTF8)\n                        .header(Consts.ACCESS_TOKEN_HEADER_KEY, token)\n        ).andDo(mvcResult -&gt; log.info(&quot;#testLogout mvcResult = {}&quot;, mvcResult.getResponse().getContentAsString()));\n    }\n}</code></pre><p><br /></p><p>结果打印：</p><p><br /></p><pre><code>2018-08-10 11:34:38.461  INFO 18848 --- [           main] c.w.blog.controller.UserControllerTest   : #testLogin requestBodyMap={password=321f39d6a69ad68534417d4205b7f52c, username=admin}\n2018-08-10 11:34:38.469  INFO 18848 --- [           main] c.w.blog.controller.UserControllerTest   : #testLogin requestBody=eyJwYXNzd29yZCI6IjMyMWYzOWQ2YTY5YWQ2ODUzNDQxN2Q0MjA1YjdmNTJjIiwidXNlcm5hbWUiOiJhZG1pbiJ9\n2018-08-10 11:34:38.968  INFO 18848 --- [           main] c.w.blog.controller.UserControllerTest   : #testLogin mvcResult = {\n\t&quot;status&quot;:true,\n\t&quot;result&quot;:{\n\t\t&quot;expire&quot;:&quot;2018/08/11 11:34:10&quot;,\n\t\t&quot;token&quot;:&quot;a6e71e9b8f0848c8a029934ee975cccc&quot;\n\t},\n\t&quot;timestamp&quot;:1533872078964\n}\n2018-08-10 11:34:38.972  INFO 18848 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring FrameworkServlet ''\n2018-08-10 11:34:38.973  INFO 18848 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : FrameworkServlet '': initialization started\n2018-08-10 11:34:38.978  INFO 18848 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : FrameworkServlet '': initialization completed in 5 ms\n2018-08-10 11:34:39.150  WARN 18848 --- [           main] com.wuwenze.blog.util.MapUtil            : MapUtil#newMap() keyValues is null.\n2018-08-10 11:34:39.151  INFO 18848 --- [           main] c.w.blog.controller.UserControllerTest   : #testLogout mvcResult = {\n\t&quot;status&quot;:true,\n\t&quot;timestamp&quot;:1533872079151\n}</code></pre><p><br /></p><p>在以上的例子中，我使用了 <code>andDo</code> 结果处理器，通过打印接口返回值的方式，确定了接口是可以正常工作的。</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:28:22.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:27:06.000Z",
    "updated_at": "2019-02-01T07:28:22.000Z",
    "published_at": "2019-02-01T07:28:22.000Z",
    "first_published_at": "2019-02-01T07:28:22.000Z",
    "word_count": 910,
    "cover": "",
    "description": "date: 2018-08-10 15:03:53tags: [&quot;SpringBoot&quot;,&quot;MockMvc&quot;]在开发好常规的RESTful接口后，难免会依次进行单元测试，一般来说使用Postman即可, 但是依然是不太方便，有没有更方便，更优雅的方式呢？...",
    "custom_description": "date: 2018-08-10 15:03:53tags: [&quot;SpringBoot&quot;,&quot;MockMvc&quot;]在开发好常规的RESTful接口后，难免会依次进行单元测试，一般来说使用Postman即可, 但是依然是不太方便，有没有更方便，更优雅的方式呢？...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224398,
    "slug": "springboot-dubbo-example",
    "title": "在SpringBoot中优雅的集成Dubbo",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-10-11 15:21:08<br />tags: [\"SpringBoot\",\"Dubbo\"]\n---\n\n在springboot中集成dubbo示例(非注解)，废话少说，直入正题。\n## pom\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\n<dependency>\n  <groupId>org.projectlombok</groupId>\n  <artifactId>lombok</artifactId>\n  <optional>true</optional>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-test</artifactId>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>com.alibaba</groupId>\n  <artifactId>dubbo</artifactId>\n  <version>2.8.4</version>\n  <exclusions>\n    <exclusion>\n      <artifactId>spring</artifactId>\n      <groupId>org.springframework</groupId>\n    </exclusion>\n  </exclusions>\n</dependency>\n\n<dependency>\n  <groupId>org.apache.zookeeper</groupId>\n  <artifactId>zookeeper</artifactId>\n  <version>3.4.6</version>\n  <exclusions>\n    <exclusion>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-log4j12</artifactId>\n    </exclusion>\n    <exclusion>\n      <groupId>log4j</groupId>\n      <artifactId>log4j</artifactId>\n    </exclusion>\n  </exclusions>\n</dependency>\n\n<dependency>\n  <groupId>com.github.sgroschupf</groupId>\n  <artifactId>zkclient</artifactId>\n  <version>0.1</version>\n</dependency>\n```\n\n## springboot-dubbo-example-provider\n\napplication.yml\n\n```yaml\nserver:\n  port: 10051\n\ndubbo:\n  registry:\n    address: localhost:2181\n```\n\ndubbo-provider.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n  <dubbo:application name=\"springboot-dubbo-example-provider\"/>\n  <dubbo:registry id=\"zookeeper\" protocol=\"zookeeper\" address=\"${dubbo.registry.address}\"/>\n  <dubbo:protocol name=\"dubbo\" port=\"30001\"/>\n  <dubbo:service interface=\"com.wuwenze.springbootdubboexampleprovider.service.SayHelloService\"\n                 ref=\"sayHelloService\"\n                 registry=\"zookeeper\"/>\n  <bean id=\"sayHelloService\" class=\"com.wuwenze.springbootdubboexampleprovider.service.impl.SayHelloServiceImpl\"/>\n</beans>\n```\n\ninterface\n\n```java\npackage com.wuwenze.springbootdubboexampleprovider.service;\n\n/**\n * @author wwz\n * @version 1 (2018/10/10)\n * @since Java7\n */\npublic interface SayHelloService {\n\n    String sayHello(String name);\n}\n```\n\n```java\npackage com.wuwenze.springbootdubboexampleprovider.service.impl;\n\nimport com.wuwenze.springbootdubboexampleprovider.service.SayHelloService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author wwz\n * @version 1 (2018/10/10)\n * @since Java7\n */\n@Slf4j\n@Service\npublic class SayHelloServiceImpl implements SayHelloService {\n    @Override\n    public String sayHello(String name) {\n        log.info(\"call SayHelloService.sayHell(name:{})\", name);\n        return String.format(\"hello, %s\", name);\n    }\n}\n```\n\napplication.java\n\n```java\npackage com.wuwenze.springbootdubboexampleprovider;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ImportResource;\n\n@SpringBootApplication\n@ImportResource({\"classpath:dubbo-provider.xml\"})\npublic class SpringbootDubboExampleProviderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootDubboExampleProviderApplication.class, args);\n        // 若没有引入spring-boot-starter-web依赖，则需要执行System.in.read();让其阻塞。\n    }\n}\n```\n\n## springboot-dubbo-example-consumer\n\napplication.yml\n\n```yaml\nserver:\n  port: 10051\n\ndubbo:\n  registry:\n    address: localhost:2181\n```\n\ndubbo-consumer.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n  <dubbo:application name=\"springboot-dubbo-example-consumer\"/>\n\n  <dubbo:registry id=\"zookeeper\" protocol=\"zookeeper\" address=\"${dubbo.registry.address}\"/>\n\n  <dubbo:reference id=\"sayHelloService\" interface=\"com.wuwenze.springbootdubboexampleconsumer.service.SayHelloService\"\n                   registry=\"zookeeper\" protocol=\"dubbo\" timeout=\"15000\"/>\n</beans>\n```\n\napplication.java\n\n```java\npackage com.wuwenze.springbootdubboexampleconsumer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ImportResource;\n\n@SpringBootApplication\n@ImportResource({\"classpath:dubbo-consumer.xml\"})\npublic class SpringbootDubboExampleConsumerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootDubboExampleConsumerApplication.class, args);\n        // 若没有引入spring-boot-starter-web依赖，则需要执行System.in.read();让其阻塞。\n    }\n}\n```\n\napplicationTest.java\n\n```java\npackage com.wuwenze.springbootdubboexampleconsumer;\n\nimport com.wuwenze.springbootdubboexampleconsumer.service.SayHelloService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport javax.annotation.Resource;\n\n@Slf4j\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = SpringbootDubboExampleConsumerApplication.class)\npublic class SpringbootDubboExampleConsumerApplicationTests {\n\n    @Resource\n    private SayHelloService sayHelloService;\n\n    @Test\n    public void testSayHello() {\n        String sayHello = sayHelloService.sayHello(\"world\");\n        log.info(\"test sayHelloService.sayHello(\\\"world\\\") = {}\", sayHello);\n        Assert.assertEquals(sayHello, \"hello, world\");\n    }\n}\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549006018849-5470eb2c-e867-4735-80e1-fb86d166f6b6.png#align=left&display=inline&height=407&linkTarget=_blank&originHeight=1048&originWidth=1920&size=0&width=746)\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-10-11 15:21:08</p><p>tags: [&quot;SpringBoot&quot;,&quot;Dubbo&quot;]</p><hr /><p><br /></p><p>在springboot中集成dubbo示例(非注解)，废话少说，直入正题。</p><h2 id=\"pom\">pom</h2><p><br /></p><pre data-lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n  &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n  &lt;optional&gt;true&lt;/optional&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n  &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n  &lt;artifactId&gt;dubbo&lt;/artifactId&gt;\n  &lt;version&gt;2.8.4&lt;/version&gt;\n  &lt;exclusions&gt;\n    &lt;exclusion&gt;\n      &lt;artifactId&gt;spring&lt;/artifactId&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;/exclusion&gt;\n  &lt;/exclusions&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;\n  &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;\n  &lt;version&gt;3.4.6&lt;/version&gt;\n  &lt;exclusions&gt;\n    &lt;exclusion&gt;\n      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n      &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\n    &lt;/exclusion&gt;\n    &lt;exclusion&gt;\n      &lt;groupId&gt;log4j&lt;/groupId&gt;\n      &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n    &lt;/exclusion&gt;\n  &lt;/exclusions&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt;\n  &lt;artifactId&gt;zkclient&lt;/artifactId&gt;\n  &lt;version&gt;0.1&lt;/version&gt;\n&lt;/dependency&gt;</code></pre><p><br /></p><h2 id=\"springboot-dubbo-example-provider\">springboot-dubbo-example-provider</h2><p><br /></p><p>application.yml</p><p><br /></p><pre data-lang=\"yaml\"><code>server:\n  port: 10051\n\ndubbo:\n  registry:\n    address: localhost:2181</code></pre><p><br /></p><p>dubbo-provider.xml</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;\n       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;\n  &lt;dubbo:application name=&quot;springboot-dubbo-example-provider&quot;/&gt;\n  &lt;dubbo:registry id=&quot;zookeeper&quot; protocol=&quot;zookeeper&quot; address=&quot;${dubbo.registry.address}&quot;/&gt;\n  &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;30001&quot;/&gt;\n  &lt;dubbo:service interface=&quot;com.wuwenze.springbootdubboexampleprovider.service.SayHelloService&quot;\n                 ref=&quot;sayHelloService&quot;\n                 registry=&quot;zookeeper&quot;/&gt;\n  &lt;bean id=&quot;sayHelloService&quot; class=&quot;com.wuwenze.springbootdubboexampleprovider.service.impl.SayHelloServiceImpl&quot;/&gt;\n&lt;/beans&gt;</code></pre><p><br /></p><p>interface</p><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.springbootdubboexampleprovider.service;\n\n/**\n * @author wwz\n * @version 1 (2018/10/10)\n * @since Java7\n */\npublic interface SayHelloService {\n\n    String sayHello(String name);\n}</code></pre><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.springbootdubboexampleprovider.service.impl;\n\nimport com.wuwenze.springbootdubboexampleprovider.service.SayHelloService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author wwz\n * @version 1 (2018/10/10)\n * @since Java7\n */\n@Slf4j\n@Service\npublic class SayHelloServiceImpl implements SayHelloService {\n    @Override\n    public String sayHello(String name) {\n        log.info(&quot;call SayHelloService.sayHell(name:{})&quot;, name);\n        return String.format(&quot;hello, %s&quot;, name);\n    }\n}</code></pre><p><br /></p><p>application.java</p><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.springbootdubboexampleprovider;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ImportResource;\n\n@SpringBootApplication\n@ImportResource({&quot;classpath:dubbo-provider.xml&quot;})\npublic class SpringbootDubboExampleProviderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootDubboExampleProviderApplication.class, args);\n        // 若没有引入spring-boot-starter-web依赖，则需要执行System.in.read();让其阻塞。\n    }\n}</code></pre><p><br /></p><h2 id=\"springboot-dubbo-example-consumer\">springboot-dubbo-example-consumer</h2><p><br /></p><p>application.yml</p><p><br /></p><pre data-lang=\"yaml\"><code>server:\n  port: 10051\n\ndubbo:\n  registry:\n    address: localhost:2181</code></pre><p><br /></p><p>dubbo-consumer.xml</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;\n       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;\n  &lt;dubbo:application name=&quot;springboot-dubbo-example-consumer&quot;/&gt;\n\n  &lt;dubbo:registry id=&quot;zookeeper&quot; protocol=&quot;zookeeper&quot; address=&quot;${dubbo.registry.address}&quot;/&gt;\n\n  &lt;dubbo:reference id=&quot;sayHelloService&quot; interface=&quot;com.wuwenze.springbootdubboexampleconsumer.service.SayHelloService&quot;\n                   registry=&quot;zookeeper&quot; protocol=&quot;dubbo&quot; timeout=&quot;15000&quot;/&gt;\n&lt;/beans&gt;</code></pre><p><br /></p><p>application.java</p><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.springbootdubboexampleconsumer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ImportResource;\n\n@SpringBootApplication\n@ImportResource({&quot;classpath:dubbo-consumer.xml&quot;})\npublic class SpringbootDubboExampleConsumerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootDubboExampleConsumerApplication.class, args);\n        // 若没有引入spring-boot-starter-web依赖，则需要执行System.in.read();让其阻塞。\n    }\n}</code></pre><p><br /></p><p>applicationTest.java</p><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.springbootdubboexampleconsumer;\n\nimport com.wuwenze.springbootdubboexampleconsumer.service.SayHelloService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport javax.annotation.Resource;\n\n@Slf4j\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = SpringbootDubboExampleConsumerApplication.class)\npublic class SpringbootDubboExampleConsumerApplicationTests {\n\n    @Resource\n    private SayHelloService sayHelloService;\n\n    @Test\n    public void testSayHello() {\n        String sayHello = sayHelloService.sayHello(&quot;world&quot;);\n        log.info(&quot;test sayHelloService.sayHello(\\&quot;world\\&quot;) = {}&quot;, sayHello);\n        Assert.assertEquals(sayHello, &quot;hello, world&quot;);\n    }\n}</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549006018849-5470eb2c-e867-4735-80e1-fb86d166f6b6.png#align=left&amp;display=inline&amp;height=407&amp;linkTarget=_blank&amp;originHeight=1048&amp;originWidth=1920&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:27:02.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:26:10.000Z",
    "updated_at": "2019-02-01T07:27:02.000Z",
    "published_at": "2019-02-01T07:27:02.000Z",
    "first_published_at": "2019-02-01T07:27:02.000Z",
    "word_count": 957,
    "cover": "",
    "description": "date: 2018-10-11 15:21:08tags: [&quot;SpringBoot&quot;,&quot;Dubbo&quot;]在springboot中集成dubbo示例(非注解)，废话少说，直入正题。pom&lt;dependency&gt;   &lt;groupId&g...",
    "custom_description": "date: 2018-10-11 15:21:08tags: [&quot;SpringBoot&quot;,&quot;Dubbo&quot;]在springboot中集成dubbo示例(非注解)，废话少说，直入正题。pom&lt;dependency&gt;   &lt;groupId&g...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224392,
    "slug": "springboot-async-call",
    "title": "SpringBoot异步调用(Async Call)",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-06-21 14:44:35<br />tags: [\"SpringBoot\"]\n---\n\n异步调用在开发中经常使用，本文通过一个简单的例子快速了解异步调用在SpringBoot中是如何使用的。\n## 编码实现\n\n### Create Project\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.wuwenze</groupId>\n    <artifactId>springboot-async-examples</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot-async-examples</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.0.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n### TaskExecutor Bean\n\n```java\npackage com.wuwenze.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.task.AsyncTaskExecutor;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.concurrent.ThreadPoolExecutor;\n\n/**\n * @author wwz\n * @version 1 (2018/6/21)\n * @since Java7\n */\n@Configuration\npublic class AsyncTaskConfig {\n\n    @Bean\n    public AsyncTaskExecutor taskExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setThreadNamePrefix(\"Async-Executor-Example\");\n        executor.setMaxPoolSize(10);\n        executor.setCorePoolSize(3);\n        // 使用预定义的异常处理类\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        //...\n        return executor;\n    }\n}\n```\n\n### AsyncTask Examples\n\n```java\npackage com.wuwenze.task;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.scheduling.annotation.AsyncResult;\nimport org.springframework.stereotype.Component;\n\nimport java.util.concurrent.Future;\n\n/**\n * @author wwz\n * @version 1 (2018/6/21)\n * @since Java7\n */\n@Slf4j\n@Component\npublic class AsyncTaskDemo {\n\n    @Async\n    public void test1() {\n        log.debug(\"com.wuwenze.task.AsyncTaskDemo#test1(): 常规异步调用，不含参数和返回值\");\n    }\n\n    @Async\n    public void test2(String name) {\n        log.debug(\"com.wuwenze.task.AsyncTaskDemo#test2(): 常规异步调用，可接收参数：name = {}\", name);\n    }\n\n    @Async\n    public Future<String> test3(String name) {\n        log.debug(\"com.wuwenze.task.AsyncTaskDemo#test3(): 可接收参数以及返回值：name = {}\", name);\n\n        return new AsyncResult<>(String.format(\"hello, %s\", name));\n    }\n}\n```\n\n### 单元测试\n\n```java\npackage com.wuwenze.task;\n\nimport com.wuwenze.SpringbootAsyncExamplesApplication;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.extern.slf4j.Slf4j;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport javax.annotation.Resource;\n\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\n\n/**\n * @author wwz\n * @version 1 (2018/6/21)\n * @since Java7\n */\n@Slf4j\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = SpringbootAsyncExamplesApplication.class)\npublic class AsyncTaskDemoTest {\n\n    @Resource\n    AsyncTaskDemo asyncTaskDemo;\n\n    @Test\n    public void testAsyncMethods() throws ExecutionException, InterruptedException {\n        asyncTaskDemo.test1();\n        asyncTaskDemo.test2(\"china\");\n\n        Future<String> future = asyncTaskDemo.test3(\"wuwenze\");\n        log.debug(\"test3() 接收返回值：future: {}\", future.get());\n    }\n}\n```\n\n### 最终结果打印\n\n```\n2018-06-21 22:16:32.324 DEBUG 5388 --- [ecutor-Example1] com.wuwenze.task.AsyncTaskDemo           : com.wuwenze.task.AsyncTaskDemo#test1(): 常规异步调用，不含参数和返回值\n2018-06-21 22:16:32.324 DEBUG 5388 --- [ecutor-Example2] com.wuwenze.task.AsyncTaskDemo           : com.wuwenze.task.AsyncTaskDemo#test2(): 常规异步调用，可接收参数：name = china\n2018-06-21 22:16:32.324 DEBUG 5388 --- [ecutor-Example3] com.wuwenze.task.AsyncTaskDemo           : com.wuwenze.task.AsyncTaskDemo#test3(): 可接收参数以及返回值：name = wuwenze\n2018-06-21 22:16:32.325 DEBUG 5388 --- [           main] com.wuwenze.task.AsyncTaskDemoTest       : test3() 接收返回值：future: hello, wuwenze\n```\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-06-21 14:44:35</p><p>tags: [&quot;SpringBoot&quot;]</p><hr /><p><br /></p><p>异步调用在开发中经常使用，本文通过一个简单的例子快速了解异步调用在SpringBoot中是如何使用的。</p><h2 id=\"ad6303e1\">编码实现</h2><p><br /></p><h3 id=\"1559979b\">Create Project</h3><p><br /></p><pre data-lang=\"xml\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.wuwenze&lt;/groupId&gt;\n    &lt;artifactId&gt;springboot-async-examples&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;jar&lt;/packaging&gt;\n\n    &lt;name&gt;springboot-async-examples&lt;/name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.0.0.RELEASE&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n\n    &lt;properties&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;</code></pre><p><br /></p><h3 id=\"6901f154\">TaskExecutor Bean</h3><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.task.AsyncTaskExecutor;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.concurrent.ThreadPoolExecutor;\n\n/**\n * @author wwz\n * @version 1 (2018/6/21)\n * @since Java7\n */\n@Configuration\npublic class AsyncTaskConfig {\n\n    @Bean\n    public AsyncTaskExecutor taskExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setThreadNamePrefix(&quot;Async-Executor-Example&quot;);\n        executor.setMaxPoolSize(10);\n        executor.setCorePoolSize(3);\n        // 使用预定义的异常处理类\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        //...\n        return executor;\n    }\n}</code></pre><p><br /></p><h3 id=\"b7497fa0\">AsyncTask Examples</h3><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.task;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.scheduling.annotation.AsyncResult;\nimport org.springframework.stereotype.Component;\n\nimport java.util.concurrent.Future;\n\n/**\n * @author wwz\n * @version 1 (2018/6/21)\n * @since Java7\n */\n@Slf4j\n@Component\npublic class AsyncTaskDemo {\n\n    @Async\n    public void test1() {\n        log.debug(&quot;com.wuwenze.task.AsyncTaskDemo#test1(): 常规异步调用，不含参数和返回值&quot;);\n    }\n\n    @Async\n    public void test2(String name) {\n        log.debug(&quot;com.wuwenze.task.AsyncTaskDemo#test2(): 常规异步调用，可接收参数：name = {}&quot;, name);\n    }\n\n    @Async\n    public Future&lt;String&gt; test3(String name) {\n        log.debug(&quot;com.wuwenze.task.AsyncTaskDemo#test3(): 可接收参数以及返回值：name = {}&quot;, name);\n\n        return new AsyncResult&lt;&gt;(String.format(&quot;hello, %s&quot;, name));\n    }\n}</code></pre><p><br /></p><h3 id=\"93b824b5\">单元测试</h3><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.task;\n\nimport com.wuwenze.SpringbootAsyncExamplesApplication;\nimport lombok.extern.log4j.Log4j2;\nimport lombok.extern.slf4j.Slf4j;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport javax.annotation.Resource;\n\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\n\n/**\n * @author wwz\n * @version 1 (2018/6/21)\n * @since Java7\n */\n@Slf4j\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = SpringbootAsyncExamplesApplication.class)\npublic class AsyncTaskDemoTest {\n\n    @Resource\n    AsyncTaskDemo asyncTaskDemo;\n\n    @Test\n    public void testAsyncMethods() throws ExecutionException, InterruptedException {\n        asyncTaskDemo.test1();\n        asyncTaskDemo.test2(&quot;china&quot;);\n\n        Future&lt;String&gt; future = asyncTaskDemo.test3(&quot;wuwenze&quot;);\n        log.debug(&quot;test3() 接收返回值：future: {}&quot;, future.get());\n    }\n}</code></pre><p><br /></p><h3 id=\"d0bc93b1\">最终结果打印</h3><p><br /></p><pre><code>2018-06-21 22:16:32.324 DEBUG 5388 --- [ecutor-Example1] com.wuwenze.task.AsyncTaskDemo           : com.wuwenze.task.AsyncTaskDemo#test1(): 常规异步调用，不含参数和返回值\n2018-06-21 22:16:32.324 DEBUG 5388 --- [ecutor-Example2] com.wuwenze.task.AsyncTaskDemo           : com.wuwenze.task.AsyncTaskDemo#test2(): 常规异步调用，可接收参数：name = china\n2018-06-21 22:16:32.324 DEBUG 5388 --- [ecutor-Example3] com.wuwenze.task.AsyncTaskDemo           : com.wuwenze.task.AsyncTaskDemo#test3(): 可接收参数以及返回值：name = wuwenze\n2018-06-21 22:16:32.325 DEBUG 5388 --- [           main] com.wuwenze.task.AsyncTaskDemoTest       : test3() 接收返回值：future: hello, wuwenze</code></pre><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:26:02.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:25:16.000Z",
    "updated_at": "2019-02-01T07:26:02.000Z",
    "published_at": "2019-02-01T07:26:02.000Z",
    "first_published_at": "2019-02-01T07:26:02.000Z",
    "word_count": 911,
    "cover": "",
    "description": "date: 2018-06-21 14:44:35tags: [&quot;SpringBoot&quot;]异步调用在开发中经常使用，本文通过一个简单的例子快速了解异步调用在SpringBoot中是如何使用的。编码实现Create Project&lt;?xml version=&quot;...",
    "custom_description": "date: 2018-06-21 14:44:35tags: [&quot;SpringBoot&quot;]异步调用在开发中经常使用，本文通过一个简单的例子快速了解异步调用在SpringBoot中是如何使用的。编码实现Create Project&lt;?xml version=&quot;...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224390,
    "slug": "springboot-admin-example",
    "title": "SpringBoot Admin 集成指南(v2.1.1)",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2019-1-11 13:31:36<br />tags: [\"Spring\",\"SpringBoot\"]\n---\nSpringBoot Admin用于管理和监控SpringBoot应用程序。 应用程序作为Spring Boot Admin Client向为Spring Boot Admin Server注册（通过HTTP）或使用SpringCloud注册中心（例如Eureka，Consul）发现。\n\n其常见的功能如下：\n\n* 显示健康状况\n* 显示详细信息，例如\n  * JVM和内存指标\n  * micrometer.io指标\n  * 数据源指标\n  * 缓存指标\n* 显示构建信息编号\n* 关注并下载日志文件\n* 查看jvm系统和环境属性\n* 查看Spring Boot配置属性\n* 支持Spring Cloud的postable / env-和/ refresh-endpoint\n* 轻松的日志级管理\n* 与JMX-beans交互\n* 查看线程转储\n* 查看http跟踪\n* 查看auditevents\n* 查看http-endpoints\n* 查看计划任务\n* 查看和删除活动会话（使用spring-session）\n* 查看Flyway / Liquibase数据库迁移\n* 下载heapdump文件\n* 状态变更通知（通过电子邮件，Slack，Hipchat，......）\n* 状态更改的事件日志（非持久性）\n## 开始使用\n\n### 创建SpringBoot AdminServer\n\n建立标准的Maven项目，其完整的依赖如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.1.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.wuwenze</groupId>\n    <artifactId>admin-server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>admin-server</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-boot-admin.version>2.1.1</spring-boot-admin.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>de.codecentric</groupId>\n            <artifactId>spring-boot-admin-starter-server</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>de.codecentric</groupId>\n                <artifactId>spring-boot-admin-dependencies</artifactId>\n                <version>${spring-boot-admin.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n然后在工程的启动类AdminServerApplication加上@EnableAdminServer注解，开启AdminServer的功能:\n\n```java\npackage com.wuwenze.adminserver;\n\nimport de.codecentric.boot.admin.server.config.EnableAdminServer;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@EnableAdminServer\n@SpringBootApplication\npublic class AdminServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AdminServerApplication.class, args);\n    }\n\n}\n```\n\n指定端口和应用名称：\n\n```yaml\nserver:\n  port: 10086\nspring:\n  application:\n    name: admin-server\n```\n\n### 创建SpringBoot Admin Client\n\n再创建一个Maven项目，核心依赖如下（省略了部分）：\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>de.codecentric</groupId>\n    <artifactId>spring-boot-admin-starter-client</artifactId>\n</dependency>\n```\n\n在配置文件中注册到adminServer中，同时暴露自己的所有actuator端点信息：\n\n```yaml\nserver:\n  port: 10087\nspring:\n  application:\n    name: admin-client\n  boot:\n    admin:\n      client:\n        url: http://localhost:10086\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: '*'\n  endpoint:\n    health:\n      show-details: ALWAYS\n```\n\n启动类无需做其他设置：\n\n```java\npackage com.wuwenze.adminclient;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class AdminClientApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AdminClientApplication.class, args);\n    }\n\n}\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888394-a4534254-7e41-4ab5-8b6b-5b0170b57c52.png#align=left&display=inline&height=200&linkTarget=_blank&originHeight=383&originWidth=1432&size=0&width=746)<br />\n依次启动AdminServerApplication、AdminClientApplication<br />\n通过浏览器访问http://localhost:10086<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888406-b9873800-deed-4228-b7b2-bf6574f26529.png#align=left&display=inline&height=382&linkTarget=_blank&originHeight=731&originWidth=1427&size=0&width=746)\n\n查看内存状态信息：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888411-dbef07f3-b513-4454-b9d1-b2a2c14a7026.png#align=left&display=inline&height=382&linkTarget=_blank&originHeight=731&originWidth=1427&size=0&width=746)<br />\nSpringBean相关的情况：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888451-724934d8-28a9-4fb6-9905-e894ce358631.png#align=left&display=inline&height=382&linkTarget=_blank&originHeight=731&originWidth=1427&size=0&width=746)<br />\n日志级管理：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888417-be2c7320-4ff0-48b6-80c5-6ab0873bd48c.png#align=left&display=inline&height=449&linkTarget=_blank&originHeight=828&originWidth=1377&size=0&width=746)<br />\n还有更多的监控信息，这里就不再一一列举了，自己研究就好。\n\n## 集成注册中心\n\n使用Eureka搭建一个注册中心（其他的也行，这里不表）\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.1.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.wuwenze</groupId>\n    <artifactId>eureka-server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>eureka-server</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Greenwich.RC2</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n        </repository>\n    </repositories>\n\n</project>\n```\n\n注册中心的相关配置，同样也暴露了所有的端点信息：\n\n```yaml\nserver:\n  port: 8761\n\nspring:\n  application:\n    name: eureka-server\n\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka\n    register-with-eureka: false\n    fetch-registry: false\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\n  endpoint:\n    health:\n      show-details: ALWAYS\n```\n\n启动类中加上@EnableEurekaServer注解，开启EurekaServer:\n\n```java\npackage com.wuwenze.euerkaserver;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\n\n@EnableEurekaServer\n@SpringBootApplication\npublic class EuerkaServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(EuerkaServerApplication.class, args);\n    }\n\n}\n```\n\n改造admin-server，加入eureka客户端相关依赖：\n\n```xml\n<properties>\n    <java.version>1.8</java.version>\n    <spring-boot-admin.version>2.1.1</spring-boot-admin.version>\n    <spring-cloud.version>Finchley.SR2</spring-cloud.version>\n</properties>\n\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>de.codecentric</groupId>\n        <artifactId>spring-boot-admin-starter-server</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-dependencies</artifactId>\n            <version>${spring-cloud.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        <dependency>\n            <groupId>de.codecentric</groupId>\n            <artifactId>spring-boot-admin-dependencies</artifactId>\n            <version>${spring-boot-admin.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n再将其注册到Eureka注册中心，同时也暴露所有端点信息：\n\n```yaml\nserver:\n  port: 10086\nspring:\n  application:\n    name: admin-server\n\neureka:\n  client:\n    registryFetchIntervalSeconds: 5\n    service-url:\n      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/\n  instance:\n    leaseRenewalIntervalInSeconds: 10\n    health-check-url-path: /actuator/health\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\n  endpoint:\n    health:\n      show-details: ALWAYS\n```\n\n同时，在启动类中，通过`@EnableDiscoveryClient`开启EurekaClient功能：\n\n```java\npackage com.wuwenze.adminserver;\n\nimport de.codecentric.boot.admin.server.config.EnableAdminServer;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@EnableAdminServer\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class AdminServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AdminServerApplication.class, args);\n    }\n\n}\n```\n\n同理，改造admin-client，将其也注册到Eureka中心去：\n\n```xml\n<properties>\n    <java.version>1.8</java.version>\n    <spring-boot-admin.version>2.0.4</spring-boot-admin.version>\n    <spring-cloud.version>Finchley.SR2</spring-cloud.version>\n</properties>\n\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>de.codecentric</groupId>\n        <artifactId>spring-boot-admin-starter-client</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-dependencies</artifactId>\n            <version>${spring-cloud.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        <dependency>\n            <groupId>de.codecentric</groupId>\n            <artifactId>spring-boot-admin-dependencies</artifactId>\n            <version>${spring-boot-admin.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n相关的配置文件、启动类：\n\n```yaml\nserver:\n  port: 8762\nspring:\n  application:\n    name: admin-client\neureka:\n  instance:\n    leaseRenewalIntervalInSeconds: 10\n    health-check-url-path: /actuator/health\n\n  client:\n    registryFetchIntervalSeconds: 5\n    service-url:\n      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\n  endpoint:\n    health:\n      show-details: ALWAYS\n```\n\n```java\npackage com.wuwenze.adminclient;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class AdminClientApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AdminClientApplication.class, args);\n    }\n\n}\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888414-ba42bdf5-7c1b-4dde-92e3-36be37e90f0c.png#align=left&display=inline&height=213&linkTarget=_blank&originHeight=406&originWidth=1424&size=0&width=746)<br />\n如上图所示，依次启动EurekaServerApplication、AdminServerApplication、AdminClientApplication:\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888424-cbe37e4b-192d-401d-875a-10bff3e39a3e.png#align=left&display=inline&height=382&linkTarget=_blank&originHeight=731&originWidth=1427&size=0&width=746)<br />\n此时可以看到，相关的服务已经注册到Eureka中，并且在SpringBoot Admin中已经上线了。<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888462-47fc7308-97b5-47e1-96fb-b20f4053128f.png#align=left&display=inline&height=382&linkTarget=_blank&originHeight=731&originWidth=1427&size=0&width=746)\n\n## 基于Spring Security的授权验证\n\n默认情况下，SpringBoot Admin处于裸奔的状态，这显然是不太安全的，好在SpringBoot可以很方便的集成Spring Security。\n\n继续改造admin-server工程，在其pom文件中加入相关的依赖：\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n```\n\n为了方便，直接在配置文件中写死登陆用户名密码，同时在服务注册时带上相关的metadata-map信息：\n\n```yaml\nserver:\n  port: 10086\nspring:\n  application:\n    name: admin-server\n  security:\n    user:\n      name: \"admin\"\n      password: \"admin\"\n\neureka:\n  client:\n    registryFetchIntervalSeconds: 5\n    service-url:\n      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/\n  instance:\n    leaseRenewalIntervalInSeconds: 10\n    health-check-url-path: /actuator/health\n    metadata-map:\n      user.name: ${spring.security.user.name}\n      user.password: ${spring.security.user.password}\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\n  endpoint:\n    health:\n      show-details: ALWAYS\n```\n\n通过JavaConfig的方式，实现WebSecurityConfigurerAdapter：\n\n```java\npackage com.wuwenze.adminserver.config;\n\nimport de.codecentric.boot.admin.server.config.AdminServerProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;\n\n@Configuration\npublic class SecuritySecureConfig extends WebSecurityConfigurerAdapter {\n    private String adminContextPath;\n\n    public SecuritySecureConfig(AdminServerProperties adminServerProperties) {\n        this.adminContextPath = adminServerProperties.getContextPath();\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        SavedRequestAwareAuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();\n        successHandler.setTargetUrlParameter(\"redirectTo\");\n\n        http.authorizeRequests()\n                .antMatchers(adminContextPath + \"/assets/**\").permitAll()\n                .antMatchers(adminContextPath + \"/login\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .formLogin().loginPage(adminContextPath + \"/login\").successHandler(successHandler)\n                .and()\n                .logout().logoutUrl(adminContextPath + \"/logout\")\n                .and()\n                .httpBasic()\n                .and()\n                .csrf().disable();\n    }\n}\n```\n\n重启相关服务，再次访问，发现基本的登陆授权认证页面已经出现了：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888448-a30cc384-d9eb-43cd-bfdd-c9b53b76b10d.png#align=left&display=inline&height=382&linkTarget=_blank&originHeight=731&originWidth=1427&size=0&width=746)\n\n## 集成自动邮件预警\n\n作为一个运维监控平台，邮件预警的功能是必不可少的，集成起来也是相当简单，咱们继续改造admin-server:\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-mail</artifactId>\n</dependency>\n```\n\n完善配置文件，加入邮件服务器的相关配置信息：\n\n```yaml\nserver:\n  port: 10086\nspring:\n  application:\n    name: admin-server\n  security:\n    user:\n      name: \"admin\"\n      password: \"admin\"\n  mail:\n    host: smtp.163.com\n    username: xxxxxxxxxxx\n    password: xxxxxxxxxxxx\n    properties:\n      mail.debug: false  \n      mail.smtp.auth: true\n      mail.smtp.port: 465\n      mail.smtp.ssl.enable: true\n      mail.smtp.ssl.socketFactory: sf  \n  boot:\n    admin:\n      notify:\n        mail:\n          to: 877037201@qq.com\n          from: 17311223306@163.com\n\neureka:\n  client:\n    registryFetchIntervalSeconds: 5\n    service-url:\n      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/\n  instance:\n    leaseRenewalIntervalInSeconds: 10\n    health-check-url-path: /actuator/health\n    metadata-map:\n      user.name: ${spring.security.user.name}\n      user.password: ${spring.security.user.password}\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\n  endpoint:\n    health:\n      show-details: ALWAYS\n```\n\n完成相关配置后，重启相关服务，然后试着将admin-client手动下线，在配置的收件箱中即会收到相关的邮件预警信息：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888472-f6f52175-8b7e-4de6-b381-7d4c7cb3fc9f.png#align=left&display=inline&height=544&linkTarget=_blank&originHeight=821&originWidth=1126&size=0&width=746)\n\n同时，在SpringBoot Admin监控界面中，相关的服务也已经下线了：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888474-a0c2102d-4b44-46b6-9204-f20b01a9fc68.png#align=left&display=inline&height=429&linkTarget=_blank&originHeight=663&originWidth=1154&size=0&width=746)\n\n有关SpringBoot Admin的相关功能先介绍到这里，还有更多实用的配置就不详解了。\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2019-1-11 13:31:36</p><p>tags: [&quot;Spring&quot;,&quot;SpringBoot&quot;]</p><hr /><p>SpringBoot Admin用于管理和监控SpringBoot应用程序。 应用程序作为Spring Boot Admin Client向为Spring Boot Admin Server注册（通过HTTP）或使用SpringCloud注册中心（例如Eureka，Consul）发现。</p><p><br /></p><p>其常见的功能如下：</p><p><br /></p><ul><li>显示健康状况</li></ul><ul><li>显示详细信息，例如</li></ul><ul data-lake-indent=\"1\"><li>JVM和内存指标</li></ul><ul data-lake-indent=\"1\"><li>micrometer.io指标</li></ul><ul data-lake-indent=\"1\"><li>数据源指标</li></ul><ul data-lake-indent=\"1\"><li>缓存指标</li></ul><ul><li>显示构建信息编号</li></ul><ul><li>关注并下载日志文件</li></ul><ul><li>查看jvm系统和环境属性</li></ul><ul><li>查看Spring Boot配置属性</li></ul><ul><li>支持Spring Cloud的postable / env-和/ refresh-endpoint</li></ul><ul><li>轻松的日志级管理</li></ul><ul><li>与JMX-beans交互</li></ul><ul><li>查看线程转储</li></ul><ul><li>查看http跟踪</li></ul><ul><li>查看auditevents</li></ul><ul><li>查看http-endpoints</li></ul><ul><li>查看计划任务</li></ul><ul><li>查看和删除活动会话（使用spring-session）</li></ul><ul><li>查看Flyway / Liquibase数据库迁移</li></ul><ul><li>下载heapdump文件</li></ul><ul><li>状态变更通知（通过电子邮件，Slack，Hipchat，......）</li></ul><ul><li>状态更改的事件日志（非持久性）</li></ul><h2 id=\"85d22db7\">开始使用</h2><p><br /></p><h3 id=\"918b3b9b\">创建SpringBoot AdminServer</h3><p><br /></p><p>建立标准的Maven项目，其完整的依赖如下：</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;com.wuwenze&lt;/groupId&gt;\n    &lt;artifactId&gt;admin-server&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;admin-server&lt;/name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n        &lt;spring-boot-admin.version&gt;2.1.1&lt;/spring-boot-admin.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;de.codecentric&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-admin-starter-server&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;de.codecentric&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-admin-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-boot-admin.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;</code></pre><p><br /></p><p>然后在工程的启动类AdminServerApplication加上@EnableAdminServer注解，开启AdminServer的功能:</p><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.adminserver;\n\nimport de.codecentric.boot.admin.server.config.EnableAdminServer;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@EnableAdminServer\n@SpringBootApplication\npublic class AdminServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AdminServerApplication.class, args);\n    }\n\n}</code></pre><p><br /></p><p>指定端口和应用名称：</p><p><br /></p><pre data-lang=\"yaml\"><code>server:\n  port: 10086\nspring:\n  application:\n    name: admin-server</code></pre><p><br /></p><h3 id=\"fd3e3217\">创建SpringBoot Admin Client</h3><p><br /></p><p>再创建一个Maven项目，核心依赖如下（省略了部分）：</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;de.codecentric&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-admin-starter-client&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre><p><br /></p><p>在配置文件中注册到adminServer中，同时暴露自己的所有actuator端点信息：</p><p><br /></p><pre data-lang=\"yaml\"><code>server:\n  port: 10087\nspring:\n  application:\n    name: admin-client\n  boot:\n    admin:\n      client:\n        url: http://localhost:10086\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: '*'\n  endpoint:\n    health:\n      show-details: ALWAYS</code></pre><p><br /></p><p>启动类无需做其他设置：</p><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.adminclient;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class AdminClientApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AdminClientApplication.class, args);\n    }\n\n}</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888394-a4534254-7e41-4ab5-8b6b-5b0170b57c52.png#align=left&amp;display=inline&amp;height=200&amp;linkTarget=_blank&amp;originHeight=383&amp;originWidth=1432&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n依次启动AdminServerApplication、AdminClientApplication<br />\n通过浏览器访问http://localhost:10086<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888406-b9873800-deed-4228-b7b2-bf6574f26529.png#align=left&amp;display=inline&amp;height=382&amp;linkTarget=_blank&amp;originHeight=731&amp;originWidth=1427&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>查看内存状态信息：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888411-dbef07f3-b513-4454-b9d1-b2a2c14a7026.png#align=left&amp;display=inline&amp;height=382&amp;linkTarget=_blank&amp;originHeight=731&amp;originWidth=1427&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\nSpringBean相关的情况：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888451-724934d8-28a9-4fb6-9905-e894ce358631.png#align=left&amp;display=inline&amp;height=382&amp;linkTarget=_blank&amp;originHeight=731&amp;originWidth=1427&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n日志级管理：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888417-be2c7320-4ff0-48b6-80c5-6ab0873bd48c.png#align=left&amp;display=inline&amp;height=449&amp;linkTarget=_blank&amp;originHeight=828&amp;originWidth=1377&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n还有更多的监控信息，这里就不再一一列举了，自己研究就好。</p><p><br /></p><h2 id=\"a842728d\">集成注册中心</h2><p><br /></p><p>使用Eureka搭建一个注册中心（其他的也行，这里不表）</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;com.wuwenze&lt;/groupId&gt;\n    &lt;artifactId&gt;eureka-server&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;eureka-server&lt;/name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;Greenwich.RC2&lt;/spring-cloud.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n    &lt;repositories&gt;\n        &lt;repository&gt;\n            &lt;id&gt;spring-milestones&lt;/id&gt;\n            &lt;name&gt;Spring Milestones&lt;/name&gt;\n            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;\n        &lt;/repository&gt;\n    &lt;/repositories&gt;\n\n&lt;/project&gt;</code></pre><p><br /></p><p>注册中心的相关配置，同样也暴露了所有的端点信息：</p><p><br /></p><pre data-lang=\"yaml\"><code>server:\n  port: 8761\n\nspring:\n  application:\n    name: eureka-server\n\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka\n    register-with-eureka: false\n    fetch-registry: false\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: &quot;*&quot;\n  endpoint:\n    health:\n      show-details: ALWAYS</code></pre><p><br /></p><p>启动类中加上@EnableEurekaServer注解，开启EurekaServer:</p><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.euerkaserver;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\n\n@EnableEurekaServer\n@SpringBootApplication\npublic class EuerkaServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(EuerkaServerApplication.class, args);\n    }\n\n}</code></pre><p><br /></p><p>改造admin-server，加入eureka客户端相关依赖：</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;properties&gt;\n    &lt;java.version&gt;1.8&lt;/java.version&gt;\n    &lt;spring-boot-admin.version&gt;2.1.1&lt;/spring-boot-admin.version&gt;\n    &lt;spring-cloud.version&gt;Finchley.SR2&lt;/spring-cloud.version&gt;\n&lt;/properties&gt;\n\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;de.codecentric&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-admin-starter-server&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;de.codecentric&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-admin-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring-boot-admin.version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;</code></pre><p><br /></p><p>再将其注册到Eureka注册中心，同时也暴露所有端点信息：</p><p><br /></p><pre data-lang=\"yaml\"><code>server:\n  port: 10086\nspring:\n  application:\n    name: admin-server\n\neureka:\n  client:\n    registryFetchIntervalSeconds: 5\n    service-url:\n      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/\n  instance:\n    leaseRenewalIntervalInSeconds: 10\n    health-check-url-path: /actuator/health\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: &quot;*&quot;\n  endpoint:\n    health:\n      show-details: ALWAYS</code></pre><p><br /></p><p>同时，在启动类中，通过<code>@EnableDiscoveryClient</code>开启EurekaClient功能：</p><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.adminserver;\n\nimport de.codecentric.boot.admin.server.config.EnableAdminServer;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@EnableAdminServer\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class AdminServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AdminServerApplication.class, args);\n    }\n\n}</code></pre><p><br /></p><p>同理，改造admin-client，将其也注册到Eureka中心去：</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;properties&gt;\n    &lt;java.version&gt;1.8&lt;/java.version&gt;\n    &lt;spring-boot-admin.version&gt;2.0.4&lt;/spring-boot-admin.version&gt;\n    &lt;spring-cloud.version&gt;Finchley.SR2&lt;/spring-cloud.version&gt;\n&lt;/properties&gt;\n\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;de.codecentric&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-admin-starter-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;de.codecentric&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-admin-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring-boot-admin.version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;</code></pre><p><br /></p><p>相关的配置文件、启动类：</p><p><br /></p><pre data-lang=\"yaml\"><code>server:\n  port: 8762\nspring:\n  application:\n    name: admin-client\neureka:\n  instance:\n    leaseRenewalIntervalInSeconds: 10\n    health-check-url-path: /actuator/health\n\n  client:\n    registryFetchIntervalSeconds: 5\n    service-url:\n      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: &quot;*&quot;\n  endpoint:\n    health:\n      show-details: ALWAYS</code></pre><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.adminclient;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class AdminClientApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AdminClientApplication.class, args);\n    }\n\n}</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888414-ba42bdf5-7c1b-4dde-92e3-36be37e90f0c.png#align=left&amp;display=inline&amp;height=213&amp;linkTarget=_blank&amp;originHeight=406&amp;originWidth=1424&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n如上图所示，依次启动EurekaServerApplication、AdminServerApplication、AdminClientApplication:</p><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888424-cbe37e4b-192d-401d-875a-10bff3e39a3e.png#align=left&amp;display=inline&amp;height=382&amp;linkTarget=_blank&amp;originHeight=731&amp;originWidth=1427&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n此时可以看到，相关的服务已经注册到Eureka中，并且在SpringBoot Admin中已经上线了。<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888462-47fc7308-97b5-47e1-96fb-b20f4053128f.png#align=left&amp;display=inline&amp;height=382&amp;linkTarget=_blank&amp;originHeight=731&amp;originWidth=1427&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"456e7572\">基于Spring Security的授权验证</h2><p><br /></p><p>默认情况下，SpringBoot Admin处于裸奔的状态，这显然是不太安全的，好在SpringBoot可以很方便的集成Spring Security。</p><p><br /></p><p>继续改造admin-server工程，在其pom文件中加入相关的依赖：</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre><p><br /></p><p>为了方便，直接在配置文件中写死登陆用户名密码，同时在服务注册时带上相关的metadata-map信息：</p><p><br /></p><pre data-lang=\"yaml\"><code>server:\n  port: 10086\nspring:\n  application:\n    name: admin-server\n  security:\n    user:\n      name: &quot;admin&quot;\n      password: &quot;admin&quot;\n\neureka:\n  client:\n    registryFetchIntervalSeconds: 5\n    service-url:\n      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/\n  instance:\n    leaseRenewalIntervalInSeconds: 10\n    health-check-url-path: /actuator/health\n    metadata-map:\n      user.name: ${spring.security.user.name}\n      user.password: ${spring.security.user.password}\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: &quot;*&quot;\n  endpoint:\n    health:\n      show-details: ALWAYS</code></pre><p><br /></p><p>通过JavaConfig的方式，实现WebSecurityConfigurerAdapter：</p><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.adminserver.config;\n\nimport de.codecentric.boot.admin.server.config.AdminServerProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;\n\n@Configuration\npublic class SecuritySecureConfig extends WebSecurityConfigurerAdapter {\n    private String adminContextPath;\n\n    public SecuritySecureConfig(AdminServerProperties adminServerProperties) {\n        this.adminContextPath = adminServerProperties.getContextPath();\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        SavedRequestAwareAuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();\n        successHandler.setTargetUrlParameter(&quot;redirectTo&quot;);\n\n        http.authorizeRequests()\n                .antMatchers(adminContextPath + &quot;/assets/**&quot;).permitAll()\n                .antMatchers(adminContextPath + &quot;/login&quot;).permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .formLogin().loginPage(adminContextPath + &quot;/login&quot;).successHandler(successHandler)\n                .and()\n                .logout().logoutUrl(adminContextPath + &quot;/logout&quot;)\n                .and()\n                .httpBasic()\n                .and()\n                .csrf().disable();\n    }\n}</code></pre><p><br /></p><p>重启相关服务，再次访问，发现基本的登陆授权认证页面已经出现了：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888448-a30cc384-d9eb-43cd-bfdd-c9b53b76b10d.png#align=left&amp;display=inline&amp;height=382&amp;linkTarget=_blank&amp;originHeight=731&amp;originWidth=1427&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"6164cc06\">集成自动邮件预警</h2><p><br /></p><p>作为一个运维监控平台，邮件预警的功能是必不可少的，集成起来也是相当简单，咱们继续改造admin-server:</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre><p><br /></p><p>完善配置文件，加入邮件服务器的相关配置信息：</p><p><br /></p><pre data-lang=\"yaml\"><code>server:\n  port: 10086\nspring:\n  application:\n    name: admin-server\n  security:\n    user:\n      name: &quot;admin&quot;\n      password: &quot;admin&quot;\n  mail:\n    host: smtp.163.com\n    username: xxxxxxxxxxx\n    password: xxxxxxxxxxxx\n    properties:\n      mail.debug: false  \n      mail.smtp.auth: true\n      mail.smtp.port: 465\n      mail.smtp.ssl.enable: true\n      mail.smtp.ssl.socketFactory: sf  \n  boot:\n    admin:\n      notify:\n        mail:\n          to: 877037201@qq.com\n          from: 17311223306@163.com\n\neureka:\n  client:\n    registryFetchIntervalSeconds: 5\n    service-url:\n      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/\n  instance:\n    leaseRenewalIntervalInSeconds: 10\n    health-check-url-path: /actuator/health\n    metadata-map:\n      user.name: ${spring.security.user.name}\n      user.password: ${spring.security.user.password}\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: &quot;*&quot;\n  endpoint:\n    health:\n      show-details: ALWAYS</code></pre><p><br /></p><p>完成相关配置后，重启相关服务，然后试着将admin-client手动下线，在配置的收件箱中即会收到相关的邮件预警信息：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888472-f6f52175-8b7e-4de6-b381-7d4c7cb3fc9f.png#align=left&amp;display=inline&amp;height=544&amp;linkTarget=_blank&amp;originHeight=821&amp;originWidth=1126&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>同时，在SpringBoot Admin监控界面中，相关的服务也已经下线了：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005888474-a0c2102d-4b44-46b6-9204-f20b01a9fc68.png#align=left&amp;display=inline&amp;height=429&amp;linkTarget=_blank&amp;originHeight=663&amp;originWidth=1154&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>有关SpringBoot Admin的相关功能先介绍到这里，还有更多实用的配置就不详解了。</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:24:53.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:24:04.000Z",
    "updated_at": "2019-02-01T07:24:53.000Z",
    "published_at": "2019-02-01T07:24:53.000Z",
    "first_published_at": "2019-02-01T07:24:53.000Z",
    "word_count": 2977,
    "cover": "",
    "description": "date: 2019-1-11 13:31:36tags: [&quot;Spring&quot;,&quot;SpringBoot&quot;]SpringBoot Admin用于管理和监控SpringBoot应用程序。 应用程序作为Spring Boot Admin Client向为Spr...",
    "custom_description": "date: 2019-1-11 13:31:36tags: [&quot;Spring&quot;,&quot;SpringBoot&quot;]SpringBoot Admin用于管理和监控SpringBoot应用程序。 应用程序作为Spring Boot Admin Client向为Spr...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224387,
    "slug": "spring-cacheable-annotation",
    "title": "Spring Cacheable 注解相关说明",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-09-14 15:16:38<br />tags: [\"Spring\"]\n---\n关于`@Cacheable`注解的作用不做过多说明，文本主要针对该注解的key自定义策略规则提供一些示例。\n\n## [Cacheable ]()\n\n| 属性名 | 必填? | 描述 |\n| --- | --- | :--- |\n| value | 必填 | 缓存的命名空间 |\n| key | 可选 | 指定一个唯一的key（在缓存命名空间中），使用SpEL表达式 |\n| condition | 可选 | 限定条件，哪种情况使用缓存，使用SpEL表达式 |\n| unless | 可选 | 限定条件，哪种情况下不使用缓存，使用SpEL表达式 |\n\n## key\n\n默认情况下，key属性可以不填，Spring会按照默认策略去生成缓存相关的key（这里不细究了）<br />\n该属性在自定义时，通常使用`SpEL表达式`来声明，以下是一些常见的例子：\n\n通过方法参数作为key：\n\n```java\n@Cacheable(value = \"findByUserIdCached\", key = \"#userId\")\npublic User findByUserIdCached(Integer userId) {\n    return userDao.findByUserId(userId);\n}\n\n// 还有一种写法：#p0 表示第一个参数\n@Cacheable(value = \"findByUserIdCached\", key = \"#p0\")\npublic User findByUserIdCached(Integer userId) {\n    return userDao.findByUserId(userId);\n}\n\n\n@Cacheable(value = \"findByUserIdCached\", key = \"#user.id\")\n// @Cacheable(value = \"findByUserIdCached\", key = \"#p0.id\")\npublic User findByUserIdCached(User user) {\n    return userDao.findByUserId(user.getId());\n}\n\n// 多个参数拼接\n@Cacheable(value = \"findByUsernameAndTypeCached\", key = \"#username + '_' + #type\")\n// @Cacheable(value = \"findByUsernameAndTypeCached\", key = \"#p0 + '_' + #p1\")\npublic User findByUsernameAndTypeCached(String username, Integer type) {\n    return null;\n}\n\n// 复杂参数（数组）\n@Cacheable(value = \"findByUserIdsCached\", key = \"#userIds[0] + ''\")\n// @Cacheable(value = \"findByUserIdsCached\", key = \"#p0[0] + ''\")\npublic User findByUserIdsCached(Integer[] userIds) {\n    return null;\n}\n```\n\n除此之外，Spring还提供了一个root对象：。\n\n| 属性 | 描述 | 示例 |\n| --- | --- | :--- |\n| methodName | 当前方法名 | #root.methodName |\n| method | 当前方法 | #root.method.name |\n| target | 当前被调用的对象 | #root.target |\n| targetClass | 当前被调用的对象的class | #root.targetClass |\n| args | 当前方法参数数组 | #root.args[0] |\n| caches | 当前被调用的方法使用的Cache | #root.caches[0].name |\n\n\n```java\n@Cacheable(value = \"findByUserIdCached\", key = \"#root.methodName + '_' + #user.id\")\npublic User findByUserIdCached(User user) {\n    return userDao.findByUserId(user.getId());\n}\n\n// 当然，也可以通过root对象调用当前类的public方法\nclass TestService {\n\n    @Cacheable(value = \"findByUserIdCached\", key = \"#root.target.getName() + '_' + #user.id\")\n    public User findByUserIdCached(User user) {\n        return userDao.findByUserId(user.getId());\n    }\n\n    public String getName() {\n        return \"test\";\n    }\n}\n```\n\n## condition && unless\n\n此外，condition以及unless都是可以通过配置SpEL表达式来完成的，最终需要一个条件表达式，如：\n\n```java\n// 只有当type为偶数时，才使用缓存。\n@Cacheable(value = \"findByUsernameAndTypeCached\", key = \"#username + '_' + #type\", condition = \"#type % 2 == 0\")\npublic User findByUsernameAndTypeCached(String username, Integer type) {\n    return null;\n}\n\n// 同理，只有当type为偶数时，才不使用缓存\n@Cacheable(value = \"findByUsernameAndTypeCached\", key = \"#username + '_' + #type\", unless = \"#type % 2 == 0\")\npublic User findByUsernameAndTypeCached(String username, Integer type) {\n    return null;\n}\n```\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-09-14 15:16:38</p><p>tags: [&quot;Spring&quot;]</p><hr /><p>关于<code>@Cacheable</code>注解的作用不做过多说明，文本主要针对该注解的key自定义策略规则提供一些示例。</p><p><br /></p><h2 id=\"ff24ecc6\"><a target=\"_blank\">Cacheable </a></h2><p><br /></p><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"240\"></col><col width=\"240\"></col><col width=\"241\"></col></colgroup><tbody><tr><td>属性名</td><td>必填?</td><td style=\"text-align: left;\">描述</td></tr></tbody><tbody><tr><td>value</td><td>必填</td><td style=\"text-align: left;\">缓存的命名空间</td></tr><tr><td>key</td><td>可选</td><td style=\"text-align: left;\">指定一个唯一的key（在缓存命名空间中），使用SpEL表达式</td></tr><tr><td>condition</td><td>可选</td><td style=\"text-align: left;\">限定条件，哪种情况使用缓存，使用SpEL表达式</td></tr><tr><td>unless</td><td>可选</td><td style=\"text-align: left;\">限定条件，哪种情况下不使用缓存，使用SpEL表达式</td></tr></tbody></table><h2 id=\"key\">key</h2><p><br /></p><p>默认情况下，key属性可以不填，Spring会按照默认策略去生成缓存相关的key（这里不细究了）<br />\n该属性在自定义时，通常使用<code>SpEL表达式</code>来声明，以下是一些常见的例子：</p><p><br /></p><p>通过方法参数作为key：</p><p><br /></p><pre data-lang=\"java\"><code>@Cacheable(value = &quot;findByUserIdCached&quot;, key = &quot;#userId&quot;)\npublic User findByUserIdCached(Integer userId) {\n    return userDao.findByUserId(userId);\n}\n\n// 还有一种写法：#p0 表示第一个参数\n@Cacheable(value = &quot;findByUserIdCached&quot;, key = &quot;#p0&quot;)\npublic User findByUserIdCached(Integer userId) {\n    return userDao.findByUserId(userId);\n}\n\n\n@Cacheable(value = &quot;findByUserIdCached&quot;, key = &quot;#user.id&quot;)\n// @Cacheable(value = &quot;findByUserIdCached&quot;, key = &quot;#p0.id&quot;)\npublic User findByUserIdCached(User user) {\n    return userDao.findByUserId(user.getId());\n}\n\n// 多个参数拼接\n@Cacheable(value = &quot;findByUsernameAndTypeCached&quot;, key = &quot;#username + '_' + #type&quot;)\n// @Cacheable(value = &quot;findByUsernameAndTypeCached&quot;, key = &quot;#p0 + '_' + #p1&quot;)\npublic User findByUsernameAndTypeCached(String username, Integer type) {\n    return null;\n}\n\n// 复杂参数（数组）\n@Cacheable(value = &quot;findByUserIdsCached&quot;, key = &quot;#userIds[0] + ''&quot;)\n// @Cacheable(value = &quot;findByUserIdsCached&quot;, key = &quot;#p0[0] + ''&quot;)\npublic User findByUserIdsCached(Integer[] userIds) {\n    return null;\n}</code></pre><p><br /></p><p>除此之外，Spring还提供了一个root对象：。</p><p><br /></p><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"240\"></col><col width=\"240\"></col><col width=\"241\"></col></colgroup><tbody><tr><td>属性</td><td>描述</td><td style=\"text-align: left;\">示例</td></tr></tbody><tbody><tr><td>methodName</td><td>当前方法名</td><td style=\"text-align: left;\">#root.methodName</td></tr><tr><td>method</td><td>当前方法</td><td style=\"text-align: left;\">#root.method.name</td></tr><tr><td>target</td><td>当前被调用的对象</td><td style=\"text-align: left;\">#root.target</td></tr><tr><td>targetClass</td><td>当前被调用的对象的class</td><td style=\"text-align: left;\">#root.targetClass</td></tr><tr><td>args</td><td>当前方法参数数组</td><td style=\"text-align: left;\">#root.args[0]</td></tr><tr><td>caches</td><td>当前被调用的方法使用的Cache</td><td style=\"text-align: left;\">#root.caches[0].name</td></tr></tbody></table><p><br /></p><pre data-lang=\"java\"><code>@Cacheable(value = &quot;findByUserIdCached&quot;, key = &quot;#root.methodName + '_' + #user.id&quot;)\npublic User findByUserIdCached(User user) {\n    return userDao.findByUserId(user.getId());\n}\n\n// 当然，也可以通过root对象调用当前类的public方法\nclass TestService {\n\n    @Cacheable(value = &quot;findByUserIdCached&quot;, key = &quot;#root.target.getName() + '_' + #user.id&quot;)\n    public User findByUserIdCached(User user) {\n        return userDao.findByUserId(user.getId());\n    }\n\n    public String getName() {\n        return &quot;test&quot;;\n    }\n}</code></pre><p><br /></p><h2 id=\"95cd2b48\">condition &amp;&amp; unless</h2><p><br /></p><p>此外，condition以及unless都是可以通过配置SpEL表达式来完成的，最终需要一个条件表达式，如：</p><p><br /></p><pre data-lang=\"java\"><code>// 只有当type为偶数时，才使用缓存。\n@Cacheable(value = &quot;findByUsernameAndTypeCached&quot;, key = &quot;#username + '_' + #type&quot;, condition = &quot;#type % 2 == 0&quot;)\npublic User findByUsernameAndTypeCached(String username, Integer type) {\n    return null;\n}\n\n// 同理，只有当type为偶数时，才不使用缓存\n@Cacheable(value = &quot;findByUsernameAndTypeCached&quot;, key = &quot;#username + '_' + #type&quot;, unless = &quot;#type % 2 == 0&quot;)\npublic User findByUsernameAndTypeCached(String username, Integer type) {\n    return null;\n}</code></pre><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:23:58.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:23:09.000Z",
    "updated_at": "2019-02-01T07:23:58.000Z",
    "published_at": "2019-02-01T07:23:58.000Z",
    "first_published_at": "2019-02-01T07:23:58.000Z",
    "word_count": 679,
    "cover": "",
    "description": "date: 2018-09-14 15:16:38tags: [&quot;Spring&quot;]关于@Cacheable注解的作用不做过多说明，文本主要针对该注解的key自定义策略规则提供一些示例。Cacheable 属性名必填?描述value必填缓存的命名空间key可选指定一个唯一的k...",
    "custom_description": "date: 2018-09-14 15:16:38tags: [&quot;Spring&quot;]关于@Cacheable注解的作用不做过多说明，文本主要针对该注解的key自定义策略规则提供一些示例。Cacheable 属性名必填?描述value必填缓存的命名空间key可选指定一个唯一的k...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224383,
    "slug": "spring-boot-webflux",
    "title": "Spring5响应式WEB编程-Webflux示例",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-12-17 21:14:28<br />tags: [\"SpringBoot\",\"WebFlux\"]\n---\n## Spring WebFlux简介\n\n`Spring WebFlux`是随`Spring 5`推出的响应式Web框架：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005769192-5270be07-9122-4a81-89fa-ee594cc3b8f1.png#align=left&display=inline&height=381&linkTarget=_blank&originHeight=645&originWidth=1264&size=0&width=746)<br />\n（左侧为基于`spring-webmvc`的技术栈，右侧为基于`spring-webflux`的技术栈）\n\n### 服务端技术栈\n\n* `Spring WebFlux`是基于响应式流的，因此可以用来建立异步的、非阻塞的、事件驱动的服务。它采用Reactor作为首选的响应式流的实现库，不过也提供了对`RxJava`的支持；\n* 由于响应式编程的特性，Spring WebFlux和Reactor底层需要支持异步的运行环境，比如`Netty`和`Undertow`；也可以运行在支持异步I/O的Servlet 3.1的容器之上，比如Tomcat（8.0.23及以上）和Jetty（9.0.4及以上）；\n* 从图的纵向上看，spring-webflux上层支持两种开发模式：\n  * 类似于Spring WebMVC的基于注解（`@Controller`、`@RequestMapping`）的开发模式；\n  * Java 8 `lambda` 风格的函数式开发模式；\n* 响应式的`WebSocket`服务端开发；\n### 客户端技术栈\n\n此外，Spring WebFlux也提供了一个响应式的Http客户端API `WebClient`。它可以用函数式的方式异步非阻塞地发起Http请求并处理响应。\n\nWebClient可以看做是响应式的`RestTemplate`，相对于后者来说，他的特点是：\n\n* 是非阻塞的，可以基于少量的线程处理更高的并发；\n* 可以使用Java 8 `lambda`表达式；\n* 支持异步的同时也可以支持同步的使用方式；\n* 可以通过数据流的方式与服务端进行双向通信；\n* 响应式的`WebSocket`客户端API开发；\n## 通过Spring Boot实战WebFlux\n\n本文的例子很简单，先直接使用`Spring Initializr`构建一个简单的`SpringBoot`项目。\n\n### 核心依赖\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005773034-7698c336-6306-4bf4-8e5f-f7b6f370419c.png#align=left&display=inline&height=421&linkTarget=_blank&originHeight=586&originWidth=1039&size=0&width=746)\n\n对应的完整POM文件如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.1.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.wuwenze</groupId>\n    <artifactId>spring-webflux</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring-webflux</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-webflux</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.projectreactor</groupId>\n            <artifactId>reactor-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n### Hello WebFlux\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005771873-f76cac33-5c10-4d56-abe2-647749b9b76b.png#align=left&display=inline&height=654&linkTarget=_blank&originHeight=1055&originWidth=1204&size=0&width=746)\n\n从语法上来看，与传统的SpringMVC看起来还是相差无几，启动应用后，发现应用启动于`Netty`之上。\n\nWebFlux提供了与之前WebMVC相同的一套注解来定义请求的处理，使得Spring使用者迁移到响应式开发方式的过程变得异常轻松。\n\n整个技术栈从命令式的、同步阻塞的【`Spring-WebMVC + Servlet + Tomcat`】变成了响应式的、异步非阻塞的【`Spring-WebFlux + Reactor + Netty`】。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005769257-1b5c0b53-99eb-4264-ac41-c18b3241273a.png#align=left&display=inline&height=458&linkTarget=_blank&originHeight=573&originWidth=934&size=0&width=746)\n\n### WebFlux 函数式开发模式\n\n这里还是先来个简单的例子吧，后续再详细讲解：\n\nUserService\n\n```java\npackage com.wuwenze.springwebflux.service;\n\nimport com.google.common.collect.Maps;\nimport com.wuwenze.springwebflux.entity.User;\nimport org.springframework.stereotype.Service;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport java.util.Map;\n\n@Service\npublic class UserService {\n    // key, user\n    private final Map<String, User> _userMock = Maps.newConcurrentMap();\n\n    {\n        _userMock.put(\"key1\", User.builder().id(1).name(\"user1\").build());\n        _userMock.put(\"key2\", User.builder().id(2).name(\"user2\").build());\n        _userMock.put(\"key3\", User.builder().id(3).name(\"user3\").build());\n        _userMock.put(\"key4\", User.builder().id(4).name(\"user4\").build());\n        _userMock.put(\"key5\", User.builder().id(5).name(\"user5\").build());\n    }\n\n    public Flux<User> list() {\n        return Flux.fromIterable(this._userMock.values());\n    }\n\n    public Flux<User> findByKeys(Flux<String> keys) {\n        return keys.flatMap((key) -> Mono.justOrEmpty(this._userMock.get(key)));\n    }\n\n    public Mono<User> getByKey(String key) {\n        return Mono.justOrEmpty(this._userMock.get(key))\n                .switchIfEmpty(Mono.error(new RuntimeException(\"#key = \" + key + \"不存在\")));\n    }\n\n    public Mono<User> saveOrUpdate(User user) {\n        String key = \"key\" + user.getId();\n        return this.save(key, user)\n                .onErrorResume((e) -> {\n                    // 如果存在，说明数据库存在记录，查找并修改\n                    return this.getByKey(key)\n                            .flatMap((originalUser) -> {\n                                originalUser.setName(user.getName());\n                                return this.update(key, originalUser);\n                            });\n                });\n    }\n\n    public Flux<User> saveOrUpdateBatch(Flux<User> users) {\n        return users.doOnNext((user) -> this.saveOrUpdate(user));\n    }\n\n    public Mono<User> remove(String key) {\n        return Mono.justOrEmpty(this._userMock.remove(key));\n    }\n\n    // 模拟数据库新增\n    private Mono<User> save(String key, User user) {\n        if (this._userMock.containsKey(key)) {\n            return Mono.error(new RuntimeException());\n        }\n        this._userMock.put(key, user);\n        return Mono.just(user);\n    }\n\n    // 模拟数据库修改\n    private Mono<User> update(String key, User user) {\n        this._userMock.put(key, user);\n        return Mono.just(user);\n    }\n}\n```\n\nUserController\n\n```java\npackage com.wuwenze.springwebflux.rest;\n\nimport com.wuwenze.springwebflux.entity.User;\nimport com.wuwenze.springwebflux.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.*;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport java.time.Duration;\n\n@RestController\npublic class UserController {\n\n    @Autowired\n    public UserService userService;\n\n    @GetMapping(\"/list\")\n    public Flux<User> list() {\n        return this.userService.list();\n    }\n\n    // 流式响应，数据每延迟2秒，一批一批到达客户端\n    @GetMapping(value = \"/list_stream\", produces = MediaType.APPLICATION_STREAM_JSON_VALUE)\n    public Flux<User> list_stream() {\n        return this.userService.list()\n                .delayElements(Duration.ofSeconds(2));\n    }\n\n    @GetMapping(\"/get/{key}\")\n    public Mono<User> get(@PathVariable String key) {\n        return this.userService.getByKey(key);\n    }\n\n    @PostMapping(\"/save\")\n    public Mono<User> save(@RequestBody User user) {\n        return this.userService.saveOrUpdate(user);\n    }\n\n    @DeleteMapping(\"/remove/{key}\")\n    public Mono<User> remove(@PathVariable String key) {\n        return this.userService.remove(key);\n    }\n}\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/gif/243237/1549005775297-c293e691-52b8-4407-a672-f052c4040975.gif#align=left&display=inline&height=369&linkTarget=_blank&originHeight=369&originWidth=600&size=0&width=600)\n\n上图为/list_stream（流式响应）的测试效果图，其余接口就不贴图了。\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-12-17 21:14:28</p><p>tags: [&quot;SpringBoot&quot;,&quot;WebFlux&quot;]</p><hr /><h2 id=\"c9e46bbc\">Spring WebFlux简介</h2><p><br /></p><p><code>Spring WebFlux</code>是随<code>Spring 5</code>推出的响应式Web框架：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005769192-5270be07-9122-4a81-89fa-ee594cc3b8f1.png#align=left&amp;display=inline&amp;height=381&amp;linkTarget=_blank&amp;originHeight=645&amp;originWidth=1264&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n（左侧为基于<code>spring-webmvc</code>的技术栈，右侧为基于<code>spring-webflux</code>的技术栈）</p><p><br /></p><h3 id=\"e180e373\">服务端技术栈</h3><p><br /></p><ul><li><code>Spring WebFlux</code>是基于响应式流的，因此可以用来建立异步的、非阻塞的、事件驱动的服务。它采用Reactor作为首选的响应式流的实现库，不过也提供了对<code>RxJava</code>的支持；</li></ul><ul><li>由于响应式编程的特性，Spring WebFlux和Reactor底层需要支持异步的运行环境，比如<code>Netty</code>和<code>Undertow</code>；也可以运行在支持异步I/O的Servlet 3.1的容器之上，比如Tomcat（8.0.23及以上）和Jetty（9.0.4及以上）；</li></ul><ul><li>从图的纵向上看，spring-webflux上层支持两种开发模式：</li></ul><ul data-lake-indent=\"1\"><li>类似于Spring WebMVC的基于注解（<code>@Controller</code>、<code>@RequestMapping</code>）的开发模式；</li></ul><ul data-lake-indent=\"1\"><li>Java 8 <code>lambda</code> 风格的函数式开发模式；</li></ul><ul><li>响应式的<code>WebSocket</code>服务端开发；</li></ul><h3 id=\"2300b4d4\">客户端技术栈</h3><p><br /></p><p>此外，Spring WebFlux也提供了一个响应式的Http客户端API <code>WebClient</code>。它可以用函数式的方式异步非阻塞地发起Http请求并处理响应。</p><p><br /></p><p>WebClient可以看做是响应式的<code>RestTemplate</code>，相对于后者来说，他的特点是：</p><p><br /></p><ul><li>是非阻塞的，可以基于少量的线程处理更高的并发；</li></ul><ul><li>可以使用Java 8 <code>lambda</code>表达式；</li></ul><ul><li>支持异步的同时也可以支持同步的使用方式；</li></ul><ul><li>可以通过数据流的方式与服务端进行双向通信；</li></ul><ul><li>响应式的<code>WebSocket</code>客户端API开发；</li></ul><h2 id=\"bd7b754a\">通过Spring Boot实战WebFlux</h2><p><br /></p><p>本文的例子很简单，先直接使用<code>Spring Initializr</code>构建一个简单的<code>SpringBoot</code>项目。</p><p><br /></p><h3 id=\"39f643c3\">核心依赖</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005773034-7698c336-6306-4bf4-8e5f-f7b6f370419c.png#align=left&amp;display=inline&amp;height=421&amp;linkTarget=_blank&amp;originHeight=586&amp;originWidth=1039&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>对应的完整POM文件如下：</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;com.wuwenze&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-webflux&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;spring-webflux&lt;/name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.projectreactor&lt;/groupId&gt;\n            &lt;artifactId&gt;reactor-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;</code></pre><p><br /></p><h3 id=\"63666d2b\">Hello WebFlux</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005771873-f76cac33-5c10-4d56-abe2-647749b9b76b.png#align=left&amp;display=inline&amp;height=654&amp;linkTarget=_blank&amp;originHeight=1055&amp;originWidth=1204&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>从语法上来看，与传统的SpringMVC看起来还是相差无几，启动应用后，发现应用启动于<code>Netty</code>之上。</p><p><br /></p><p>WebFlux提供了与之前WebMVC相同的一套注解来定义请求的处理，使得Spring使用者迁移到响应式开发方式的过程变得异常轻松。</p><p><br /></p><p>整个技术栈从命令式的、同步阻塞的【<code>Spring-WebMVC + Servlet + Tomcat</code>】变成了响应式的、异步非阻塞的【<code>Spring-WebFlux + Reactor + Netty</code>】。</p><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005769257-1b5c0b53-99eb-4264-ac41-c18b3241273a.png#align=left&amp;display=inline&amp;height=458&amp;linkTarget=_blank&amp;originHeight=573&amp;originWidth=934&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"6b6566b5\">WebFlux 函数式开发模式</h3><p><br /></p><p>这里还是先来个简单的例子吧，后续再详细讲解：</p><p><br /></p><p>UserService</p><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.springwebflux.service;\n\nimport com.google.common.collect.Maps;\nimport com.wuwenze.springwebflux.entity.User;\nimport org.springframework.stereotype.Service;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport java.util.Map;\n\n@Service\npublic class UserService {\n    // key, user\n    private final Map&lt;String, User&gt; _userMock = Maps.newConcurrentMap();\n\n    {\n        _userMock.put(&quot;key1&quot;, User.builder().id(1).name(&quot;user1&quot;).build());\n        _userMock.put(&quot;key2&quot;, User.builder().id(2).name(&quot;user2&quot;).build());\n        _userMock.put(&quot;key3&quot;, User.builder().id(3).name(&quot;user3&quot;).build());\n        _userMock.put(&quot;key4&quot;, User.builder().id(4).name(&quot;user4&quot;).build());\n        _userMock.put(&quot;key5&quot;, User.builder().id(5).name(&quot;user5&quot;).build());\n    }\n\n    public Flux&lt;User&gt; list() {\n        return Flux.fromIterable(this._userMock.values());\n    }\n\n    public Flux&lt;User&gt; findByKeys(Flux&lt;String&gt; keys) {\n        return keys.flatMap((key) -&gt; Mono.justOrEmpty(this._userMock.get(key)));\n    }\n\n    public Mono&lt;User&gt; getByKey(String key) {\n        return Mono.justOrEmpty(this._userMock.get(key))\n                .switchIfEmpty(Mono.error(new RuntimeException(&quot;#key = &quot; + key + &quot;不存在&quot;)));\n    }\n\n    public Mono&lt;User&gt; saveOrUpdate(User user) {\n        String key = &quot;key&quot; + user.getId();\n        return this.save(key, user)\n                .onErrorResume((e) -&gt; {\n                    // 如果存在，说明数据库存在记录，查找并修改\n                    return this.getByKey(key)\n                            .flatMap((originalUser) -&gt; {\n                                originalUser.setName(user.getName());\n                                return this.update(key, originalUser);\n                            });\n                });\n    }\n\n    public Flux&lt;User&gt; saveOrUpdateBatch(Flux&lt;User&gt; users) {\n        return users.doOnNext((user) -&gt; this.saveOrUpdate(user));\n    }\n\n    public Mono&lt;User&gt; remove(String key) {\n        return Mono.justOrEmpty(this._userMock.remove(key));\n    }\n\n    // 模拟数据库新增\n    private Mono&lt;User&gt; save(String key, User user) {\n        if (this._userMock.containsKey(key)) {\n            return Mono.error(new RuntimeException());\n        }\n        this._userMock.put(key, user);\n        return Mono.just(user);\n    }\n\n    // 模拟数据库修改\n    private Mono&lt;User&gt; update(String key, User user) {\n        this._userMock.put(key, user);\n        return Mono.just(user);\n    }\n}</code></pre><p><br /></p><p>UserController</p><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.springwebflux.rest;\n\nimport com.wuwenze.springwebflux.entity.User;\nimport com.wuwenze.springwebflux.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.*;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport java.time.Duration;\n\n@RestController\npublic class UserController {\n\n    @Autowired\n    public UserService userService;\n\n    @GetMapping(&quot;/list&quot;)\n    public Flux&lt;User&gt; list() {\n        return this.userService.list();\n    }\n\n    // 流式响应，数据每延迟2秒，一批一批到达客户端\n    @GetMapping(value = &quot;/list_stream&quot;, produces = MediaType.APPLICATION_STREAM_JSON_VALUE)\n    public Flux&lt;User&gt; list_stream() {\n        return this.userService.list()\n                .delayElements(Duration.ofSeconds(2));\n    }\n\n    @GetMapping(&quot;/get/{key}&quot;)\n    public Mono&lt;User&gt; get(@PathVariable String key) {\n        return this.userService.getByKey(key);\n    }\n\n    @PostMapping(&quot;/save&quot;)\n    public Mono&lt;User&gt; save(@RequestBody User user) {\n        return this.userService.saveOrUpdate(user);\n    }\n\n    @DeleteMapping(&quot;/remove/{key}&quot;)\n    public Mono&lt;User&gt; remove(@PathVariable String key) {\n        return this.userService.remove(key);\n    }\n}</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/gif/243237/1549005775297-c293e691-52b8-4407-a672-f052c4040975.gif#align=left&amp;display=inline&amp;height=369&amp;linkTarget=_blank&amp;originHeight=369&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p><br /></p><p>上图为/list_stream（流式响应）的测试效果图，其余接口就不贴图了。</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:22:59.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:21:34.000Z",
    "updated_at": "2019-02-01T07:22:59.000Z",
    "published_at": "2019-02-01T07:22:59.000Z",
    "first_published_at": "2019-02-01T07:22:59.000Z",
    "word_count": 1485,
    "cover": "",
    "description": "date: 2018-12-17 21:14:28tags: [&quot;SpringBoot&quot;,&quot;WebFlux&quot;]Spring WebFlux简介Spring WebFlux是随Spring 5推出的响应式Web框架：  （左侧为基于spring-webmv...",
    "custom_description": "date: 2018-12-17 21:14:28tags: [&quot;SpringBoot&quot;,&quot;WebFlux&quot;]Spring WebFlux简介Spring WebFlux是随Spring 5推出的响应式Web框架：  （左侧为基于spring-webmv...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224379,
    "slug": "sharding-jdbc-example",
    "title": "Sharding-JDBC MasterSlave 示例文档",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-05-22 14:40:58<br />tags: [\"Sharding-JDBC\",\"MasterSlave\",\"SpringBoot\"]\n---\n读写分离，简单来说，就是将DML交给主数据库去执行，将更新结果同步至各个从数据库保持主从数据一致，DQL分发给从数据库去查询，从数据库只提供读取查询操作。读写分离特别适用于读多写少的场景下，通过分散读写到不同的数据库实例上来提高性能，缓解单机数据库的压力:\n\n| Name | Remark |\n| :--- | :--- |\n| DQL | 数据查询语言，比如select查询语句 |\n| DML | 数据操纵语言，比如insert、delete、update更新语句 |\n| DDL | 数据定义语言，比如create/drop/alter等语句 |\n| DCL | 数据控制语言，比如grant/rollback/commit等语句 |\n|  |  |\n\n\nSharding-JDBC是一个开源的分布式数据库中间件解决方案。它在Java的JDBC层以对业务应用零侵入的方式额外提供数据分片，读写分离，柔性事务和分布式治理能力。并在其基础上提供封装了MySQL协议的服务端版本，用于完成对异构语言的支持。\n\n基于JDBC的客户端版本定位为轻量级Java框架，使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。\n\n封装了MySQL协议的服务端版本定位为透明化的MySQL代理端，可以使用任何兼容MySQL协议的访问客户端(如：MySQL Command Client, MySQL Workbench等)操作数据，对DBA更加友好。<br />\n以上内容摘抄至Sharding-JDBC官网 ([http://shardingjdbc.io/document/legacy/2.x/cn/00-overview/](http://shardingjdbc.io/document/legacy/2.x/cn/00-overview/))\n\n本文主要探讨在SpringBoot环境下如何使用Sharding-JDBC提供的读写分离解决方案;\n## 环境\n\n```\nSpringBoot: 1.5.7.RELEASE,\nMybatisPlus: 2.1.4,\nSharding-JDBC: 2.0.0.M2\n```\n\n## POM.xml\n\n> Sharding-JDBC现已提供相关的Starter, 集成起来非常简单;\n\n\n> 下面是完整的pom文件(springboot & mysql & mybatis-plus & sharding-jdbc)\n\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>sharding-jdbc-example-with-spring-boot</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>sharding-jdbc-example-with-spring-boot</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.7.RELEASE</version>\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.source>1.7</maven.compiler.source>\n        <maven.compiler.target>1.7</maven.compiler.target>\n        <mybatisplus-spring-boot-starter.version>1.0.5</mybatisplus-spring-boot-starter.version>\n        <mybatisplus.version>2.1.4</mybatisplus.version>\n        <HikariCP.version>2.7.2</HikariCP.version>\n        <fastjson.version>1.2.39</fastjson.version>\n        <commons-dbcp.version>1.4</commons-dbcp.version>\n        <mysql-connector-java.version>5.1.30</mysql-connector-java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jetty</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.zaxxer</groupId>\n            <artifactId>HikariCP</artifactId>\n            <version>${HikariCP.version}</version>\n        </dependency>\n\n        <!-- mybatis-plus begin -->\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatisplus-spring-boot-starter</artifactId>\n            <version>${mybatisplus-spring-boot-starter.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus</artifactId>\n            <version>${mybatisplus.version}</version>\n        </dependency>\n        <!-- mybatis-plus end -->\n\n        <!-- JUnit test dependency -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>${fastjson.version}</version>\n        </dependency>\n        <!--sharding-jdbc-->\n        <dependency>\n            <groupId>io.shardingjdbc</groupId>\n            <artifactId>sharding-jdbc-spring-boot-starter</artifactId>\n            <version>2.0.0.M2</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-dbcp</groupId>\n            <artifactId>commons-dbcp</artifactId>\n            <version>${commons-dbcp.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>${mysql-connector-java.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/cn.hutool/hutool-all -->\n        <dependency>\n            <groupId>cn.hutool</groupId>\n            <artifactId>hutool-all</artifactId>\n            <version>4.0.12</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>8</source>\n                    <target>8</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n## 多数据源配置 (application.yml)\n\n```yml\nserver:\n  port: 10086\n\nsharding:\n  jdbc:\n      datasource:\n        names: ds_master_0,ds_slave_0_1,ds_slave_0_2\n        ds_master_0:\n          type: org.apache.commons.dbcp.BasicDataSource\n          driverClassName: com.mysql.jdbc.Driver\n          url: jdbc:mysql://127.0.01:3306/ds_master?useUnicode=true&characterEncoding=UTF-8&useSSL=false\n          username: root\n          password: root\n        ds_slave_0_1:\n          type: org.apache.commons.dbcp.BasicDataSource\n          driverClassName: com.mysql.jdbc.Driver\n          url: jdbc:mysql://127.0.01:3306/ds_slave_0?useUnicode=true&characterEncoding=UTF-8&useSSL=false\n          username: root\n          password: root\n        ds_slave_0_2:\n          type: org.apache.commons.dbcp.BasicDataSource\n          driverClassName: com.mysql.jdbc.Driver\n          url: jdbc:mysql://127.0.01:3306/ds_slave_1?useUnicode=true&characterEncoding=UTF-8&useSSL=false\n          username: root\n          password: root\n      config:\n        # 主从策略\n        masterslave:\n          load-balance-algorithm-type: round_robin # 负载策略\n          name: ds_m_1_s_2\n          master-data-source-name: ds_master_0\n          slave-data-source-names: ds_slave_0_1,ds_slave_0_2\n        sharding:\n          props:\n            sql:\n              show: true\n\n#mybatis\nmybatis-plus:\n  datasource: dataSource\n  mapper-locations: classpath:/mapper/*Mapper.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.example.shardingjdbcexamplewithspringboot.entity\n  global-config:\n    #主键类型  0:\"数据库ID自增\", 1:\"用户输入ID\",2:\"全局唯一ID (数字类型唯一ID)\", 3:\"全局唯一ID UUID\";\n    id-type: 0\n    #字段策略 0:\"忽略判断\",1:\"非 NULL 判断\"),2:\"非空判断\"\n    field-strategy: 2\n    #驼峰下划线转换\n    db-column-underline: true\n    #刷新mapper 调试神器\n    refresh-mapper: true\n    #逻辑删除配置\n    logic-delete-value: 0\n    logic-not-delete-value: 1\n  configuration:\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n```\n\n实际上到这一步就完成了最简单的配置, 为了测试效果, 生成相关的数据库和实体吧:\n\n## init data.sql\n\n建立3个数据库, 分别为主, 从1, 从2, 为了区分数据来源, 在from中指定了节点名称;\n\n```sql\nCREATE SCHEMA IF NOT EXISTS `ds_master`;\n\nDROP TABLE IF EXISTS `ds_master`.`tb_employee`;\nCREATE TABLE `ds_master`.`tb_employee` (\n`id`  int NOT NULL AUTO_INCREMENT ,\n`name`  varchar(255) NULL ,\n`from`  varchar(255) NULL ,\nPRIMARY KEY (`id`)\n);\n\nINSERT INTO `ds_master`.`tb_employee` VALUES(1,'name1', 'ds_master');\nINSERT INTO `ds_master`.`tb_employee` VALUES(2,'name2', 'ds_master');\nINSERT INTO `ds_master`.`tb_employee` VALUES(3,'name3', 'ds_master');\n\n####\nCREATE SCHEMA IF NOT EXISTS `ds_slave_0`;\n\nDROP TABLE IF EXISTS `ds_slave_0`.`tb_employee`;\nCREATE TABLE `ds_slave_0`.`tb_employee` (\n`id`  int NOT NULL AUTO_INCREMENT ,\n`name`  varchar(255) NULL ,\n`from`  varchar(255) NULL ,\nPRIMARY KEY (`id`)\n);\n\nINSERT INTO `ds_slave_0`.`tb_employee` VALUES(1,'name1', 'ds_slave_0');\nINSERT INTO `ds_slave_0`.`tb_employee` VALUES(2,'name2', 'ds_slave_0');\nINSERT INTO `ds_slave_0`.`tb_employee` VALUES(3,'name3', 'ds_slave_0');\n\n\n####\nCREATE SCHEMA IF NOT EXISTS `ds_slave_1`;\n\nDROP TABLE IF EXISTS `ds_slave_1`.`tb_employee`;\nCREATE TABLE `ds_slave_1`.`tb_employee` (\n`id`  int NOT NULL AUTO_INCREMENT ,\n`name`  varchar(255) NULL ,\n`from`  varchar(255) NULL ,\nPRIMARY KEY (`id`)\n);\n\nINSERT INTO `ds_slave_1`.`tb_employee` VALUES(1,'name1', 'ds_slave_1');\nINSERT INTO `ds_slave_1`.`tb_employee` VALUES(2,'name2', 'ds_slave_1');\nINSERT INTO `ds_slave_1`.`tb_employee` VALUES(3,'name3', 'ds_slave_1');\n```\n\n## Entity / Mapper / Service\n\n```java\n@Data\n@Builder\n@ToString\n@NoArgsConstructor\n@AllArgsConstructor\n@TableName(\"tb_employee\")\npublic class EmployeeEntity {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    @TableField\n    private String name;\n\n    @TableField\n    private String from;\n}\n\n\npublic interface EmployeeMapper extends BaseMapper {\n}\n```\n\n## 单元测试\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = ShardingJdbcExampleWithSpringBootApplication.class)\npublic class ShardingJdbcExampleWithSpringBootApplicationTests {\n\n    @Resource\n    EmployeeMapper employeeMapper;\n\n\n    @Test\n    public void testMasterSlave() {\n        // search slave db;\n        Console.log(\"search slave db:\");\n        for (int i = 0; i  {\n                Console.log(employeeMapper.selectById(1));\n            }).run();\n        }\n        Console.log(\"==========================================\\n\");\n\n        EmployeeEntity employeeEntity = EmployeeEntity.builder().name(\"test\").from(\"write master db\").build();\n        Integer insert = employeeMapper.insert(employeeEntity);\n        Console.log(\"write master db: {}\", insert &gt; 0); // true\n        Console.log(\"==========================================\\n\");\n\n        EmployeeEntity ret = employeeMapper.selectOne(employeeEntity);\n        Console.log(\"search by \\\"write master db\\\": {}\", ret); // null\n        Console.log(\"==========================================\\n\");\n\n\t\t   //  强制路由,访问masterdb数据\n        HintManager hintManager = HintManager.getInstance();\n        hintManager.setMasterRouteOnly();\n        ret = employeeMapper.selectOne(employeeEntity); //(id=9, name=test, from=write master db)\n        Console.log(\"[HintManager]search by \\\"write master db\\\": {}\", ret);\n        hintManager.close();\n    }\n}\n```\n\n## 最终结果\n\n```log\nsearch slave db:\nEmployeeEntity(id=1, name=name1, from=ds_slave_0)\nEmployeeEntity(id=1, name=name1, from=ds_slave_0)\nEmployeeEntity(id=1, name=name1, from=ds_slave_1)\nEmployeeEntity(id=1, name=name1, from=ds_slave_0)\n==========================================\n\nwrite master db: true\n==========================================\n\nsearch by \"write master db\": null\n==========================================\n\n[HintManager]search by \"write master db\": EmployeeEntity(id=11, name=test, from=write master db)\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005651856-c0eb08d5-c2be-401b-9733-e515c25ac6eb.png#align=left&display=inline&height=533&linkTarget=_blank&originHeight=886&originWidth=1240&size=0&width=746)<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005651849-367222b9-d8bd-4dae-b1bd-b9dc7f638af9.png#align=left&display=inline&height=529&linkTarget=_blank&originHeight=880&originWidth=1240&size=0&width=746)\n\n如测试效果一般, Sharding-JDBC可以帮你轻松的实现读写分离, 但是数据同步仍然是需要考虑的问题;\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-05-22 14:40:58</p><p>tags: [&quot;Sharding-JDBC&quot;,&quot;MasterSlave&quot;,&quot;SpringBoot&quot;]</p><hr /><p>读写分离，简单来说，就是将DML交给主数据库去执行，将更新结果同步至各个从数据库保持主从数据一致，DQL分发给从数据库去查询，从数据库只提供读取查询操作。读写分离特别适用于读多写少的场景下，通过分散读写到不同的数据库实例上来提高性能，缓解单机数据库的压力:</p><table class=\"lake-table\" style=\"width: 699px;\"><colgroup><col width=\"120\"></col><col width=\"578\"></col></colgroup><tbody><tr><td style=\"text-align: left;\">Name</td><td style=\"text-align: left;\">Remark</td></tr></tbody><tbody><tr><td style=\"text-align: left;\">DQL</td><td style=\"text-align: left;\">数据查询语言，比如select查询语句</td></tr><tr><td style=\"text-align: left;\">DML</td><td style=\"text-align: left;\">数据操纵语言，比如insert、delete、update更新语句</td></tr><tr><td style=\"text-align: left;\">DDL</td><td style=\"text-align: left;\">数据定义语言，比如create/drop/alter等语句</td></tr><tr><td style=\"text-align: left;\">DCL</td><td style=\"text-align: left;\">数据控制语言，比如grant/rollback/commit等语句</td></tr><tr><td colspan=\"1\" style=\"text-align: left; background-color: #FFFFFF;\"><p><br /></p></td><td colspan=\"1\" style=\"text-align: left; background-color: #FFFFFF;\"><p><br /></p></td></tr></tbody></table><p><br /></p><p>Sharding-JDBC是一个开源的分布式数据库中间件解决方案。它在Java的JDBC层以对业务应用零侵入的方式额外提供数据分片，读写分离，柔性事务和分布式治理能力。并在其基础上提供封装了MySQL协议的服务端版本，用于完成对异构语言的支持。</p><p><br /></p><p>基于JDBC的客户端版本定位为轻量级Java框架，使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p><p><br /></p><p>封装了MySQL协议的服务端版本定位为透明化的MySQL代理端，可以使用任何兼容MySQL协议的访问客户端(如：MySQL Command Client, MySQL Workbench等)操作数据，对DBA更加友好。<br />\n以上内容摘抄至Sharding-JDBC官网 (<a href=\"http://shardingjdbc.io/document/legacy/2.x/cn/00-overview/\" target=\"_blank\">http://shardingjdbc.io/document/legacy/2.x/cn/00-overview/</a>)</p><p><br /></p><p>本文主要探讨在SpringBoot环境下如何使用Sharding-JDBC提供的读写分离解决方案;</p><h2 id=\"fa405f59\">环境</h2><p><br /></p><pre><code>SpringBoot: 1.5.7.RELEASE,\nMybatisPlus: 2.1.4,\nSharding-JDBC: 2.0.0.M2</code></pre><p><br /></p><h2 id=\"POM.xml\">POM.xml</h2><p><br /></p><blockquote><p>Sharding-JDBC现已提供相关的Starter, 集成起来非常简单;</p></blockquote><p><br /></p><blockquote><p>下面是完整的pom文件(springboot &amp; mysql &amp; mybatis-plus &amp; sharding-jdbc)</p></blockquote><p><br /></p><pre data-lang=\"xml\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.example&lt;/groupId&gt;\n    &lt;artifactId&gt;sharding-jdbc-example-with-spring-boot&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;jar&lt;/packaging&gt;\n\n    &lt;name&gt;sharding-jdbc-example-with-spring-boot&lt;/name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;\n    &lt;/parent&gt;\n\n    &lt;properties&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n        &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;\n        &lt;mybatisplus-spring-boot-starter.version&gt;1.0.5&lt;/mybatisplus-spring-boot-starter.version&gt;\n        &lt;mybatisplus.version&gt;2.1.4&lt;/mybatisplus.version&gt;\n        &lt;HikariCP.version&gt;2.7.2&lt;/HikariCP.version&gt;\n        &lt;fastjson.version&gt;1.2.39&lt;/fastjson.version&gt;\n        &lt;commons-dbcp.version&gt;1.4&lt;/commons-dbcp.version&gt;\n        &lt;mysql-connector-java.version&gt;5.1.30&lt;/mysql-connector-java.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n            &lt;artifactId&gt;h2&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;\n            &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;\n            &lt;version&gt;${HikariCP.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- mybatis-plus begin --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatisplus-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;${mybatisplus-spring-boot-starter.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt;\n            &lt;version&gt;${mybatisplus.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- mybatis-plus end --&gt;\n\n        &lt;!-- JUnit test dependency --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n            &lt;version&gt;${fastjson.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--sharding-jdbc--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.shardingjdbc&lt;/groupId&gt;\n            &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.0.0.M2&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;\n            &lt;version&gt;${commons-dbcp.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;${mysql-connector-java.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/cn.hutool/hutool-all --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;cn.hutool&lt;/groupId&gt;\n            &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;\n            &lt;version&gt;4.0.12&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;8&lt;/source&gt;\n                    &lt;target&gt;8&lt;/target&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;</code></pre><p><br /></p><h2 id=\"12274be2\">多数据源配置 (application.yml)</h2><p><br /></p><pre data-lang=\"yml\"><code>server:\n  port: 10086\n\nsharding:\n  jdbc:\n      datasource:\n        names: ds_master_0,ds_slave_0_1,ds_slave_0_2\n        ds_master_0:\n          type: org.apache.commons.dbcp.BasicDataSource\n          driverClassName: com.mysql.jdbc.Driver\n          url: jdbc:mysql://127.0.01:3306/ds_master?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false\n          username: root\n          password: root\n        ds_slave_0_1:\n          type: org.apache.commons.dbcp.BasicDataSource\n          driverClassName: com.mysql.jdbc.Driver\n          url: jdbc:mysql://127.0.01:3306/ds_slave_0?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false\n          username: root\n          password: root\n        ds_slave_0_2:\n          type: org.apache.commons.dbcp.BasicDataSource\n          driverClassName: com.mysql.jdbc.Driver\n          url: jdbc:mysql://127.0.01:3306/ds_slave_1?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false\n          username: root\n          password: root\n      config:\n        # 主从策略\n        masterslave:\n          load-balance-algorithm-type: round_robin # 负载策略\n          name: ds_m_1_s_2\n          master-data-source-name: ds_master_0\n          slave-data-source-names: ds_slave_0_1,ds_slave_0_2\n        sharding:\n          props:\n            sql:\n              show: true\n\n#mybatis\nmybatis-plus:\n  datasource: dataSource\n  mapper-locations: classpath:/mapper/*Mapper.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.example.shardingjdbcexamplewithspringboot.entity\n  global-config:\n    #主键类型  0:&quot;数据库ID自增&quot;, 1:&quot;用户输入ID&quot;,2:&quot;全局唯一ID (数字类型唯一ID)&quot;, 3:&quot;全局唯一ID UUID&quot;;\n    id-type: 0\n    #字段策略 0:&quot;忽略判断&quot;,1:&quot;非 NULL 判断&quot;),2:&quot;非空判断&quot;\n    field-strategy: 2\n    #驼峰下划线转换\n    db-column-underline: true\n    #刷新mapper 调试神器\n    refresh-mapper: true\n    #逻辑删除配置\n    logic-delete-value: 0\n    logic-not-delete-value: 1\n  configuration:\n    map-underscore-to-camel-case: true\n    cache-enabled: false</code></pre><p><br /></p><p>实际上到这一步就完成了最简单的配置, 为了测试效果, 生成相关的数据库和实体吧:</p><p><br /></p><h2 id=\"e01a01fd\">init data.sql</h2><p><br /></p><p>建立3个数据库, 分别为主, 从1, 从2, 为了区分数据来源, 在from中指定了节点名称;</p><p><br /></p><pre data-lang=\"sql\"><code>CREATE SCHEMA IF NOT EXISTS `ds_master`;\n\nDROP TABLE IF EXISTS `ds_master`.`tb_employee`;\nCREATE TABLE `ds_master`.`tb_employee` (\n`id`  int NOT NULL AUTO_INCREMENT ,\n`name`  varchar(255) NULL ,\n`from`  varchar(255) NULL ,\nPRIMARY KEY (`id`)\n);\n\nINSERT INTO `ds_master`.`tb_employee` VALUES(1,'name1', 'ds_master');\nINSERT INTO `ds_master`.`tb_employee` VALUES(2,'name2', 'ds_master');\nINSERT INTO `ds_master`.`tb_employee` VALUES(3,'name3', 'ds_master');\n\n####\nCREATE SCHEMA IF NOT EXISTS `ds_slave_0`;\n\nDROP TABLE IF EXISTS `ds_slave_0`.`tb_employee`;\nCREATE TABLE `ds_slave_0`.`tb_employee` (\n`id`  int NOT NULL AUTO_INCREMENT ,\n`name`  varchar(255) NULL ,\n`from`  varchar(255) NULL ,\nPRIMARY KEY (`id`)\n);\n\nINSERT INTO `ds_slave_0`.`tb_employee` VALUES(1,'name1', 'ds_slave_0');\nINSERT INTO `ds_slave_0`.`tb_employee` VALUES(2,'name2', 'ds_slave_0');\nINSERT INTO `ds_slave_0`.`tb_employee` VALUES(3,'name3', 'ds_slave_0');\n\n\n####\nCREATE SCHEMA IF NOT EXISTS `ds_slave_1`;\n\nDROP TABLE IF EXISTS `ds_slave_1`.`tb_employee`;\nCREATE TABLE `ds_slave_1`.`tb_employee` (\n`id`  int NOT NULL AUTO_INCREMENT ,\n`name`  varchar(255) NULL ,\n`from`  varchar(255) NULL ,\nPRIMARY KEY (`id`)\n);\n\nINSERT INTO `ds_slave_1`.`tb_employee` VALUES(1,'name1', 'ds_slave_1');\nINSERT INTO `ds_slave_1`.`tb_employee` VALUES(2,'name2', 'ds_slave_1');\nINSERT INTO `ds_slave_1`.`tb_employee` VALUES(3,'name3', 'ds_slave_1');</code></pre><p><br /></p><h2 id=\"c2c63d15\">Entity / Mapper / Service</h2><p><br /></p><pre data-lang=\"java\"><code>@Data\n@Builder\n@ToString\n@NoArgsConstructor\n@AllArgsConstructor\n@TableName(&quot;tb_employee&quot;)\npublic class EmployeeEntity {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    @TableField\n    private String name;\n\n    @TableField\n    private String from;\n}\n\n\npublic interface EmployeeMapper extends BaseMapper {\n}</code></pre><p><br /></p><h2 id=\"93b824b5\">单元测试</h2><p><br /></p><pre data-lang=\"java\"><code>@RunWith(SpringRunner.class)\n@SpringBootTest(classes = ShardingJdbcExampleWithSpringBootApplication.class)\npublic class ShardingJdbcExampleWithSpringBootApplicationTests {\n\n    @Resource\n    EmployeeMapper employeeMapper;\n\n\n    @Test\n    public void testMasterSlave() {\n        // search slave db;\n        Console.log(&quot;search slave db:&quot;);\n        for (int i = 0; i  {\n                Console.log(employeeMapper.selectById(1));\n            }).run();\n        }\n        Console.log(&quot;==========================================\\n&quot;);\n\n        EmployeeEntity employeeEntity = EmployeeEntity.builder().name(&quot;test&quot;).from(&quot;write master db&quot;).build();\n        Integer insert = employeeMapper.insert(employeeEntity);\n        Console.log(&quot;write master db: {}&quot;, insert &amp;gt; 0); // true\n        Console.log(&quot;==========================================\\n&quot;);\n\n        EmployeeEntity ret = employeeMapper.selectOne(employeeEntity);\n        Console.log(&quot;search by \\&quot;write master db\\&quot;: {}&quot;, ret); // null\n        Console.log(&quot;==========================================\\n&quot;);\n\n\t\t   //  强制路由,访问masterdb数据\n        HintManager hintManager = HintManager.getInstance();\n        hintManager.setMasterRouteOnly();\n        ret = employeeMapper.selectOne(employeeEntity); //(id=9, name=test, from=write master db)\n        Console.log(&quot;[HintManager]search by \\&quot;write master db\\&quot;: {}&quot;, ret);\n        hintManager.close();\n    }\n}</code></pre><p><br /></p><h2 id=\"ec5a5a3e\">最终结果</h2><p><br /></p><pre data-lang=\"log\"><code>search slave db:\nEmployeeEntity(id=1, name=name1, from=ds_slave_0)\nEmployeeEntity(id=1, name=name1, from=ds_slave_0)\nEmployeeEntity(id=1, name=name1, from=ds_slave_1)\nEmployeeEntity(id=1, name=name1, from=ds_slave_0)\n==========================================\n\nwrite master db: true\n==========================================\n\nsearch by &quot;write master db&quot;: null\n==========================================\n\n[HintManager]search by &quot;write master db&quot;: EmployeeEntity(id=11, name=test, from=write master db)</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005651856-c0eb08d5-c2be-401b-9733-e515c25ac6eb.png#align=left&amp;display=inline&amp;height=533&amp;linkTarget=_blank&amp;originHeight=886&amp;originWidth=1240&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005651849-367222b9-d8bd-4dae-b1bd-b9dc7f638af9.png#align=left&amp;display=inline&amp;height=529&amp;linkTarget=_blank&amp;originHeight=880&amp;originWidth=1240&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>如测试效果一般, Sharding-JDBC可以帮你轻松的实现读写分离, 但是数据同步仍然是需要考虑的问题;</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:21:25.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:19:59.000Z",
    "updated_at": "2019-02-01T07:21:25.000Z",
    "published_at": "2019-02-01T07:21:25.000Z",
    "first_published_at": "2019-02-01T07:21:25.000Z",
    "word_count": 2228,
    "cover": "",
    "description": "date: 2018-05-22 14:40:58tags: [&quot;Sharding-JDBC&quot;,&quot;MasterSlave&quot;,&quot;SpringBoot&quot;]读写分离，简单来说，就是将DML交给主数据库去执行，将更新结果同步至各个从数据库保持...",
    "custom_description": "读写分离，简单来说，就是将DML交给主数据库去执行，将更新结果同步至各个从数据库保持主从数据一致，DQL分发给从数据库去查询，从数据库只提供读取查询操作。读写分离特别适用于读多写少的场景下，通过分散读写到不同的数据库实例上来提高性能，缓解单机数据库的压力:\n",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224373,
    "slug": "selenium-java-testng",
    "title": "使用Selenium-Java实现自动化UI测试",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-09-23 15:18:06<br />tags: [\"Selenium\",\"Selenium-Java\",\"TestNG\",\"自动化测试\"]\n---\n## ChromeDriver\n\n[https://npm.taobao.org/mirrors/chromedriver/](https://npm.taobao.org/mirrors/chromedriver/)<br />\n下载指定版本的 chromedriver 后，放入 `PATH` 中。\n## pom.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.wuwenze.test</groupId>\n    <artifactId>selenium-test</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <dependencies>\n        <dependency>\n            <groupId>org.seleniumhq.selenium</groupId>\n            <artifactId>selenium-java</artifactId>\n            <version>3.5.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.testng</groupId>\n            <artifactId>testng</artifactId>\n            <version>6.14.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.16.22</version>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n## Test Java\n\n```java\npackage com.wuwenze.test;\n\nimport lombok.extern.java.Log;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.testng.Assert;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Log\npublic class TestNgSelenium {\n    private String baseUrl = \"http://wuwenze.itkeeping.com\";\n    private ChromeDriver webDriver = null;\n\n    @BeforeClass\n    public void before() {\n        webDriver = new ChromeDriver();\n        webDriver.manage().window().fullscreen();\n        webDriver.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS);\n        webDriver.get(baseUrl);\n    }\n\n    @Test\n    public void login() throws InterruptedException {\n        // 进入登录页面\n        webDriver.findElementByClassName(\"btn-login\").click();\n        Thread.sleep(1000);\n\n        // 输入用户名密码\n        List<WebElement> elements = webDriver.findElements(By.tagName(\"input\"));\n        Assert.assertNotNull(elements);\n        Assert.assertEquals(elements.size(), 3);\n        elements.get(0).sendKeys(\"17311223306\");\n        elements.get(1).sendKeys(\"xxx\");\n        elements.get(2).click(); //取消记住密码\n        webDriver.findElementByClassName(\"btn-login\").click();\n\n        Thread.sleep(3000);\n        // 验证是否登录成功\n        Assert.assertEquals(\"客服-我的易维帮助台\", webDriver.getTitle());\n    }\n\n    @AfterClass\n    public void after() {\n        if (null != webDriver) {\n            webDriver.quit();\n            log.info(\"webDriver.quit();\");\n        }\n    }\n}\n```\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-09-23 15:18:06</p><p>tags: [&quot;Selenium&quot;,&quot;Selenium-Java&quot;,&quot;TestNG&quot;,&quot;自动化测试&quot;]</p><hr /><h2 id=\"ChromeDriver\">ChromeDriver</h2><p><br /></p><p><a href=\"https://npm.taobao.org/mirrors/chromedriver/\" target=\"_blank\">https://npm.taobao.org/mirrors/chromedriver/</a><br />\n下载指定版本的 chromedriver 后，放入 <code>PATH</code> 中。</p><h2 id=\"pom.xml\">pom.xml</h2><p><br /></p><pre data-lang=\"xml\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.wuwenze.test&lt;/groupId&gt;\n    &lt;artifactId&gt;selenium-test&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;\n            &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;\n            &lt;version&gt;3.5.3&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.testng&lt;/groupId&gt;\n            &lt;artifactId&gt;testng&lt;/artifactId&gt;\n            &lt;version&gt;6.14.3&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.16.22&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/project&gt;</code></pre><p><br /></p><h2 id=\"519a4592\">Test Java</h2><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.test;\n\nimport lombok.extern.java.Log;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.testng.Assert;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Log\npublic class TestNgSelenium {\n    private String baseUrl = &quot;http://wuwenze.itkeeping.com&quot;;\n    private ChromeDriver webDriver = null;\n\n    @BeforeClass\n    public void before() {\n        webDriver = new ChromeDriver();\n        webDriver.manage().window().fullscreen();\n        webDriver.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS);\n        webDriver.get(baseUrl);\n    }\n\n    @Test\n    public void login() throws InterruptedException {\n        // 进入登录页面\n        webDriver.findElementByClassName(&quot;btn-login&quot;).click();\n        Thread.sleep(1000);\n\n        // 输入用户名密码\n        List&lt;WebElement&gt; elements = webDriver.findElements(By.tagName(&quot;input&quot;));\n        Assert.assertNotNull(elements);\n        Assert.assertEquals(elements.size(), 3);\n        elements.get(0).sendKeys(&quot;17311223306&quot;);\n        elements.get(1).sendKeys(&quot;xxx&quot;);\n        elements.get(2).click(); //取消记住密码\n        webDriver.findElementByClassName(&quot;btn-login&quot;).click();\n\n        Thread.sleep(3000);\n        // 验证是否登录成功\n        Assert.assertEquals(&quot;客服-我的易维帮助台&quot;, webDriver.getTitle());\n    }\n\n    @AfterClass\n    public void after() {\n        if (null != webDriver) {\n            webDriver.quit();\n            log.info(&quot;webDriver.quit();&quot;);\n        }\n    }\n}</code></pre><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:19:54.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:19:03.000Z",
    "updated_at": "2019-02-01T07:19:54.000Z",
    "published_at": "2019-02-01T07:19:54.000Z",
    "first_published_at": "2019-02-01T07:19:54.000Z",
    "word_count": 462,
    "cover": "",
    "description": "date: 2018-09-23 15:18:06tags: [&quot;Selenium&quot;,&quot;Selenium-Java&quot;,&quot;TestNG&quot;,&quot;自动化测试&quot;]ChromeDriverhttps://npm.taobao....",
    "custom_description": "date: 2018-09-23 15:18:06tags: [&quot;Selenium&quot;,&quot;Selenium-Java&quot;,&quot;TestNG&quot;,&quot;自动化测试&quot;]ChromeDriverhttps://npm.taobao....",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224359,
    "slug": "restful-design",
    "title": "RESTful-基于SpringMVC实现优雅的API响应结构设计",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-07-08 14:55:53<br />tags: [\"SpringMVC\",\"RESTful\"]\n---\n一个规范、易懂和优雅，以及结构清晰且易于理解的API响应结构，完全可以省去许多无意义的沟通和文档。\n\n## 预览\n\n操作成功：\n\n```json\n{\"succeed\": true,\"timestamp\": 1525582485337}\n```\n\n操作成功：返回数据\n\n```json\n{\n    \"succeed\": true,\n    \"result\": {\n        \"users\": [\n            {\"id\": 1, \"name\": \"name1\"},\n            {\"id\": 2, \"name\": \"name2\"}\n        ]\n    },\n    \"timestamp\": 1525582485337\n}\n```\n\n操作失败：\n\n```json\n{\n    \"succeed\": false,\n    \"error\": {\n        \"error_code\": 5002,\n        \"error_reason\": \"illegal_argument_error\",\n        \"error_description\": \"The String argument[1] must have length; it must not be null or empty\"\n    },\n    \"timestamp\": 1525582485337\n}\n```\n## 实现\n\n### 定义 ResponseData\n\n```java\n@Data\n@Accessors(chain = true)\npublic class ResponseData<R extends Object> implements Serializable {\n\n  @JSONField(ordinal = 0)\n  public boolean succeed() {\n    return null == this.error;\n  }\n\n  @JSONField(ordinal = 1)\n  private R result;\n  @JSONField(ordinal = 2)\n  private Error error;\n\n  @JSONField(ordinal = 3)\n  public long getTimestamp() {\n    return System.currentTimeMillis();\n  }\n\n  public static <R> ResponseData<R> withSucceed(Boolean succeed) {\n    return ResponseData.withSucceed(succeed, null);\n  }\n\n  public static <R> ResponseData<R> withSucceed(Boolean succeed, String ifFailureDescription) {\n    return ResponseData.withSucceed(succeed, null, ifFailureDescription);\n  }\n\n  public static <R> ResponseData<R> withSucceed(Boolean succeed, ResponseError ifFailureError,\n      String ifFailureDescription) {\n    // succeed ? 操作成功 : 操作失败，请重试。\n    return succeed ? ResponseData.ok()\n        : ResponseData.failure(\n            null != ifFailureError ? ifFailureError : ResponseError.BUSINESS_ERROR,\n            null != ifFailureDescription ? ifFailureDescription : \"操作失败，请重试。\");\n  }\n\n  public static <R> ResponseData<R> ok() {\n    return ResponseData.ok(null);\n  }\n\n  public static <R> ResponseData<R> ok(R result) {\n    return new ResponseData<R>().setResult(result);\n  }\n\n  /**\n   * 未知错误 (error_code = -1).\n   *\n   * @return \n<pre>\n   *     {\n   *         succeed: false,\n   *         timestamp: 1525555307441,\n   *         error: {\n   *             error_code: -1,\n   *             error_reason: \"unknown_error\",\n   *             error_description: \"未知错误\"\n   *         }\n   *     }\n   * </pre>\n   */\n  public static <R> ResponseData<R> failure() {\n    return ResponseData.failure(ResponseError.UNKNOWN_ERROR);\n  }\n\n  public static <R> ResponseData<R> failure(String message) {\n    return ResponseData.failure(ResponseError.BUSINESS_ERROR, message);\n  }\n\n  /**\n   * 系统级别的异常 (error_code = 1000).\n   *\n   * @return \n<pre>\n   *     {\n   *         succeed: false,\n   *         timestamp: 1525555307441,\n   *         error: {\n   *             error_code: 1000,\n   *             error_reason: \"server_error\",\n   *             error_description: \"服务器内部异常[java.lang.NullPointerException]\"\n   *         }\n   *     }\n   * </pre>\n   */\n  public static <R> ResponseData<R> failure(@NonNull Throwable throwable) {\n    ResponseError error = ResponseError.SERVER_ERROR;\n    String throwMessage = throwable.getMessage();\n    String description = String.format(\"%s[%s]\",\n        null != throwMessage ? throwMessage : error.getDescription(),\n        throwable.getClass().getTypeName());\n    return ResponseData.failure(error.getCode(), error.getReason(), description);\n  }\n\n\n  /**\n   * 使用系统定义的错误消息.\n   *\n   * @see ResponseData#failure(ResponseError, String)\n   */\n  public static <R> ResponseData<R> failure(ResponseError error) {\n    return ResponseData.failure(error, null);\n  }\n\n  /**\n   * 使用系统定义的错误消息.\n   *\n   * @param error 错误枚举\n   * @param newDescription 覆盖默认的消息提示\n   * @return ResponseData\n   */\n  public static <R> ResponseData<R> failure(@NonNull ResponseError error, String newDescription) {\n    return ResponseData.failure(error.getCode(), error.getReason(),\n        null != newDescription ? newDescription : error.getDescription());\n  }\n\n  /**\n   * 自定义错误消息.\n   *\n   * @return \n<pre>\n   *     {\n   *         succeed: false,\n   *         timestamp: 1525555307441,\n   *         error: {\n   *             error_code: errorCode,\n   *             error_reason: errorReason,\n   *             error_description: errorDescription\n   *         }\n   *     }\n   * </pre>\n   */\n  public static <R> ResponseData<R> failure(int errorCode, @NonNull String errorReason,\n      @NonNull String errorDescription) {\n    return new ResponseData().setError(new Error(errorCode, errorReason, errorDescription));\n  }\n\n  @Override\n  public String toString() {\n    return JSON.toJSONString(this, true);\n  }\n\n  @Data\n  @AllArgsConstructor\n  @Accessors(chain = true)\n  private static class Error {\n\n    @JSONField(name = \"error_code\", ordinal = 0)\n    private int errorCode;\n    @JSONField(name = \"error_reason\", ordinal = 1)\n    private String errorReason;\n    @JSONField(name = \"error_description\", ordinal = 2)\n    private String errorDescription;\n  }\n}\n```\n\n### 定义 BusinessException\n\n```java\n/**\n * 业务异常, 抛出后最终由 SpringMVC 拦截器统一处理为通用异常信息格式 JSON 并返回;\n */\n@Data\npublic class CloudlyResponseBusinessException extends CloudlyRuntimeException {\n\n  private final static ResponseError UNKNOWN_ERROR = ResponseError.UNKNOWN_ERROR;\n\n  private int code = UNKNOWN_ERROR.getCode();\n  private String reason = UNKNOWN_ERROR.getReason();\n  private String description = UNKNOWN_ERROR.getDescription();\n\n  /**\n   * 未知错误\n   *\n   * @see ResponseData#failure()\n   */\n  public CloudlyResponseBusinessException() {\n  }\n\n  /**\n   * 指定系统定义的错误, 错误消息使用异常信息中携带的消息\n   *\n   * @see ResponseData#failure(Throwable)\n   */\n  public CloudlyResponseBusinessException(ResponseError error, Throwable cause) {\n    super(cause);\n    this.init(error);\n    this.description = String.format(\"%s[%s]\", cause.getMessage(), cause.getClass().getTypeName());\n  }\n\n\n  /**\n   * 指定系统定义的错误, 但指定了新的错误消息.\n   *\n   * @see ResponseData#failure(ResponseError, String)\n   */\n  public CloudlyResponseBusinessException(ResponseError error, String newDescription) {\n    this.init(error);\n    this.description = newDescription;\n  }\n\n  /**\n   * 业务异常，自己指定消息\n   */\n  public CloudlyResponseBusinessException(String description) {\n    this(ResponseError.BUSINESS_ERROR, description);\n  }\n\n  /**\n   * 使用系统定义的错误\n   *\n   * @see ResponseData#failure(ResponseError)\n   */\n  public CloudlyResponseBusinessException(ResponseError error) {\n    this.init(error);\n  }\n\n  /**\n   * server_error, cause.getMessage();\n   *\n   * @see ResponseData#failure(Throwable)\n   */\n  public CloudlyResponseBusinessException(Throwable cause) {\n    this(null, cause);\n  }\n\n  /**\n   * 自定义错误消息\n   *\n   * @see ResponseData#failure(int, String, String)\n   */\n  public CloudlyResponseBusinessException(int code, String reason, String description) {\n    this.init(code, reason, description);\n  }\n\n  private void init(ResponseError error) {\n    this.init(error.getCode(), error.getReason(), error.getDescription());\n  }\n\n  private void init(int code, String reason, String description) {\n    this.code = code;\n    this.reason = reason;\n    this.description = description;\n  }\n}\n```\n\n### @ExceptionHandler: 异常拦截处理\n\n```java\n@Slf4j\n@ResponseBody\n@ControllerAdvice\npublic class GlobalExceptionMessageHandlerConfig {\n\n  @ExceptionHandler(Exception.class)\n  public ResponseEntity<ResponseData> handlerException(Exception ex, HttpServletRequest request) {\n    String requestInfo = String\n        .format(\"HttpRequest -> <URI: %s, Method: %s, QueryString: %s, body: %s>, \", //\n            request.getRequestURI(),//\n            request.getMethod(),//\n            request.getQueryString(),//\n            Mvcs.getBody(request));\n    // 参数错误 (HttpStatus: 400)\n    if (ex instanceof IllegalArgumentException) {\n      log.warn(\"{}ILLEGAL_ARGUMENT_ERROR: {}\", requestInfo, ExceptionUtil.getMessage(ex));\n      return ResponseEntity.badRequest()\n          .body(ResponseData.failure(ResponseError.ILLEGAL_ARGUMENT_ERROR, ex.getMessage()));\n    }\n    // 业务异常 (HttpStatus: 200)\n    if (ex instanceof CloudlyResponseBusinessException) {\n      CloudlyResponseBusinessException throwable = (CloudlyResponseBusinessException) ex;\n\n      if (!StrUtil.equals(ResponseError.SERVER_ERROR.getReason(), throwable.getReason()) &&\n          !StrUtil.equals(ResponseError.UNKNOWN_ERROR.getReason(), throwable.getReason())) {\n        log.warn(\"{}{}\", requestInfo, throwable.toString());\n        return ResponseEntity.ok(ResponseData.failure(\n            throwable.getCode(), throwable.getReason(), throwable.getDescription()));\n      }\n    }\n    // 服务器内部错误 (HttpStatus: 500), 打印堆栈、发送报警日志。\n    log.error(\"{}SERVER_ERROR: {}\", requestInfo, ex.getMessage(), ex);\n    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ResponseData.failure(ex));\n  }\n}\n```\n\n关于 **httpStatus** 的设定，建议如下：\n\n| error | error_reason | http_status |\n| :--- | :--- | :--- |\n| illegal_argument_error | 参数错误 | 400 |\n| unknown_error | 未知错误 | 500 |\n| server_error | 服务器内部异常 | 500 |\n| xxx | 其他 | 200 |\n\n\n## 使用\n\n### JSONEntity\n\n```java\n@GetMapping(\"/user/{id}\")\npublic ResponseData<?> user(@PathVariable Integer id) {\n    User user = find(id);\n\n    if (null == user) {\n        return ResponseData.failure(ResponseError.USER_NOT_FOUND);\n    }\n    return ResponseData.ok(ImmutableMap.of(\"user\": user));\n}\n\n-->\n{\n    \"succeed\": true,\n    \"result\": {\n        \"user\": {\"id\": 1, \"name\": \"user1\"}\n    },\n    \"timestamp\": 1525582485337\n}\n\n{\n    \"succeed\": false,\n    \"error\": {\n        \"error_code\": 10086,\n        \"error_reason\": \"user_not_found\",\n        \"error_description\": \"没有找到用户 #user1\"\n    },\n    \"timestamp\": 1525582485337\n}\n```\n\n### Assert: 参数检查\n\n```java\nAssert.noEmpty(name, \"用户名不能为空\");\n\n// 或者手动抛出IllegalArgumentException异常\nif (StringUtil.isEmpty(name)) {\n    throw new IllegalArgumentException(\"用户名不能为空\");\n}\n\n-->\n{\n    \"succeed\": false,\n    \"error\": {\n        \"error_code\": 5002,\n        \"error_reason\": \"illegal_argument_error\",\n        \"error_description\": \"用户名不能为空\"\n    },\n    \"timestamp\": 1525582485337\n}\n```\n\n### Exception: 抛出业务异常\n\n```java\n// 使用系统定义的错误\nthrow new CloudlyResponseBusinessException(ResponseError.USER_NOT_FOUND)\n\n// 指定系统定义的错误, 错误消息使用异常信息中携带的消息\nthrow new CloudlyResponseBusinessException(ResponseError.USER_NOT_FOUND, ex);\n\n// 指定系统定义的错误, 但指定了新的错误消息.\nthrow new CloudlyResponseBusinessException(ResponseError.USER_NOT_FOUND, \"用户 XXX 没有找到\");\n\n// 手动抛出服务器异常 (SERVER_ERROR)\nthrow new CloudlyResponseBusinessException(ex);\n\n// 抛出一个未知的异常 (UNKNOWN_ERROR)\nthrow new CloudlyResponseBusinessException();\n\n// 自定义错误消息\nthow new CloudlyResponseBusinessException(10086, \"user_email_exists\", \"用户邮箱已经存在了\");\n\n{\n    \"succeed\": false,\n    \"error\": {\n        \"error_code\": 10086,\n        \"error_reason\": \"user_email_exists\",\n        \"error_description\": \"用户邮箱已经存在了\"\n    },\n    \"timestamp\": 1525582485337\n}\n```\n\n## 补充：提供可维护的 ErrorCode 列表\n\n```java\n@GetMapping(\"/error_code\")\npublic ResponseData<?> errors() {\n\treturn ResponseData.ok(ImmutableMap.of(//\n\t\t\"enums\", ResponseError.values(),//\n\t\t\"markdownText\", ResponseError.toMarkdownTable(), //\n\t\t\"jsonString\", ResponseError.toJsonArrayString()));\n}\n```\n\n最终，该接口会根据系统定义（ResponseError）的异常信息，返回 Markdown 文本或 JSON 字符串，前端解析后生成表格即可，就像下面这样：\n\n| error_code | error_reason | error_description |\n| :--- | :--- | :--- |\n| -1 | unknown_error | 未知错误 |\n| 5000 | server_error | 服务器内部异常 |\n| 5001 | illegal_argument_error | 参数错误 |\n| 5002 | json_serialization_error | JSON 序列化失败 |\n| ... | ... | ... |\n\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-07-08 14:55:53</p><p>tags: [&quot;SpringMVC&quot;,&quot;RESTful&quot;]</p><hr /><p>一个规范、易懂和优雅，以及结构清晰且易于理解的API响应结构，完全可以省去许多无意义的沟通和文档。</p><p><br /></p><h2 id=\"645dbc55\">预览</h2><p><br /></p><p>操作成功：</p><p><br /></p><pre data-lang=\"json\"><code>{&quot;succeed&quot;: true,&quot;timestamp&quot;: 1525582485337}</code></pre><p><br /></p><p>操作成功：返回数据</p><p><br /></p><pre data-lang=\"json\"><code>{\n    &quot;succeed&quot;: true,\n    &quot;result&quot;: {\n        &quot;users&quot;: [\n            {&quot;id&quot;: 1, &quot;name&quot;: &quot;name1&quot;},\n            {&quot;id&quot;: 2, &quot;name&quot;: &quot;name2&quot;}\n        ]\n    },\n    &quot;timestamp&quot;: 1525582485337\n}</code></pre><p><br /></p><p>操作失败：</p><p><br /></p><pre data-lang=\"json\"><code>{\n    &quot;succeed&quot;: false,\n    &quot;error&quot;: {\n        &quot;error_code&quot;: 5002,\n        &quot;error_reason&quot;: &quot;illegal_argument_error&quot;,\n        &quot;error_description&quot;: &quot;The String argument[1] must have length; it must not be null or empty&quot;\n    },\n    &quot;timestamp&quot;: 1525582485337\n}</code></pre><h2 id=\"38164c8b\">实现</h2><p><br /></p><h3 id=\"7014cb94\">定义 ResponseData</h3><p><br /></p><pre data-lang=\"java\"><code>@Data\n@Accessors(chain = true)\npublic class ResponseData&lt;R extends Object&gt; implements Serializable {\n\n  @JSONField(ordinal = 0)\n  public boolean succeed() {\n    return null == this.error;\n  }\n\n  @JSONField(ordinal = 1)\n  private R result;\n  @JSONField(ordinal = 2)\n  private Error error;\n\n  @JSONField(ordinal = 3)\n  public long getTimestamp() {\n    return System.currentTimeMillis();\n  }\n\n  public static &lt;R&gt; ResponseData&lt;R&gt; withSucceed(Boolean succeed) {\n    return ResponseData.withSucceed(succeed, null);\n  }\n\n  public static &lt;R&gt; ResponseData&lt;R&gt; withSucceed(Boolean succeed, String ifFailureDescription) {\n    return ResponseData.withSucceed(succeed, null, ifFailureDescription);\n  }\n\n  public static &lt;R&gt; ResponseData&lt;R&gt; withSucceed(Boolean succeed, ResponseError ifFailureError,\n      String ifFailureDescription) {\n    // succeed ? 操作成功 : 操作失败，请重试。\n    return succeed ? ResponseData.ok()\n        : ResponseData.failure(\n            null != ifFailureError ? ifFailureError : ResponseError.BUSINESS_ERROR,\n            null != ifFailureDescription ? ifFailureDescription : &quot;操作失败，请重试。&quot;);\n  }\n\n  public static &lt;R&gt; ResponseData&lt;R&gt; ok() {\n    return ResponseData.ok(null);\n  }\n\n  public static &lt;R&gt; ResponseData&lt;R&gt; ok(R result) {\n    return new ResponseData&lt;R&gt;().setResult(result);\n  }\n\n  /**\n   * 未知错误 (error_code = -1).\n   *\n   * @return \n&lt;pre&gt;\n   *     {\n   *         succeed: false,\n   *         timestamp: 1525555307441,\n   *         error: {\n   *             error_code: -1,\n   *             error_reason: &quot;unknown_error&quot;,\n   *             error_description: &quot;未知错误&quot;\n   *         }\n   *     }\n   * &lt;/pre&gt;\n   */\n  public static &lt;R&gt; ResponseData&lt;R&gt; failure() {\n    return ResponseData.failure(ResponseError.UNKNOWN_ERROR);\n  }\n\n  public static &lt;R&gt; ResponseData&lt;R&gt; failure(String message) {\n    return ResponseData.failure(ResponseError.BUSINESS_ERROR, message);\n  }\n\n  /**\n   * 系统级别的异常 (error_code = 1000).\n   *\n   * @return \n&lt;pre&gt;\n   *     {\n   *         succeed: false,\n   *         timestamp: 1525555307441,\n   *         error: {\n   *             error_code: 1000,\n   *             error_reason: &quot;server_error&quot;,\n   *             error_description: &quot;服务器内部异常[java.lang.NullPointerException]&quot;\n   *         }\n   *     }\n   * &lt;/pre&gt;\n   */\n  public static &lt;R&gt; ResponseData&lt;R&gt; failure(@NonNull Throwable throwable) {\n    ResponseError error = ResponseError.SERVER_ERROR;\n    String throwMessage = throwable.getMessage();\n    String description = String.format(&quot;%s[%s]&quot;,\n        null != throwMessage ? throwMessage : error.getDescription(),\n        throwable.getClass().getTypeName());\n    return ResponseData.failure(error.getCode(), error.getReason(), description);\n  }\n\n\n  /**\n   * 使用系统定义的错误消息.\n   *\n   * @see ResponseData#failure(ResponseError, String)\n   */\n  public static &lt;R&gt; ResponseData&lt;R&gt; failure(ResponseError error) {\n    return ResponseData.failure(error, null);\n  }\n\n  /**\n   * 使用系统定义的错误消息.\n   *\n   * @param error 错误枚举\n   * @param newDescription 覆盖默认的消息提示\n   * @return ResponseData\n   */\n  public static &lt;R&gt; ResponseData&lt;R&gt; failure(@NonNull ResponseError error, String newDescription) {\n    return ResponseData.failure(error.getCode(), error.getReason(),\n        null != newDescription ? newDescription : error.getDescription());\n  }\n\n  /**\n   * 自定义错误消息.\n   *\n   * @return \n&lt;pre&gt;\n   *     {\n   *         succeed: false,\n   *         timestamp: 1525555307441,\n   *         error: {\n   *             error_code: errorCode,\n   *             error_reason: errorReason,\n   *             error_description: errorDescription\n   *         }\n   *     }\n   * &lt;/pre&gt;\n   */\n  public static &lt;R&gt; ResponseData&lt;R&gt; failure(int errorCode, @NonNull String errorReason,\n      @NonNull String errorDescription) {\n    return new ResponseData().setError(new Error(errorCode, errorReason, errorDescription));\n  }\n\n  @Override\n  public String toString() {\n    return JSON.toJSONString(this, true);\n  }\n\n  @Data\n  @AllArgsConstructor\n  @Accessors(chain = true)\n  private static class Error {\n\n    @JSONField(name = &quot;error_code&quot;, ordinal = 0)\n    private int errorCode;\n    @JSONField(name = &quot;error_reason&quot;, ordinal = 1)\n    private String errorReason;\n    @JSONField(name = &quot;error_description&quot;, ordinal = 2)\n    private String errorDescription;\n  }\n}</code></pre><p><br /></p><h3 id=\"b25b3ccf\">定义 BusinessException</h3><p><br /></p><pre data-lang=\"java\"><code>/**\n * 业务异常, 抛出后最终由 SpringMVC 拦截器统一处理为通用异常信息格式 JSON 并返回;\n */\n@Data\npublic class CloudlyResponseBusinessException extends CloudlyRuntimeException {\n\n  private final static ResponseError UNKNOWN_ERROR = ResponseError.UNKNOWN_ERROR;\n\n  private int code = UNKNOWN_ERROR.getCode();\n  private String reason = UNKNOWN_ERROR.getReason();\n  private String description = UNKNOWN_ERROR.getDescription();\n\n  /**\n   * 未知错误\n   *\n   * @see ResponseData#failure()\n   */\n  public CloudlyResponseBusinessException() {\n  }\n\n  /**\n   * 指定系统定义的错误, 错误消息使用异常信息中携带的消息\n   *\n   * @see ResponseData#failure(Throwable)\n   */\n  public CloudlyResponseBusinessException(ResponseError error, Throwable cause) {\n    super(cause);\n    this.init(error);\n    this.description = String.format(&quot;%s[%s]&quot;, cause.getMessage(), cause.getClass().getTypeName());\n  }\n\n\n  /**\n   * 指定系统定义的错误, 但指定了新的错误消息.\n   *\n   * @see ResponseData#failure(ResponseError, String)\n   */\n  public CloudlyResponseBusinessException(ResponseError error, String newDescription) {\n    this.init(error);\n    this.description = newDescription;\n  }\n\n  /**\n   * 业务异常，自己指定消息\n   */\n  public CloudlyResponseBusinessException(String description) {\n    this(ResponseError.BUSINESS_ERROR, description);\n  }\n\n  /**\n   * 使用系统定义的错误\n   *\n   * @see ResponseData#failure(ResponseError)\n   */\n  public CloudlyResponseBusinessException(ResponseError error) {\n    this.init(error);\n  }\n\n  /**\n   * server_error, cause.getMessage();\n   *\n   * @see ResponseData#failure(Throwable)\n   */\n  public CloudlyResponseBusinessException(Throwable cause) {\n    this(null, cause);\n  }\n\n  /**\n   * 自定义错误消息\n   *\n   * @see ResponseData#failure(int, String, String)\n   */\n  public CloudlyResponseBusinessException(int code, String reason, String description) {\n    this.init(code, reason, description);\n  }\n\n  private void init(ResponseError error) {\n    this.init(error.getCode(), error.getReason(), error.getDescription());\n  }\n\n  private void init(int code, String reason, String description) {\n    this.code = code;\n    this.reason = reason;\n    this.description = description;\n  }\n}</code></pre><p><br /></p><h3 id=\"14d5924a\">@ExceptionHandler: 异常拦截处理</h3><p><br /></p><pre data-lang=\"java\"><code>@Slf4j\n@ResponseBody\n@ControllerAdvice\npublic class GlobalExceptionMessageHandlerConfig {\n\n  @ExceptionHandler(Exception.class)\n  public ResponseEntity&lt;ResponseData&gt; handlerException(Exception ex, HttpServletRequest request) {\n    String requestInfo = String\n        .format(&quot;HttpRequest -&gt; &lt;URI: %s, Method: %s, QueryString: %s, body: %s&gt;, &quot;, //\n            request.getRequestURI(),//\n            request.getMethod(),//\n            request.getQueryString(),//\n            Mvcs.getBody(request));\n    // 参数错误 (HttpStatus: 400)\n    if (ex instanceof IllegalArgumentException) {\n      log.warn(&quot;{}ILLEGAL_ARGUMENT_ERROR: {}&quot;, requestInfo, ExceptionUtil.getMessage(ex));\n      return ResponseEntity.badRequest()\n          .body(ResponseData.failure(ResponseError.ILLEGAL_ARGUMENT_ERROR, ex.getMessage()));\n    }\n    // 业务异常 (HttpStatus: 200)\n    if (ex instanceof CloudlyResponseBusinessException) {\n      CloudlyResponseBusinessException throwable = (CloudlyResponseBusinessException) ex;\n\n      if (!StrUtil.equals(ResponseError.SERVER_ERROR.getReason(), throwable.getReason()) &amp;&amp;\n          !StrUtil.equals(ResponseError.UNKNOWN_ERROR.getReason(), throwable.getReason())) {\n        log.warn(&quot;{}{}&quot;, requestInfo, throwable.toString());\n        return ResponseEntity.ok(ResponseData.failure(\n            throwable.getCode(), throwable.getReason(), throwable.getDescription()));\n      }\n    }\n    // 服务器内部错误 (HttpStatus: 500), 打印堆栈、发送报警日志。\n    log.error(&quot;{}SERVER_ERROR: {}&quot;, requestInfo, ex.getMessage(), ex);\n    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ResponseData.failure(ex));\n  }\n}</code></pre><p><br /></p><p>关于 <strong>httpStatus</strong> 的设定，建议如下：</p><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"240\"></col><col width=\"240\"></col><col width=\"241\"></col></colgroup><tbody><tr><td style=\"text-align: left;\">error</td><td style=\"text-align: left;\">error_reason</td><td style=\"text-align: left;\">http_status</td></tr></tbody><tbody><tr><td style=\"text-align: left;\">illegal_argument_error</td><td style=\"text-align: left;\">参数错误</td><td style=\"text-align: left;\">400</td></tr><tr><td style=\"text-align: left;\">unknown_error</td><td style=\"text-align: left;\">未知错误</td><td style=\"text-align: left;\">500</td></tr><tr><td style=\"text-align: left;\">server_error</td><td style=\"text-align: left;\">服务器内部异常</td><td style=\"text-align: left;\">500</td></tr><tr><td style=\"text-align: left;\">xxx</td><td style=\"text-align: left;\">其他</td><td style=\"text-align: left;\">200</td></tr></tbody></table><p><br /></p><h2 id=\"ecff77a8\">使用</h2><p><br /></p><h3 id=\"JSONEntity\">JSONEntity</h3><p><br /></p><pre data-lang=\"java\"><code>@GetMapping(&quot;/user/{id}&quot;)\npublic ResponseData&lt;?&gt; user(@PathVariable Integer id) {\n    User user = find(id);\n\n    if (null == user) {\n        return ResponseData.failure(ResponseError.USER_NOT_FOUND);\n    }\n    return ResponseData.ok(ImmutableMap.of(&quot;user&quot;: user));\n}\n\n--&gt;\n{\n    &quot;succeed&quot;: true,\n    &quot;result&quot;: {\n        &quot;user&quot;: {&quot;id&quot;: 1, &quot;name&quot;: &quot;user1&quot;}\n    },\n    &quot;timestamp&quot;: 1525582485337\n}\n\n{\n    &quot;succeed&quot;: false,\n    &quot;error&quot;: {\n        &quot;error_code&quot;: 10086,\n        &quot;error_reason&quot;: &quot;user_not_found&quot;,\n        &quot;error_description&quot;: &quot;没有找到用户 #user1&quot;\n    },\n    &quot;timestamp&quot;: 1525582485337\n}</code></pre><p><br /></p><h3 id=\"d5f99dd8\">Assert: 参数检查</h3><p><br /></p><pre data-lang=\"java\"><code>Assert.noEmpty(name, &quot;用户名不能为空&quot;);\n\n// 或者手动抛出IllegalArgumentException异常\nif (StringUtil.isEmpty(name)) {\n    throw new IllegalArgumentException(&quot;用户名不能为空&quot;);\n}\n\n--&gt;\n{\n    &quot;succeed&quot;: false,\n    &quot;error&quot;: {\n        &quot;error_code&quot;: 5002,\n        &quot;error_reason&quot;: &quot;illegal_argument_error&quot;,\n        &quot;error_description&quot;: &quot;用户名不能为空&quot;\n    },\n    &quot;timestamp&quot;: 1525582485337\n}</code></pre><p><br /></p><h3 id=\"eca83837\">Exception: 抛出业务异常</h3><p><br /></p><pre data-lang=\"java\"><code>// 使用系统定义的错误\nthrow new CloudlyResponseBusinessException(ResponseError.USER_NOT_FOUND)\n\n// 指定系统定义的错误, 错误消息使用异常信息中携带的消息\nthrow new CloudlyResponseBusinessException(ResponseError.USER_NOT_FOUND, ex);\n\n// 指定系统定义的错误, 但指定了新的错误消息.\nthrow new CloudlyResponseBusinessException(ResponseError.USER_NOT_FOUND, &quot;用户 XXX 没有找到&quot;);\n\n// 手动抛出服务器异常 (SERVER_ERROR)\nthrow new CloudlyResponseBusinessException(ex);\n\n// 抛出一个未知的异常 (UNKNOWN_ERROR)\nthrow new CloudlyResponseBusinessException();\n\n// 自定义错误消息\nthow new CloudlyResponseBusinessException(10086, &quot;user_email_exists&quot;, &quot;用户邮箱已经存在了&quot;);\n\n{\n    &quot;succeed&quot;: false,\n    &quot;error&quot;: {\n        &quot;error_code&quot;: 10086,\n        &quot;error_reason&quot;: &quot;user_email_exists&quot;,\n        &quot;error_description&quot;: &quot;用户邮箱已经存在了&quot;\n    },\n    &quot;timestamp&quot;: 1525582485337\n}</code></pre><p><br /></p><h2 id=\"32489ed5\">补充：提供可维护的 ErrorCode 列表</h2><p><br /></p><pre data-lang=\"java\"><code>@GetMapping(&quot;/error_code&quot;)\npublic ResponseData&lt;?&gt; errors() {\n\treturn ResponseData.ok(ImmutableMap.of(//\n\t\t&quot;enums&quot;, ResponseError.values(),//\n\t\t&quot;markdownText&quot;, ResponseError.toMarkdownTable(), //\n\t\t&quot;jsonString&quot;, ResponseError.toJsonArrayString()));\n}</code></pre><p><br /></p><p>最终，该接口会根据系统定义（ResponseError）的异常信息，返回 Markdown 文本或 JSON 字符串，前端解析后生成表格即可，就像下面这样：</p><p><br /></p><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"240\"></col><col width=\"240\"></col><col width=\"241\"></col></colgroup><tbody><tr><td style=\"text-align: left;\">error_code</td><td style=\"text-align: left;\">error_reason</td><td style=\"text-align: left;\">error_description</td></tr></tbody><tbody><tr><td style=\"text-align: left;\">-1</td><td style=\"text-align: left;\">unknown_error</td><td style=\"text-align: left;\">未知错误</td></tr><tr><td style=\"text-align: left;\">5000</td><td style=\"text-align: left;\">server_error</td><td style=\"text-align: left;\">服务器内部异常</td></tr><tr><td style=\"text-align: left;\">5001</td><td style=\"text-align: left;\">illegal_argument_error</td><td style=\"text-align: left;\">参数错误</td></tr><tr><td style=\"text-align: left;\">5002</td><td style=\"text-align: left;\">json_serialization_error</td><td style=\"text-align: left;\">JSON 序列化失败</td></tr><tr><td style=\"text-align: left;\">...</td><td style=\"text-align: left;\">...</td><td style=\"text-align: left;\">...</td></tr></tbody></table><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:18:40.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:16:47.000Z",
    "updated_at": "2019-02-01T07:18:40.000Z",
    "published_at": "2019-02-01T07:18:40.000Z",
    "first_published_at": "2019-02-01T07:18:40.000Z",
    "word_count": 1722,
    "cover": "",
    "description": "date: 2018-07-08 14:55:53tags: [&quot;SpringMVC&quot;,&quot;RESTful&quot;]一个规范、易懂和优雅，以及结构清晰且易于理解的API响应结构，完全可以省去许多无意义的沟通和文档。预览操作成功：{&quot;succeed&qu...",
    "custom_description": "date: 2018-07-08 14:55:53tags: [&quot;SpringMVC&quot;,&quot;RESTful&quot;]一个规范、易懂和优雅，以及结构清晰且易于理解的API响应结构，完全可以省去许多无意义的沟通和文档。预览操作成功：{&quot;succeed&qu...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224351,
    "slug": "postman-scripts",
    "title": "Postman高级技巧-Pre-Request-Script Tests-Script",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-11-13 15:46:59<br />tags: [\"Postman\",\"自动化测试\"]\n---\n\n身为一个接口自动化测试工具，具备在运行中的动态行为不足为奇，Postman集成了一个强大的，基于NodeJS的Script引擎，利用它可以为请求以及响应添加一些动态的行为：\n\n1）在发送请求之前，编写Pre-Request-Script，为请求参数进行加密处理、参数化等。\n\n2）接收到请求响应后，编写Tests-Script，制定响应断言、处理返回的数据等。\n\n大致的流程如下图：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005321800-b5d20189-1d02-4569-8044-21d6297582df.png#align=left&display=inline&height=93&linkTarget=_blank&originHeight=114&originWidth=914&size=0&width=746)\n## 实战\n\n> 现有两个接口，分别为获取Token和获取用户信息，获取Token接口参数需要计算Sign签名，该接口的返回值将成为获取用户信息接口的参数。\n\n\n### 环境变量\n\n> 为了方便的在测试环境以及开发环境中无缝切换，将相关的信息配置为两套环境变量\n\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322190-73c01825-4b5d-4d68-b612-b96d9939e9a8.png#align=left&display=inline&height=630&linkTarget=_blank&originHeight=703&originWidth=832&size=0&width=746)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322431-f662f515-8b27-46ad-9bc8-eabdfc8e98bd.png#align=left&display=inline&height=629&linkTarget=_blank&originHeight=701&originWidth=832&size=0&width=746)\n\n### OpenAccountApi.getUserToken\n\n| 接口地址 | http://{{host}}/api2/OpenAccountApi.getUserToken |\n| :--- | :--- |\n| 请求方式 | POST |\n| 请求参数 | ?_app_key=[]&_time=[]&_sign=[] |\n| 请求正文 | {\"account\":\"账号信息\"} |\n| 响应正文 | {\"result\": { \"token\": \"\",\"user_id\": ?},\"status\": 0} |\n\n\n按照接口约定，配置相关的Postman请求：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322460-8c90133f-a238-41fc-bfe4-a45b75283ec3.png#align=left&display=inline&height=269&linkTarget=_blank&originHeight=356&originWidth=989&size=0&width=746)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322148-8902bf8b-c04a-4843-9f6f-ad10160bafd1.png#align=left&display=inline&height=226&linkTarget=_blank&originHeight=302&originWidth=995&size=0&width=746)<br />\n上图上中的{{_time}}、{{_sign}}变量目前还取不到值，因为在环境变量中还没有相关定义，<br />\n现在开始编写相关的Pre-Request-Script脚本：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322321-71534694-4d55-4f7f-9bfa-12c68e920190.png#align=left&display=inline&height=312&linkTarget=_blank&originHeight=415&originWidth=993&size=0&width=746)\n\n```javascript\n// 前置处理器：计算请求签名\nvar _app_secret = pm.environment.get(\"provider_app_secret\");\nvar _time = (new Date()).valueOf();\nvar _pre_sign = 'requestBody=' + pm.request.body.raw + ',time=' + _time + ',appSecret=' + _app_secret;\nvar _sign = CryptoJS.MD5(_pre_sign).toString();\npm.environment.set(\"_time\", _time);\npm.environment.set(\"_sign\", _sign);\n\nconsole.log('[Pre]OpenAccountApi.getUserToken _pre_sign='+_pre_sign+',_sign=' + _sign);\n```\n\n该脚本完成后，之前参数中使用{{_sign}}的就能动态的获取到值了。\n\n请求发送成功后，需要提取响应正文的token作为下一个接口的参数，取出来放入Postman环境变量中即可。<br />\n编写相关的Tests-Script脚本：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005321578-7af46acc-0ed9-42d7-b509-4d11f31f8354.png#align=left&display=inline&height=282&linkTarget=_blank&originHeight=420&originWidth=1112&size=0&width=746)\n\n```javascript\n// 响应断言\npm.test(\"Body matches token\", function () {\n    pm.expect(pm.response.text()).to.include(\"\\\"token\\\":\");\n\n    // 提取Token\n    var result = pm.response.json().result;\n    pm.environment.set(\"_userid\", result.user_id);\n    pm.environment.set(\"_token\", result.token);\n    console.log('[Tests]OpenAccountApi.getUserToken _token=' + result.token + ',user_id=' + result.user_id);\n});\n```\n\n### OpenUserApi.findById\n\n| 接口地址 | http://{{host}}/api2/OpenAccountApi.getUserToken |\n| --- | --- |\n| 请求方式 | POST |\n| 请求参数 | ?_token=[] |\n| 请求正文 | {\"id\":用户Id} |\n| 响应正文 | {\"result\": {用户信息},\"status\": 0} |\n\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322070-0c8b8b3c-7a60-413f-8a1f-8d40ee0d3307.png#align=left&display=inline&height=205&linkTarget=_blank&originHeight=303&originWidth=1105&size=0&width=746)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005321562-6aaaa420-95eb-4a19-8443-63276ce4058b.png#align=left&display=inline&height=206&linkTarget=_blank&originHeight=300&originWidth=1085&size=0&width=746)<br />\n第二个接口没有什么特殊处理，写了个简单的响应断言，若响应正文中包含\"status\":0，则表明请求成功了。\n\n```javascript\nconsole.log('[Tests]OpenUserApi.findById, requestBody=' + pm.request.body.raw);\n\npm.test(\"Body matches status\", function () {\n    pm.expect(pm.response.json().status).to.eql(0);\n});\n```\n\n### 最终的测试效果\n\n> 按Ctrl + Shift + I 可以弹出开发者面板，查看到打印的相关日志。\n\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322610-cfde8098-037c-4afa-a7d9-67b2e5bea4c6.png#align=left&display=inline&height=216&linkTarget=_blank&originHeight=488&originWidth=1682&size=0&width=746)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005323380-44d5f41f-c6f1-46b2-8b52-f20ede96ab14.png#align=left&display=inline&height=394&linkTarget=_blank&originHeight=885&originWidth=1677&size=0&width=746)\n\n### Collection Runner\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005323282-e9a64a7d-b766-4fbf-abee-8247148617ae.png#align=left&display=inline&height=619&linkTarget=_blank&originHeight=1042&originWidth=1256&size=0&width=746)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322675-0747e8f6-055b-4c18-9acb-fd8e50a60d01.png#align=left&display=inline&height=358&linkTarget=_blank&originHeight=540&originWidth=1124&size=0&width=746)\n\n### 运行日志\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549005321608-71169eb6-f8c0-45a6-83df-f28efea8afc7.png#align=left&display=inline&height=527&linkTarget=_blank&originHeight=682&originWidth=965&size=0&width=746)\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-11-13 15:46:59</p><p>tags: [&quot;Postman&quot;,&quot;自动化测试&quot;]</p><hr /><p><br /></p><p>身为一个接口自动化测试工具，具备在运行中的动态行为不足为奇，Postman集成了一个强大的，基于NodeJS的Script引擎，利用它可以为请求以及响应添加一些动态的行为：</p><p><br /></p><p>1）在发送请求之前，编写Pre-Request-Script，为请求参数进行加密处理、参数化等。</p><p><br /></p><p>2）接收到请求响应后，编写Tests-Script，制定响应断言、处理返回的数据等。</p><p><br /></p><p>大致的流程如下图：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005321800-b5d20189-1d02-4569-8044-21d6297582df.png#align=left&amp;display=inline&amp;height=93&amp;linkTarget=_blank&amp;originHeight=114&amp;originWidth=914&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><h2 id=\"e12a7da0\">实战</h2><p><br /></p><blockquote><p>现有两个接口，分别为获取Token和获取用户信息，获取Token接口参数需要计算Sign签名，该接口的返回值将成为获取用户信息接口的参数。</p></blockquote><p><br /></p><h3 id=\"3867e350\">环境变量</h3><p><br /></p><blockquote><p>为了方便的在测试环境以及开发环境中无缝切换，将相关的信息配置为两套环境变量</p></blockquote><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322190-73c01825-4b5d-4d68-b612-b96d9939e9a8.png#align=left&amp;display=inline&amp;height=630&amp;linkTarget=_blank&amp;originHeight=703&amp;originWidth=832&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322431-f662f515-8b27-46ad-9bc8-eabdfc8e98bd.png#align=left&amp;display=inline&amp;height=629&amp;linkTarget=_blank&amp;originHeight=701&amp;originWidth=832&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"OpenAccountApi.getUserToken\">OpenAccountApi.getUserToken</h3><p><br /></p><table class=\"lake-table\" style=\"width: 744px;\"><colgroup><col width=\"127\"></col><col width=\"616\"></col></colgroup><tbody><tr><td style=\"text-align: left;\">接口地址</td><td style=\"text-align: left;\">http://{{host}}/api2/OpenAccountApi.getUserToken</td></tr></tbody><tbody><tr><td style=\"text-align: left;\">请求方式</td><td style=\"text-align: left;\">POST</td></tr><tr><td style=\"text-align: left;\">请求参数</td><td style=\"text-align: left;\">?<em>app_key=[]&amp;</em>time=[]&amp;_sign=[]</td></tr><tr><td style=\"text-align: left;\">请求正文</td><td style=\"text-align: left;\">{&quot;account&quot;:&quot;账号信息&quot;}</td></tr><tr><td style=\"text-align: left;\">响应正文</td><td style=\"text-align: left;\">{&quot;result&quot;: { &quot;token&quot;: &quot;&quot;,&quot;user_id&quot;: ?},&quot;status&quot;: 0}</td></tr></tbody></table><p><br /></p><p>按照接口约定，配置相关的Postman请求：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322460-8c90133f-a238-41fc-bfe4-a45b75283ec3.png#align=left&amp;display=inline&amp;height=269&amp;linkTarget=_blank&amp;originHeight=356&amp;originWidth=989&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322148-8902bf8b-c04a-4843-9f6f-ad10160bafd1.png#align=left&amp;display=inline&amp;height=226&amp;linkTarget=_blank&amp;originHeight=302&amp;originWidth=995&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n上图上中的{{<em>time}}、{{</em>sign}}变量目前还取不到值，因为在环境变量中还没有相关定义，<br />\n现在开始编写相关的Pre-Request-Script脚本：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322321-71534694-4d55-4f7f-9bfa-12c68e920190.png#align=left&amp;display=inline&amp;height=312&amp;linkTarget=_blank&amp;originHeight=415&amp;originWidth=993&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><pre data-lang=\"javascript\"><code>// 前置处理器：计算请求签名\nvar _app_secret = pm.environment.get(&quot;provider_app_secret&quot;);\nvar _time = (new Date()).valueOf();\nvar _pre_sign = 'requestBody=' + pm.request.body.raw + ',time=' + _time + ',appSecret=' + _app_secret;\nvar _sign = CryptoJS.MD5(_pre_sign).toString();\npm.environment.set(&quot;_time&quot;, _time);\npm.environment.set(&quot;_sign&quot;, _sign);\n\nconsole.log('[Pre]OpenAccountApi.getUserToken _pre_sign='+_pre_sign+',_sign=' + _sign);</code></pre><p><br /></p><p>该脚本完成后，之前参数中使用{{_sign}}的就能动态的获取到值了。</p><p><br /></p><p>请求发送成功后，需要提取响应正文的token作为下一个接口的参数，取出来放入Postman环境变量中即可。<br />\n编写相关的Tests-Script脚本：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005321578-7af46acc-0ed9-42d7-b509-4d11f31f8354.png#align=left&amp;display=inline&amp;height=282&amp;linkTarget=_blank&amp;originHeight=420&amp;originWidth=1112&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><pre data-lang=\"javascript\"><code>// 响应断言\npm.test(&quot;Body matches token&quot;, function () {\n    pm.expect(pm.response.text()).to.include(&quot;\\&quot;token\\&quot;:&quot;);\n\n    // 提取Token\n    var result = pm.response.json().result;\n    pm.environment.set(&quot;_userid&quot;, result.user_id);\n    pm.environment.set(&quot;_token&quot;, result.token);\n    console.log('[Tests]OpenAccountApi.getUserToken _token=' + result.token + ',user_id=' + result.user_id);\n});</code></pre><p><br /></p><h3 id=\"OpenUserApi.findById\">OpenUserApi.findById</h3><p><br /></p><table class=\"lake-table\" style=\"width: 721px;\"><colgroup><col width=\"107\"></col><col width=\"613\"></col></colgroup><tbody><tr><td>接口地址</td><td>http://{{host}}/api2/OpenAccountApi.getUserToken</td></tr></tbody><tbody><tr><td>请求方式</td><td>POST</td></tr><tr><td>请求参数</td><td>?_token=[]</td></tr><tr><td>请求正文</td><td>{&quot;id&quot;:用户Id}</td></tr><tr><td>响应正文</td><td>{&quot;result&quot;: {用户信息},&quot;status&quot;: 0}</td></tr></tbody></table><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322070-0c8b8b3c-7a60-413f-8a1f-8d40ee0d3307.png#align=left&amp;display=inline&amp;height=205&amp;linkTarget=_blank&amp;originHeight=303&amp;originWidth=1105&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005321562-6aaaa420-95eb-4a19-8443-63276ce4058b.png#align=left&amp;display=inline&amp;height=206&amp;linkTarget=_blank&amp;originHeight=300&amp;originWidth=1085&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n第二个接口没有什么特殊处理，写了个简单的响应断言，若响应正文中包含&quot;status&quot;:0，则表明请求成功了。</p><p><br /></p><pre data-lang=\"javascript\"><code>console.log('[Tests]OpenUserApi.findById, requestBody=' + pm.request.body.raw);\n\npm.test(&quot;Body matches status&quot;, function () {\n    pm.expect(pm.response.json().status).to.eql(0);\n});</code></pre><p><br /></p><h3 id=\"494849b9\">最终的测试效果</h3><p><br /></p><blockquote><p>按Ctrl + Shift + I 可以弹出开发者面板，查看到打印的相关日志。</p></blockquote><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322610-cfde8098-037c-4afa-a7d9-67b2e5bea4c6.png#align=left&amp;display=inline&amp;height=216&amp;linkTarget=_blank&amp;originHeight=488&amp;originWidth=1682&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005323380-44d5f41f-c6f1-46b2-8b52-f20ede96ab14.png#align=left&amp;display=inline&amp;height=394&amp;linkTarget=_blank&amp;originHeight=885&amp;originWidth=1677&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"2237a7ca\">Collection Runner</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005323282-e9a64a7d-b766-4fbf-abee-8247148617ae.png#align=left&amp;display=inline&amp;height=619&amp;linkTarget=_blank&amp;originHeight=1042&amp;originWidth=1256&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005322675-0747e8f6-055b-4c18-9acb-fd8e50a60d01.png#align=left&amp;display=inline&amp;height=358&amp;linkTarget=_blank&amp;originHeight=540&amp;originWidth=1124&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"284a98fa\">运行日志</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549005321608-71169eb6-f8c0-45a6-83df-f28efea8afc7.png#align=left&amp;display=inline&amp;height=527&amp;linkTarget=_blank&amp;originHeight=682&amp;originWidth=965&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:16:26.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:14:34.000Z",
    "updated_at": "2019-02-01T07:16:26.000Z",
    "published_at": "2019-02-01T07:16:26.000Z",
    "first_published_at": "2019-02-01T07:16:26.000Z",
    "word_count": 739,
    "cover": "",
    "description": "date: 2018-11-13 15:46:59tags: [&quot;Postman&quot;,&quot;自动化测试&quot;]身为一个接口自动化测试工具，具备在运行中的动态行为不足为奇，Postman集成了一个强大的，基于NodeJS的Script引擎，利用它可以为请求以及响应添...",
    "custom_description": "身为一个接口自动化测试工具，具备在运行中的动态行为不足为奇，Postman集成了一个强大的，基于NodeJS的Script引擎，利用它可以为请求以及响应添加一些动态的行为：",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224345,
    "slug": "mysql-emoji-config",
    "title": "MySQL Emoji 表情字符支持",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-11-1 15:25:19<br />tags: [\"MySQL\",\"Emoji\"]\n---\n\nutf-8编码可能2个字节、3个字节、4个字节的字符，但是MySQL的utf8编码只支持3字节的数据，而移动端的表情数据是4个字节的字符。如果直接往采用utf-8编码的数据库中插入表情数据，Java程序中将报SQL异常：\n\n```java\njava.sql.SQLException: Incorrect string value: ‘\\xF0\\x9F\\x92\\x94’ for column ‘name’ at row 1\n```\n\n针对该问题处理最简单的方式是更改数据库的编码为utf8mb4，直接将问题扼杀在摇篮中。\n## 前置条件\n\n* MySQL服务器版本不能低于5.5.3;\n* MySQL驱动版本不能低于5.1.13;\n\n## 配置文件调整(my.cnf)\n\n```ini\n[client] \ndefault-character-set = utf8mb4 \n[mysql] \ndefault-character-set = utf8mb4 \n[mysqld] \ncharacter-set-client-handshake = FALSE \ncharacter-set-server = utf8mb4 \ncollation-server = utf8mb4_general_ci \ninit_connect='SET NAMES utf8mb4'\n```\n\n重启数据库。\n\n## 检查数据库变量\n\n```sql\nSHOW VARIABLES WHERE Variable_name LIKE 'character_set_%' OR Variable_name LIKE 'collation%';\n```\n\n| Variable_name | Value |\n| :---: | :---: |\n| character_set_client | utf8mb4 |\n| character_set_connection | utf8mb4 |\n| character_set_database | utf8mb4 |\n| character_set_filesystem | binary |\n| character_set_results | utf8mb4 |\n| character_set_server | utf8mb4 |\n| character_set_system | utf8mb4 |\n| collation_connection | utf8mb4_general_ci |\n| collation_database | utf8mb4_general_ci |\n| collation_server | utf8mb4_general_ci |\n\n\n## 更改现有数据库、表、字段编码\n\n```sql\nALTER DATABASE `ticketdb` CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nALTER TABLE `ticket_description` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nALTER TABLE `ticket_description`\nMODIFY COLUMN `description`  text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '工单描述' AFTER `id`;\n```\n\n如此一来，emoji表情应该不是问题了。\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-11-1 15:25:19</p><p>tags: [&quot;MySQL&quot;,&quot;Emoji&quot;]</p><hr /><p><br /></p><p>utf-8编码可能2个字节、3个字节、4个字节的字符，但是MySQL的utf8编码只支持3字节的数据，而移动端的表情数据是4个字节的字符。如果直接往采用utf-8编码的数据库中插入表情数据，Java程序中将报SQL异常：</p><p><br /></p><pre data-lang=\"java\"><code>java.sql.SQLException: Incorrect string value: ‘\\xF0\\x9F\\x92\\x94’ for column ‘name’ at row 1</code></pre><p><br /></p><p>针对该问题处理最简单的方式是更改数据库的编码为utf8mb4，直接将问题扼杀在摇篮中。</p><h2 id=\"852abae7\">前置条件</h2><p><br /></p><ul><li>MySQL服务器版本不能低于5.5.3;</li></ul><ul><li>MySQL驱动版本不能低于5.1.13;</li></ul><p><br /></p><h2 id=\"abbe933b\">配置文件调整(my.cnf)</h2><p><br /></p><pre data-lang=\"ini\"><code>[client] \ndefault-character-set = utf8mb4 \n[mysql] \ndefault-character-set = utf8mb4 \n[mysqld] \ncharacter-set-client-handshake = FALSE \ncharacter-set-server = utf8mb4 \ncollation-server = utf8mb4_general_ci \ninit_connect='SET NAMES utf8mb4'</code></pre><p><br /></p><p>重启数据库。</p><p><br /></p><h2 id=\"15d496d5\">检查数据库变量</h2><p><br /></p><pre data-lang=\"sql\"><code>SHOW VARIABLES WHERE Variable_name LIKE 'character_set_%' OR Variable_name LIKE 'collation%';</code></pre><p><br /></p><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"360\"></col><col width=\"361\"></col></colgroup><tbody><tr><td style=\"text-align: center;\">Variable_name</td><td style=\"text-align: center;\">Value</td></tr></tbody><tbody><tr><td style=\"text-align: center;\">character_set_client</td><td style=\"text-align: center;\">utf8mb4</td></tr><tr><td style=\"text-align: center;\">character_set_connection</td><td style=\"text-align: center;\">utf8mb4</td></tr><tr><td style=\"text-align: center;\">character_set_database</td><td style=\"text-align: center;\">utf8mb4</td></tr><tr><td style=\"text-align: center;\">character_set_filesystem</td><td style=\"text-align: center;\">binary</td></tr><tr><td style=\"text-align: center;\">character_set_results</td><td style=\"text-align: center;\">utf8mb4</td></tr><tr><td style=\"text-align: center;\">character_set_server</td><td style=\"text-align: center;\">utf8mb4</td></tr><tr><td style=\"text-align: center;\">character_set_system</td><td style=\"text-align: center;\">utf8mb4</td></tr><tr><td style=\"text-align: center;\">collation_connection</td><td style=\"text-align: center;\">utf8mb4_general_ci</td></tr><tr><td style=\"text-align: center;\">collation_database</td><td style=\"text-align: center;\">utf8mb4_general_ci</td></tr><tr><td style=\"text-align: center;\">collation_server</td><td style=\"text-align: center;\">utf8mb4_general_ci</td></tr></tbody></table><p><br /></p><h2 id=\"6d372936\">更改现有数据库、表、字段编码</h2><p><br /></p><pre data-lang=\"sql\"><code>ALTER DATABASE `ticketdb` CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nALTER TABLE `ticket_description` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nALTER TABLE `ticket_description`\nMODIFY COLUMN `description`  text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '工单描述' AFTER `id`;</code></pre><p><br /></p><p>如此一来，emoji表情应该不是问题了。</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:14:28.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:12:18.000Z",
    "updated_at": "2019-02-01T07:14:29.000Z",
    "published_at": "2019-02-01T07:14:28.000Z",
    "first_published_at": "2019-02-01T07:14:28.000Z",
    "word_count": 365,
    "cover": "",
    "description": "date: 2018-11-1 15:25:19tags: [&quot;MySQL&quot;,&quot;Emoji&quot;]utf-8编码可能2个字节、3个字节、4个字节的字符，但是MySQL的utf8编码只支持3字节的数据，而移动端的表情数据是4个字节的字符。如果直接往采用utf-...",
    "custom_description": "utf-8编码可能2个字节、3个字节、4个字节的字符，但是MySQL的utf8编码只支持3字节的数据，而移动端的表情数据是4个字节的字符。如果直接往采用utf-8编码的数据库中插入表情数据，Java程序中将报SQL异常：\n",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224338,
    "slug": "mybatis-plus-multi-tenancy",
    "title": "使用Mybatis Plus优雅实现多租户架构",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-11-29 20:35:02<br />tags: [\"MybatisPlus\",\"Mybatis\",\"SpringBoot\"]\n---\n在进行多租户架构`(Multi-tenancy)`实现之前，先了解一下相关的定义吧：\n\n## 什么是多租户\n\n多租户技术或称多重租赁技术，简称`SaaS`，是一种软件架构技术，是实现如何在多用户环境下（此处的多用户一般是面向企业用户）共用相同的系统或程序组件，并且可确保各用户间数据的隔离性。<br />\n简单讲：在一台服务器上运行单个应用实例，它为多个租户（客户）提供服务。从定义中我们可以理解：多租户是一种架构，目的是为了让多用户环境下使用同一套程序，且保证用户间数据隔离。那么重点就很浅显易懂了，多租户的重点就是同一套程序下实现多用户数据的隔离。\n\n## 数据隔离方案\n\n多租户在数据存储上存在三种主要的方案，分别是：\n\n### 独立数据库\n\n即一个租户一个数据库，这种方案的用户数据隔离级别最高，安全性最好，但成本较高。\n\n* 优点：为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求；如果出现故障，恢复数据比较简单。\n* 缺点：增多了数据库的安装数量，随之带来维护成本和购置成本的增加。\n\n### 共享数据库，独立 Schema\n\n多个或所有租户共享Database，但是每个租户一个Schema（也可叫做一个user）。底层库比如是：DB2、ORACLE等，一个数据库下可以有多个SCHEMA。\n\n* 优点：为安全性要求较高的租户提供了一定程度的逻辑数据隔离，并不是完全隔离；每个数据库可支持更多的租户数量。\n* 缺点：如果出现故障，数据恢复比较困难，因为恢复数据库将牵涉到其他租户的数据；\n\n### 共享数据库，共享 Schema，共享数据表\n\n即租户共享同一个Database、同一个Schema，但在表中增加TenantID多租户的数据字段。这是共享程度最高、隔离级别最低的模式。\n\n简单来讲，即每插入一条数据时都需要有一个客户的标识。这样才能在同一张表中区分出不同客户的数据，这也是我们系统目前用到的(provider_id)\n\n* 优点：三种方案比较，第三种方案的维护和购置成本最低，允许每个数据库支持的租户数量最多。\n* 缺点：隔离级别最低，安全性最低，需要在设计开发时加大对安全的开发量； 数据备份和恢复最困难，需要逐表逐条备份和还原。\n## 利用MybatisPlus实现\n\n这里我们选用了第三种方案`（共享数据库，共享 Schema，共享数据表）`来实现，也就意味着，每个数据表都需要有一个租户标识`(provider_id)`\n\n---\n\n现在有数据库表`(user)`如下：\n\n| 字段名 | 字段类型 | 描述 |\n| :--- | :--- | :--- |\n| id | BIGINT(20) | 主键 |\n| provider_id | BIGINT(20) | 服务商ID |\n| name | VARCHAR(30) | 姓名 |\n\n\n将`provider_id`视为租户ID，用来隔离租户与租户之间的数据，如果要查询当前服务商的用户，SQL大致如下：\n\n```sql\nSELECT * FROM user t WHERE t.name LIKE '%Tom%' AND t.provider_id = 1;\n```\n\n试想一下，除了一些系统共用的表以外，其他租户相关的表，我们都需要不厌其烦的加上`AND t.provider_id = ?`查询条件，稍不注意就会导致数据越界，数据安全问题让人担忧。\n\n好在有了MybatisPlus这个神器，可以极为方便的实现`多租户SQL解析器`，官方文档如下：<br />\n[http://mp.baomidou.com/guide/tenant.html](http://mp.baomidou.com/guide/tenant.html)\n\n> 这里终于进入了正题，开始搭建一个极为简单的开发环境吧!\n\n\n### 新建SpringBoot环境\n\n> POM文件如下，主要集成了MybatisPlus以及H2数据库(方便测试)\n\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.wuwenze</groupId>\n    <artifactId>mybatis-plus-multi-tenancy</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>mybatis-plus-multi-tenancy</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.0.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.google.guava</groupId>\n            <artifactId>guava</artifactId>\n            <version>19.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.0.5</version>\n        </dependency>\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus</artifactId>\n            <version>3.0.5</version>\n        </dependency>\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-generator</artifactId>\n            <version>3.0.5</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n> 数据源配置(application.yml)\n\n\n```yml\nspring:\n  datasource:\n    driver-class-name: org.h2.Driver\n    schema: classpath:db/schema.sql\n    data: classpath:db/data.sql\n    url: jdbc:h2:mem:test\n    username: root\n    password: test\n\nlogging:\n  level:\n    com.wuwenze.mybatisplusmultitenancy: debug\n```\n\n> 对应的H2数据库初始化schema文件\n\n\n```sql\n#schema.sql\nDROP TABLE IF EXISTS user;\nCREATE TABLE user\n(\n\tid BIGINT(20) NOT NULL COMMENT '主键',\n\tprovider_id BIGINT(20) NOT NULL COMMENT '服务商ID',\n\tname VARCHAR(30) NULL DEFAULT NULL COMMENT '姓名',\n\tPRIMARY KEY (id)\n);\n\n\n#data.sql\nINSERT INTO user (id, provider_id, name) VALUES (1, 1, 'Tony老师');\nINSERT INTO user (id, provider_id, name) VALUES (2, 1, 'William老师');\nINSERT INTO user (id, provider_id, name) VALUES (3, 2, '路人甲');\nINSERT INTO user (id, provider_id, name) VALUES (4, 2, '路人乙');\nINSERT INTO user (id, provider_id, name) VALUES (5, 2, '路人丙');\nINSERT INTO user (id, provider_id, name) VALUES (6, 2, '路人丁');\n```\n\n### MybatisPlus Config\n\n> 基础环境搭建完成，现在开始配置MybatisPlus多租户相关的实现。\n\n\n1. 核心配置：TenantSqlParser\n\n```java\n@Configuration\n@MapperScan(\"com.wuwenze.mybatisplusmultitenancy.mapper\")\npublic class MybatisPlusConfig {\n\n    private static final String SYSTEM_TENANT_ID = \"provider_id\";\n    private static final List<String> IGNORE_TENANT_TABLES = Lists.newArrayList(\"provider\");\n\n    @Autowired\n    private ApiContext apiContext;\n\n    @Bean\n    public PaginationInterceptor paginationInterceptor() {\n        PaginationInterceptor paginationInterceptor = new PaginationInterceptor();\n\n        // SQL解析处理拦截：增加租户处理回调。\n        TenantSqlParser tenantSqlParser = new TenantSqlParser()\n                .setTenantHandler(new TenantHandler() {\n\n                    @Override\n                    public Expression getTenantId() {\n                        // 从当前系统上下文中取出当前请求的服务商ID，通过解析器注入到SQL中。\n                        Long currentProviderId = apiContext.getCurrentProviderId();\n                        if (null == currentProviderId) {\n                            throw new RuntimeException(\"#1129 getCurrentProviderId error.\");\n                        }\n                        return new LongValue(currentProviderId);\n                    }\n\n                    @Override\n                    public String getTenantIdColumn() {\n                        return SYSTEM_TENANT_ID;\n                    }\n\n                    @Override\n                    public boolean doTableFilter(String tableName) {\n                        // 忽略掉一些表：如租户表（provider）本身不需要执行这样的处理。\n                        return IGNORE_TENANT_TABLES.stream().anyMatch((e) -> e.equalsIgnoreCase(tableName));\n                    }\n                });\n        paginationInterceptor.setSqlParserList(Lists.newArrayList(tenantSqlParser));\n        return paginationInterceptor;\n    }\n\n    @Bean(name = \"performanceInterceptor\")\n    public PerformanceInterceptor performanceInterceptor() {\n        return new PerformanceInterceptor();\n    }\n}\n```\n\n1. ApiContext\n\n```java\n@Component\npublic class ApiContext {\n    private static final String KEY_CURRENT_PROVIDER_ID = \"KEY_CURRENT_PROVIDER_ID\";\n    private static final Map<String, Object> mContext = Maps.newConcurrentMap();\n\n    public void setCurrentProviderId(Long providerId) {\n        mContext.put(KEY_CURRENT_PROVIDER_ID, providerId);\n    }\n\n    public Long getCurrentProviderId() {\n        return (Long) mContext.get(KEY_CURRENT_PROVIDER_ID);\n    }\n}\n```\n\n1. Entity、Mapper\n\n```java\n@Data\n@ToString\n@Accessors(chain = true)\npublic class User {\n    private Long id;\n    private Long providerId;\n    private String name;\n}\n\npublic interface UserMapper extends BaseMapper<User> {\n\n}\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004942725-d0b8e12c-e5bd-4f73-aac9-044185c40978.png#align=left&display=inline&height=570&linkTarget=_blank&originHeight=1007&originWidth=1317&size=0&width=746)\n\n### 单元测试\n\n> com.wuwenze.mybatisplusmultitenancy.MybatisPlusMultiTenancyApplicationTests\n\n\n```java\n@Slf4j\n@RunWith(SpringRunner.class)\n@FixMethodOrder(MethodSorters.JVM)\n@SpringBootTest(classes = MybatisPlusMultiTenancyApplication.class)\npublic class MybatisPlusMultiTenancyApplicationTests {\n\n\n    @Autowired\n    private ApiContext apiContext;\n\n    @Autowired\n    private UserMapper userMapper;\n\n    @Before\n    public void before() {\n        // 在上下文中设置当前服务商的ID\n        apiContext.setCurrentProviderId(1L);\n    }\n\n    @Test\n    public void insert() {\n        User user = new User().setName(\"新来的Tom老师\");\n        Assert.assertTrue(userMapper.insert(user) > 0);\n\n        user = userMapper.selectById(user.getId());\n        log.info(\"#insert user={}\", user);\n\n        // 检查插入的数据是否自动填充了租户ID\n        Assert.assertEquals(apiContext.getCurrentProviderId(), user.getProviderId());\n    }\n\n    @Test\n    public void selectList() {\n        userMapper.selectList(null).forEach((e) -> {\n            log.info(\"#selectList, e={}\", e);\n            // 验证查询的数据是否超出范围\n            Assert.assertEquals(apiContext.getCurrentProviderId(), e.getProviderId());\n        });\n    }\n}\n```\n\n> 运行结果\n\n\n```\n2018-11-29 21:07:14.262  INFO 18688 --- [           main] .MybatisPlusMultiTenancyApplicationTests : Started MybatisPlusMultiTenancyApplicationTests in 2.629 seconds (JVM running for 3.904)\n2018-11-29 21:07:14.554 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.insert           : ==>  Preparing: INSERT INTO user (id, name, provider_id) VALUES (?, ?, 1)\n2018-11-29 21:07:14.577 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.insert           : ==> Parameters: 1068129257418178562(Long), 新来的Tom老师(String)\n2018-11-29 21:07:14.577 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.insert           : <==    Updates: 1\n Time：0 ms - ID：com.wuwenze.mybatisplusmultitenancy.mapper.UserMapper.insert\nExecute SQL：INSERT INTO user (id, name, provider_id) VALUES (?, ?, 1) {1: 1068129257418178562, 2: STRINGDECODE('\\u65b0\\u6765\\u7684Tom\\u8001\\u5e08')}\n\n2018-11-29 21:07:14.585 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.selectById       : ==>  Preparing: SELECT id, provider_id, name FROM user WHERE user.provider_id = 1 AND id = ?\n2018-11-29 21:07:14.595 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.selectById       : ==> Parameters: 1068129257418178562(Long)\n2018-11-29 21:07:14.614 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.selectById       : <==      Total: 1\n2018-11-29 21:07:14.615  INFO 18688 --- [           main] .MybatisPlusMultiTenancyApplicationTests : #insert user=User(id=1068129257418178562, providerId=1, name=新来的Tom老师)\n Time：19 ms - ID：com.wuwenze.mybatisplusmultitenancy.mapper.UserMapper.selectById\nExecute SQL：SELECT id, provider_id, name FROM user WHERE user.provider_id = 1 AND id = ? {1: 1068129257418178562}\n\n2018-11-29 21:07:14.626 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.selectList       : ==>  Preparing: SELECT id, provider_id, name FROM user WHERE user.provider_id = 1\n Time：0 ms - ID：com.wuwenze.mybatisplusmultitenancy.mapper.UserMapper.selectList\nExecute SQL：SELECT id, provider_id, name FROM user WHERE user.provider_id = 1\n\n2018-11-29 21:07:14.629 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.selectList       : ==> Parameters:\n2018-11-29 21:07:14.630 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.selectList       : <==      Total: 3\n2018-11-29 21:07:14.632  INFO 18688 --- [           main] .MybatisPlusMultiTenancyApplicationTests : #selectList, e=User(id=1, providerId=1, name=Tony老师)\n2018-11-29 21:07:14.632  INFO 18688 --- [           main] .MybatisPlusMultiTenancyApplicationTests : #selectList, e=User(id=2, providerId=1, name=William老师)\n2018-11-29 21:07:14.632  INFO 18688 --- [           main] .MybatisPlusMultiTenancyApplicationTests : #selectList, e=User(id=1068129257418178562, providerId=1, name=新来的Tom老师)\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004941710-376f2197-c3b5-4aae-9f81-3bf065dcfc06.png#align=left&display=inline&height=195&linkTarget=_blank&originHeight=389&originWidth=1492&size=0&width=746)\n\n从打印的日志不难看出，这个方案相当完美，仅需简单的配置，让开发者完全忽略了(provider_id)字段的存在，同时又最大程度的保证了数据的安全性，可谓是一举两得！\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-11-29 20:35:02</p><p>tags: [&quot;MybatisPlus&quot;,&quot;Mybatis&quot;,&quot;SpringBoot&quot;]</p><hr /><p>在进行多租户架构<code>(Multi-tenancy)</code>实现之前，先了解一下相关的定义吧：</p><p><br /></p><h2 id=\"cf21e1b5\">什么是多租户</h2><p><br /></p><p>多租户技术或称多重租赁技术，简称<code>SaaS</code>，是一种软件架构技术，是实现如何在多用户环境下（此处的多用户一般是面向企业用户）共用相同的系统或程序组件，并且可确保各用户间数据的隔离性。<br />\n简单讲：在一台服务器上运行单个应用实例，它为多个租户（客户）提供服务。从定义中我们可以理解：多租户是一种架构，目的是为了让多用户环境下使用同一套程序，且保证用户间数据隔离。那么重点就很浅显易懂了，多租户的重点就是同一套程序下实现多用户数据的隔离。</p><p><br /></p><h2 id=\"864d970b\">数据隔离方案</h2><p><br /></p><p>多租户在数据存储上存在三种主要的方案，分别是：</p><p><br /></p><h3 id=\"408872c4\">独立数据库</h3><p><br /></p><p>即一个租户一个数据库，这种方案的用户数据隔离级别最高，安全性最好，但成本较高。</p><p><br /></p><ul><li>优点：为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求；如果出现故障，恢复数据比较简单。</li></ul><ul><li>缺点：增多了数据库的安装数量，随之带来维护成本和购置成本的增加。</li></ul><p><br /></p><h3 id=\"68a978bb\">共享数据库，独立 Schema</h3><p><br /></p><p>多个或所有租户共享Database，但是每个租户一个Schema（也可叫做一个user）。底层库比如是：DB2、ORACLE等，一个数据库下可以有多个SCHEMA。</p><p><br /></p><ul><li>优点：为安全性要求较高的租户提供了一定程度的逻辑数据隔离，并不是完全隔离；每个数据库可支持更多的租户数量。</li></ul><ul><li>缺点：如果出现故障，数据恢复比较困难，因为恢复数据库将牵涉到其他租户的数据；</li></ul><p><br /></p><h3 id=\"977647fd\">共享数据库，共享 Schema，共享数据表</h3><p><br /></p><p>即租户共享同一个Database、同一个Schema，但在表中增加TenantID多租户的数据字段。这是共享程度最高、隔离级别最低的模式。</p><p><br /></p><p>简单来讲，即每插入一条数据时都需要有一个客户的标识。这样才能在同一张表中区分出不同客户的数据，这也是我们系统目前用到的(provider_id)</p><p><br /></p><ul><li>优点：三种方案比较，第三种方案的维护和购置成本最低，允许每个数据库支持的租户数量最多。</li></ul><ul><li>缺点：隔离级别最低，安全性最低，需要在设计开发时加大对安全的开发量； 数据备份和恢复最困难，需要逐表逐条备份和还原。</li></ul><h2 id=\"fccbcb06\">利用MybatisPlus实现</h2><p><br /></p><p>这里我们选用了第三种方案<code>（共享数据库，共享 Schema，共享数据表）</code>来实现，也就意味着，每个数据表都需要有一个租户标识<code>(provider_id)</code></p><p><br /></p><hr /><p><br /></p><p>现在有数据库表<code>(user)</code>如下：</p><p><br /></p><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"240\"></col><col width=\"240\"></col><col width=\"241\"></col></colgroup><tbody><tr><td style=\"text-align: left;\">字段名</td><td style=\"text-align: left;\">字段类型</td><td style=\"text-align: left;\">描述</td></tr></tbody><tbody><tr><td style=\"text-align: left;\">id</td><td style=\"text-align: left;\">BIGINT(20)</td><td style=\"text-align: left;\">主键</td></tr><tr><td style=\"text-align: left;\">provider_id</td><td style=\"text-align: left;\">BIGINT(20)</td><td style=\"text-align: left;\">服务商ID</td></tr><tr><td style=\"text-align: left;\">name</td><td style=\"text-align: left;\">VARCHAR(30)</td><td style=\"text-align: left;\">姓名</td></tr></tbody></table><p><br /></p><p>将<code>provider_id</code>视为租户ID，用来隔离租户与租户之间的数据，如果要查询当前服务商的用户，SQL大致如下：</p><p><br /></p><pre data-lang=\"sql\"><code>SELECT * FROM user t WHERE t.name LIKE '%Tom%' AND t.provider_id = 1;</code></pre><p><br /></p><p>试想一下，除了一些系统共用的表以外，其他租户相关的表，我们都需要不厌其烦的加上<code>AND t.provider_id = ?</code>查询条件，稍不注意就会导致数据越界，数据安全问题让人担忧。</p><p><br /></p><p>好在有了MybatisPlus这个神器，可以极为方便的实现<code>多租户SQL解析器</code>，官方文档如下：<br />\n<a href=\"http://mp.baomidou.com/guide/tenant.html\" target=\"_blank\">http://mp.baomidou.com/guide/tenant.html</a></p><p><br /></p><blockquote><p>这里终于进入了正题，开始搭建一个极为简单的开发环境吧!</p></blockquote><p><br /></p><h3 id=\"4aedabbb\">新建SpringBoot环境</h3><p><br /></p><blockquote><p>POM文件如下，主要集成了MybatisPlus以及H2数据库(方便测试)</p></blockquote><p><br /></p><pre data-lang=\"xml\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.wuwenze&lt;/groupId&gt;\n    &lt;artifactId&gt;mybatis-plus-multi-tenancy&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;jar&lt;/packaging&gt;\n\n    &lt;name&gt;mybatis-plus-multi-tenancy&lt;/name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n\n    &lt;properties&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n            &lt;artifactId&gt;guava&lt;/artifactId&gt;\n            &lt;version&gt;19.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;3.0.5&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt;\n            &lt;version&gt;3.0.5&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;\n            &lt;version&gt;3.0.5&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n            &lt;artifactId&gt;h2&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;</code></pre><p><br /></p><blockquote><p>数据源配置(application.yml)</p></blockquote><p><br /></p><pre data-lang=\"yml\"><code>spring:\n  datasource:\n    driver-class-name: org.h2.Driver\n    schema: classpath:db/schema.sql\n    data: classpath:db/data.sql\n    url: jdbc:h2:mem:test\n    username: root\n    password: test\n\nlogging:\n  level:\n    com.wuwenze.mybatisplusmultitenancy: debug</code></pre><p><br /></p><blockquote><p>对应的H2数据库初始化schema文件</p></blockquote><p><br /></p><pre data-lang=\"sql\"><code>#schema.sql\nDROP TABLE IF EXISTS user;\nCREATE TABLE user\n(\n\tid BIGINT(20) NOT NULL COMMENT '主键',\n\tprovider_id BIGINT(20) NOT NULL COMMENT '服务商ID',\n\tname VARCHAR(30) NULL DEFAULT NULL COMMENT '姓名',\n\tPRIMARY KEY (id)\n);\n\n\n#data.sql\nINSERT INTO user (id, provider_id, name) VALUES (1, 1, 'Tony老师');\nINSERT INTO user (id, provider_id, name) VALUES (2, 1, 'William老师');\nINSERT INTO user (id, provider_id, name) VALUES (3, 2, '路人甲');\nINSERT INTO user (id, provider_id, name) VALUES (4, 2, '路人乙');\nINSERT INTO user (id, provider_id, name) VALUES (5, 2, '路人丙');\nINSERT INTO user (id, provider_id, name) VALUES (6, 2, '路人丁');</code></pre><p><br /></p><h3 id=\"65a12943\">MybatisPlus Config</h3><p><br /></p><blockquote><p>基础环境搭建完成，现在开始配置MybatisPlus多租户相关的实现。</p></blockquote><p><br /></p><ol start=\"1\"><li>核心配置：TenantSqlParser</li></ol><p><br /></p><pre data-lang=\"java\"><code>@Configuration\n@MapperScan(&quot;com.wuwenze.mybatisplusmultitenancy.mapper&quot;)\npublic class MybatisPlusConfig {\n\n    private static final String SYSTEM_TENANT_ID = &quot;provider_id&quot;;\n    private static final List&lt;String&gt; IGNORE_TENANT_TABLES = Lists.newArrayList(&quot;provider&quot;);\n\n    @Autowired\n    private ApiContext apiContext;\n\n    @Bean\n    public PaginationInterceptor paginationInterceptor() {\n        PaginationInterceptor paginationInterceptor = new PaginationInterceptor();\n\n        // SQL解析处理拦截：增加租户处理回调。\n        TenantSqlParser tenantSqlParser = new TenantSqlParser()\n                .setTenantHandler(new TenantHandler() {\n\n                    @Override\n                    public Expression getTenantId() {\n                        // 从当前系统上下文中取出当前请求的服务商ID，通过解析器注入到SQL中。\n                        Long currentProviderId = apiContext.getCurrentProviderId();\n                        if (null == currentProviderId) {\n                            throw new RuntimeException(&quot;#1129 getCurrentProviderId error.&quot;);\n                        }\n                        return new LongValue(currentProviderId);\n                    }\n\n                    @Override\n                    public String getTenantIdColumn() {\n                        return SYSTEM_TENANT_ID;\n                    }\n\n                    @Override\n                    public boolean doTableFilter(String tableName) {\n                        // 忽略掉一些表：如租户表（provider）本身不需要执行这样的处理。\n                        return IGNORE_TENANT_TABLES.stream().anyMatch((e) -&gt; e.equalsIgnoreCase(tableName));\n                    }\n                });\n        paginationInterceptor.setSqlParserList(Lists.newArrayList(tenantSqlParser));\n        return paginationInterceptor;\n    }\n\n    @Bean(name = &quot;performanceInterceptor&quot;)\n    public PerformanceInterceptor performanceInterceptor() {\n        return new PerformanceInterceptor();\n    }\n}</code></pre><p><br /></p><ol start=\"2\"><li>ApiContext</li></ol><p><br /></p><pre data-lang=\"java\"><code>@Component\npublic class ApiContext {\n    private static final String KEY_CURRENT_PROVIDER_ID = &quot;KEY_CURRENT_PROVIDER_ID&quot;;\n    private static final Map&lt;String, Object&gt; mContext = Maps.newConcurrentMap();\n\n    public void setCurrentProviderId(Long providerId) {\n        mContext.put(KEY_CURRENT_PROVIDER_ID, providerId);\n    }\n\n    public Long getCurrentProviderId() {\n        return (Long) mContext.get(KEY_CURRENT_PROVIDER_ID);\n    }\n}</code></pre><p><br /></p><ol start=\"3\"><li>Entity、Mapper</li></ol><p><br /></p><pre data-lang=\"java\"><code>@Data\n@ToString\n@Accessors(chain = true)\npublic class User {\n    private Long id;\n    private Long providerId;\n    private String name;\n}\n\npublic interface UserMapper extends BaseMapper&lt;User&gt; {\n\n}</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004942725-d0b8e12c-e5bd-4f73-aac9-044185c40978.png#align=left&amp;display=inline&amp;height=570&amp;linkTarget=_blank&amp;originHeight=1007&amp;originWidth=1317&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"93b824b5\">单元测试</h3><p><br /></p><blockquote><p>com.wuwenze.mybatisplusmultitenancy.MybatisPlusMultiTenancyApplicationTests</p></blockquote><p><br /></p><pre data-lang=\"java\"><code>@Slf4j\n@RunWith(SpringRunner.class)\n@FixMethodOrder(MethodSorters.JVM)\n@SpringBootTest(classes = MybatisPlusMultiTenancyApplication.class)\npublic class MybatisPlusMultiTenancyApplicationTests {\n\n\n    @Autowired\n    private ApiContext apiContext;\n\n    @Autowired\n    private UserMapper userMapper;\n\n    @Before\n    public void before() {\n        // 在上下文中设置当前服务商的ID\n        apiContext.setCurrentProviderId(1L);\n    }\n\n    @Test\n    public void insert() {\n        User user = new User().setName(&quot;新来的Tom老师&quot;);\n        Assert.assertTrue(userMapper.insert(user) &gt; 0);\n\n        user = userMapper.selectById(user.getId());\n        log.info(&quot;#insert user={}&quot;, user);\n\n        // 检查插入的数据是否自动填充了租户ID\n        Assert.assertEquals(apiContext.getCurrentProviderId(), user.getProviderId());\n    }\n\n    @Test\n    public void selectList() {\n        userMapper.selectList(null).forEach((e) -&gt; {\n            log.info(&quot;#selectList, e={}&quot;, e);\n            // 验证查询的数据是否超出范围\n            Assert.assertEquals(apiContext.getCurrentProviderId(), e.getProviderId());\n        });\n    }\n}</code></pre><p><br /></p><blockquote><p>运行结果</p></blockquote><p><br /></p><pre><code>2018-11-29 21:07:14.262  INFO 18688 --- [           main] .MybatisPlusMultiTenancyApplicationTests : Started MybatisPlusMultiTenancyApplicationTests in 2.629 seconds (JVM running for 3.904)\n2018-11-29 21:07:14.554 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.insert           : ==&gt;  Preparing: INSERT INTO user (id, name, provider_id) VALUES (?, ?, 1)\n2018-11-29 21:07:14.577 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.insert           : ==&gt; Parameters: 1068129257418178562(Long), 新来的Tom老师(String)\n2018-11-29 21:07:14.577 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.insert           : &lt;==    Updates: 1\n Time：0 ms - ID：com.wuwenze.mybatisplusmultitenancy.mapper.UserMapper.insert\nExecute SQL：INSERT INTO user (id, name, provider_id) VALUES (?, ?, 1) {1: 1068129257418178562, 2: STRINGDECODE('\\u65b0\\u6765\\u7684Tom\\u8001\\u5e08')}\n\n2018-11-29 21:07:14.585 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.selectById       : ==&gt;  Preparing: SELECT id, provider_id, name FROM user WHERE user.provider_id = 1 AND id = ?\n2018-11-29 21:07:14.595 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.selectById       : ==&gt; Parameters: 1068129257418178562(Long)\n2018-11-29 21:07:14.614 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.selectById       : &lt;==      Total: 1\n2018-11-29 21:07:14.615  INFO 18688 --- [           main] .MybatisPlusMultiTenancyApplicationTests : #insert user=User(id=1068129257418178562, providerId=1, name=新来的Tom老师)\n Time：19 ms - ID：com.wuwenze.mybatisplusmultitenancy.mapper.UserMapper.selectById\nExecute SQL：SELECT id, provider_id, name FROM user WHERE user.provider_id = 1 AND id = ? {1: 1068129257418178562}\n\n2018-11-29 21:07:14.626 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.selectList       : ==&gt;  Preparing: SELECT id, provider_id, name FROM user WHERE user.provider_id = 1\n Time：0 ms - ID：com.wuwenze.mybatisplusmultitenancy.mapper.UserMapper.selectList\nExecute SQL：SELECT id, provider_id, name FROM user WHERE user.provider_id = 1\n\n2018-11-29 21:07:14.629 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.selectList       : ==&gt; Parameters:\n2018-11-29 21:07:14.630 DEBUG 18688 --- [           main] c.w.m.mapper.UserMapper.selectList       : &lt;==      Total: 3\n2018-11-29 21:07:14.632  INFO 18688 --- [           main] .MybatisPlusMultiTenancyApplicationTests : #selectList, e=User(id=1, providerId=1, name=Tony老师)\n2018-11-29 21:07:14.632  INFO 18688 --- [           main] .MybatisPlusMultiTenancyApplicationTests : #selectList, e=User(id=2, providerId=1, name=William老师)\n2018-11-29 21:07:14.632  INFO 18688 --- [           main] .MybatisPlusMultiTenancyApplicationTests : #selectList, e=User(id=1068129257418178562, providerId=1, name=新来的Tom老师)</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004941710-376f2197-c3b5-4aae-9f81-3bf065dcfc06.png#align=left&amp;display=inline&amp;height=195&amp;linkTarget=_blank&amp;originHeight=389&amp;originWidth=1492&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>从打印的日志不难看出，这个方案相当完美，仅需简单的配置，让开发者完全忽略了(provider_id)字段的存在，同时又最大程度的保证了数据的安全性，可谓是一举两得！</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:09:05.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:08:04.000Z",
    "updated_at": "2019-02-01T07:09:05.000Z",
    "published_at": "2019-02-01T07:09:05.000Z",
    "first_published_at": "2019-02-01T07:09:05.000Z",
    "word_count": 2635,
    "cover": "",
    "description": "date: 2018-11-29 20:35:02tags: [&quot;MybatisPlus&quot;,&quot;Mybatis&quot;,&quot;SpringBoot&quot;]在进行多租户架构(Multi-tenancy)实现之前，先了解一下相关的定义吧：什么是多租户多租...",
    "custom_description": "多租户技术或称多重租赁技术，简称`SaaS`，是一种软件架构技术，是实现如何在多用户环境下（此处的多用户一般是面向企业用户）共用相同的系统或程序组件，并且可确保各用户间数据的隔离性。\n简单讲：在一台服务器上运行单个应用实例，它为多个租户（客户）提供服务。从定义中我们可以理解：多租户是一种架构，目的是",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224333,
    "slug": "multiple-ssh-key-config",
    "title": "Git多个SSH Key共存解决方案",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-10-23 14:58:36<br />tags: [\"SSH\",\"Git\"]\n---\n\n目前手上不止一个git账号，平台也不一致，这就比较尴尬了：\n\n1. 同一个`SSH Key`中不允许两个账号\n1. 再次生成新的`SSH Key`会将上次的覆盖\n\n目前的解决办法是，生成多个`SSH Key`并命别名，通过配置文件指定域\n## 用ssh-keygen生成多个key\n\n```\n$ ssh-keygen -t rsa -C \"wuwz@live.com\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/wuwenze/.ssh/id_rsa): /Users/wuwenze/.ssh/github\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/ubuntu/.ssh/id_rsa_github.\nYour public key has been saved in /home/ubuntu/.ssh/id_rsa_github.pub.\nThe key fingerprint is:\nSHA256:T4s5hxOOX3ABGNHZNMPX6v7J1rgYxfzXMCuCipIh5Ng wuwz@live.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n|      o=.=+  .   |\n|      . o.oo. .  |\n|          .. .   |\n| .         ..o   |\n|+.      S o.  *  |\n|o.E    o @ ... =.|\n| . o  . O *.o .o+|\n|  o  . o = ..=o.o|\n|   .. . .   .o=. |\n+----[SHA256]-----+\n```\n\n根据提示，重新指定文件名，假设我有三个平台需要同时管理，即\n\n```\n/Users/wuwenze/.ssh/github\n/Users/wuwenze/.ssh/gitee\n/Users/wuwenze/.ssh/coding\n```\n\n依次按照上述操作，添加3个ssh-key，生成后的文件位于~/.ssh<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004864306-8bba5109-c9f7-41d6-927a-29ac35c9e1f7.png#align=left&display=inline&height=338&linkTarget=_blank&originHeight=858&originWidth=1892&size=0&width=746)\n\n## 添加私钥\n\ngit自动把新生成的私钥写到known_hosts中\n\n```\n$ ssh-add ~/.ssh/github\n$ ssh-add ~/.ssh/gitee\n$ ssh-add ~/.ssh/coding\n```\n\n如果执行ssh-add时提示\"Could not open a connection to your authentication agent\"，可以现执行命令：\n\n```\n$ ssh-agent bash\n```\n\n然后再运行ssh-add命令，添加完成后，通过以下命令来验证：\n\n```\n# 可以通过 ssh-add -l 来确私钥列表\n$ ssh-add -l\n\n# 可以通过 ssh-add -D 来清空私钥列表，清空后重复上一步操作\n$ ssh-add -D\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004864210-5acc310d-9c6a-4733-8f63-cdecd4864e73.png#align=left&display=inline&height=481&linkTarget=_blank&originHeight=1084&originWidth=1682&size=0&width=746)\n\n## 配置文件\n\n```\n$ vi ~/.ssh/config\n\n# coding\nHost coding.net\n    HostName coding.net\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_coding\n\n# github\nHost github.com\n    HostName github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_github\n\n# github\nHost gitee.com\n    HostName gitee.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_gitee\n```\n\n## 配置公钥并验证\n\n依次登录对应的平台，配置SSH公钥，如：github<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004864273-06425f35-00d8-4a89-a405-6c23b100452d.png#align=left&display=inline&height=371&linkTarget=_blank&originHeight=1228&originWidth=2470&size=0&width=746)<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004866712-0856a0a9-ce7c-4fe3-91d5-e6d27c245026.png#align=left&display=inline&height=371&linkTarget=_blank&originHeight=1228&originWidth=2470&size=0&width=746)<br />\n依次验证：\n\n```\n$ ssh -T git@github.com\n$ ssh -T git@gitee.com\n$ ssh -T git@git.coding.net\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004864230-03b2f749-d61d-408d-a030-d3d20d940c30.png#align=left&display=inline&height=544&linkTarget=_blank&originHeight=970&originWidth=1330&size=0&width=746)\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-10-23 14:58:36</p><p>tags: [&quot;SSH&quot;,&quot;Git&quot;]</p><hr /><p><br /></p><p>目前手上不止一个git账号，平台也不一致，这就比较尴尬了：</p><p><br /></p><ol start=\"1\"><li>同一个<code>SSH Key</code>中不允许两个账号</li></ol><ol start=\"2\"><li>再次生成新的<code>SSH Key</code>会将上次的覆盖</li></ol><p><br /></p><p>目前的解决办法是，生成多个<code>SSH Key</code>并命别名，通过配置文件指定域</p><h2 id=\"5c7e18b5\">用ssh-keygen生成多个key</h2><p><br /></p><pre><code>$ ssh-keygen -t rsa -C &quot;wuwz@live.com&quot;\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/wuwenze/.ssh/id_rsa): /Users/wuwenze/.ssh/github\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/ubuntu/.ssh/id_rsa_github.\nYour public key has been saved in /home/ubuntu/.ssh/id_rsa_github.pub.\nThe key fingerprint is:\nSHA256:T4s5hxOOX3ABGNHZNMPX6v7J1rgYxfzXMCuCipIh5Ng wuwz@live.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n|      o=.=+  .   |\n|      . o.oo. .  |\n|          .. .   |\n| .         ..o   |\n|+.      S o.  *  |\n|o.E    o @ ... =.|\n| . o  . O *.o .o+|\n|  o  . o = ..=o.o|\n|   .. . .   .o=. |\n+----[SHA256]-----+</code></pre><p><br /></p><p>根据提示，重新指定文件名，假设我有三个平台需要同时管理，即</p><p><br /></p><pre><code>/Users/wuwenze/.ssh/github\n/Users/wuwenze/.ssh/gitee\n/Users/wuwenze/.ssh/coding</code></pre><p><br /></p><p>依次按照上述操作，添加3个ssh-key，生成后的文件位于~/.ssh<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004864306-8bba5109-c9f7-41d6-927a-29ac35c9e1f7.png#align=left&amp;display=inline&amp;height=338&amp;linkTarget=_blank&amp;originHeight=858&amp;originWidth=1892&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"1296dd38\">添加私钥</h2><p><br /></p><p>git自动把新生成的私钥写到known_hosts中</p><p><br /></p><pre><code>$ ssh-add ~/.ssh/github\n$ ssh-add ~/.ssh/gitee\n$ ssh-add ~/.ssh/coding</code></pre><p><br /></p><p>如果执行ssh-add时提示&quot;Could not open a connection to your authentication agent&quot;，可以现执行命令：</p><p><br /></p><pre><code>$ ssh-agent bash</code></pre><p><br /></p><p>然后再运行ssh-add命令，添加完成后，通过以下命令来验证：</p><p><br /></p><pre><code># 可以通过 ssh-add -l 来确私钥列表\n$ ssh-add -l\n\n# 可以通过 ssh-add -D 来清空私钥列表，清空后重复上一步操作\n$ ssh-add -D</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004864210-5acc310d-9c6a-4733-8f63-cdecd4864e73.png#align=left&amp;display=inline&amp;height=481&amp;linkTarget=_blank&amp;originHeight=1084&amp;originWidth=1682&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"15c64aa0\">配置文件</h2><p><br /></p><pre><code>$ vi ~/.ssh/config\n\n# coding\nHost coding.net\n    HostName coding.net\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_coding\n\n# github\nHost github.com\n    HostName github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_github\n\n# github\nHost gitee.com\n    HostName gitee.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_gitee</code></pre><p><br /></p><h2 id=\"c20569dd\">配置公钥并验证</h2><p><br /></p><p>依次登录对应的平台，配置SSH公钥，如：github<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004864273-06425f35-00d8-4a89-a405-6c23b100452d.png#align=left&amp;display=inline&amp;height=371&amp;linkTarget=_blank&amp;originHeight=1228&amp;originWidth=2470&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004866712-0856a0a9-ce7c-4fe3-91d5-e6d27c245026.png#align=left&amp;display=inline&amp;height=371&amp;linkTarget=_blank&amp;originHeight=1228&amp;originWidth=2470&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n依次验证：</p><p><br /></p><pre><code>$ ssh -T git@github.com\n$ ssh -T git@gitee.com\n$ ssh -T git@git.coding.net</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004864230-03b2f749-d61d-408d-a030-d3d20d940c30.png#align=left&amp;display=inline&amp;height=544&amp;linkTarget=_blank&amp;originHeight=970&amp;originWidth=1330&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:07:48.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:06:57.000Z",
    "updated_at": "2019-02-01T07:07:49.000Z",
    "published_at": "2019-02-01T07:07:48.000Z",
    "first_published_at": "2019-02-01T07:07:48.000Z",
    "word_count": 505,
    "cover": "",
    "description": "date: 2018-10-23 14:58:36tags: [&quot;SSH&quot;,&quot;Git&quot;]目前手上不止一个git账号，平台也不一致，这就比较尴尬了：同一个SSH Key中不允许两个账号再次生成新的SSH Key会将上次的覆盖目前的解决办法是，生成多个SSH...",
    "custom_description": "date: 2018-10-23 14:58:36tags: [&quot;SSH&quot;,&quot;Git&quot;]目前手上不止一个git账号，平台也不一致，这就比较尴尬了：同一个SSH Key中不允许两个账号再次生成新的SSH Key会将上次的覆盖目前的解决办法是，生成多个SSH...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224321,
    "slug": "maven-deploy-oss",
    "title": "将JAR包发布到Maven Sonatype OSSRH中央仓库",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2019-01-24 10:56:11<br />tags: [\"Maven\"]\n---\n\n将jar包发布到Maven中央仓库（https://search.maven.org/）  供广大开发者使用，流程比较繁琐，遂成此文记录。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786882-76bb5703-e7b1-4d4b-a9d7-d0668f0561f2.png#align=left&display=inline&height=357&linkTarget=_blank&originHeight=920&originWidth=1920&size=0&width=746)\n\nMaven中央仓库并不支持直接上传Jar包。因此需要将jar包发布到一些指定的第三方Maven仓库，然后该仓库再将Jar包同步到Maven中央仓库。<br />\n本文使用最简单的方式，通过发布到`Sonatype OSSRH` ([https://central.sonatype.org/pages/ossrh-guide.html](https://central.sonatype.org/pages/ossrh-guide.html))  仓库的方式来实现。\n## 注册JIRA账号\n\nJIRA是一个项目管理服务，类似于国内的Teambition。Sonatype通过JIRA来管理OSSRH仓库。<br />\n注册地址：[https://issues.sonatype.org/secure/Signup!default.jspa](https://issues.sonatype.org/secure/Signup!default.jspa)<br />\n需要填写Email, Full Name, Username以及password，其中Username与Password后面的步骤需要用到`（重要）`。\n\n## 创建issue\n\n在发布Jar包之前，需先创建issue，Sonatype的工作人员会进行审核。<br />\n申请地址：[https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134](https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134)<br />\n创建issue的时候需要填写下面这些信息：\n\n* Summary：摘要\n* Description：详细描述\n* Group Id：对应Maven的GroupId\n* Project URL：项目首页地址\n* SCM url：项目Github地址\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786846-5a6f3661-c3b1-4cfc-b909-91e5cf21aa69.png#align=left&display=inline&height=377&linkTarget=_blank&originHeight=968&originWidth=1917&size=0&width=746)<br />\n在填写相关信息时，可以参照我之前创建的issue：[https://issues.sonatype.org/browse/OSSRH-38344](https://issues.sonatype.org/browse/OSSRH-38344)<br />\n由于时差问题，前一天创建issue，一般来说第二天早上才会有回应，工作人员会在回复中询问，是否拥有GroupId对应的域名所有权，<br />\n如果有的话就回复有，如果没有，建议使用github域名，如：com.github.wuwz：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786884-25a478e1-da5c-4099-b360-ded605e79184.png#align=left&display=inline&height=457&linkTarget=_blank&originHeight=726&originWidth=1184&size=0&width=746)<br />\n当issue的status变为RESOLVED，我们就可以进行下一步操作了。\n\n## GPG配置与安装\n\n为防止上传的Jar包被纂改，发布到Maven仓库中的所有文件都需要使用GPG签名。\n\n### 安装GPG\n\n* Windows：下载Gpg4win（https://www.gpg4win.org/download.html）\n* MacOS: 下载GPG Suite（https://gpgtools.org/）\n* Linux：yum install gpg\n\n### 生成GPG密钥对\n\n```bash\ngpg --gen-key\n\ngpg (GnuPG) 2.2.11-unknown; Copyright (C) 2018 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\ngpg: directory '/c/Users/info016/.gnupg' created\ngpg: keybox '/c/Users/info016/.gnupg/pubring.kbx' created\nNote: Use \"gpg --full-generate-key\" for a full featured key generation dialog.\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: wuwenze\nEmail address: wenzewoo@gmail.com\nYou selected this USER-ID:\n    \"wuwenze <wenzewoo@gmail.com>\"\n\nChange (N)ame, (E)mail, or (O)kay/(Q)uit? o\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\ngpg: /c/Users/info016/.gnupg/trustdb.gpg: trustdb created\ngpg: key D271764618CA9BBC marked as ultimately trusted\ngpg: directory '/c/Users/info016/.gnupg/openpgp-revocs.d' created\ngpg: revocation certificate stored as '/c/Users/info016/.gnupg/openpgp-revocs.d/AD320C934CC0DCA8C27C4407D271764618CA9BBC.rev'\npublic and secret key created and signed.\n\npub   rsa2048 2019-01-24 [SC] [expires: 2021-01-23]\n      AD320C934CC0DCA8C27C4407D271764618CA9BBC\nuid                      wuwenze <wenzewoo@gmail.com>\nsub   rsa2048 2019-01-24 [E] [expires: 2021-01-23]\n```\n\n生成密钥时将需要输入name、email以及password。password在之后的步骤需要用到，请记下来。\n\n### 上传GPG公钥\n\n将公钥上传到公共的密钥服务器，这样其他人才可以通过公钥来验证jar包的完整性。\n\n```bash\ngpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys AD320C934CC0DCA8C27C4407D271764618CA9BBC\n```\n\n其中，`AD320C934CC0DCA8C27C4407D271764618CA9BBC`为秘钥的ID，可以通过`gpg --list-keys`命令来查看：\n\n```bash\ngpg --list-keys\ngpg: checking the trustdb\ngpg: marginals needed: 3  completes needed: 1  trust model: pgp\ngpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u\ngpg: next trustdb check due at 2021-01-23\n/c/Users/info016/.gnupg/pubring.kbx\n-----------------------------------\npub   rsa2048 2019-01-24 [SC] [expires: 2021-01-23]\n      AD320C934CC0DCA8C27C4407D271764618CA9BBC\nuid           [ultimate] wuwenze <wenzewoo@gmail.com>\nsub   rsa2048 2019-01-24 [E] [expires: 2021-01-23]\n```\n\n## Maven全局setting.xml配置\n\n注意，此处是全局的setting.xml，例如我的路径是：`D:\\Maven\\conf\\settings.xml`，添加以下内容：\n\n```xml\n<servers>\n  <server>\n    <id>sonatype</id>\n    <username>注册的JIRA账号</username>\n    <password>注册的JIRA密码</password>\n  </server>\n</servers>\n```\n\n## Maven项目的pom.xml配置\n\n根据Sonatype OSSRH的要求，以下信息都必须配置：\n\n* Supply Javadoc and Sources\n* Sign Files with GPG/PGP\n* Sufficient Metadata\n  * Correct Coordinates\n  * Project Name, Description and URL\n  * License Information\n  * Developer Information\n  * SCM Information\n\n配置挺多的，配置时参考我的项目，然后进行修改即可：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.wuwenze</groupId>\n  <artifactId>ExcelKit</artifactId>\n  <version>2.0.7</version>\n  <packaging>jar</packaging>\n  <name>ExcelKit</name>\n  <url>http://gitee.com/wuwenze/ExcelKit</url>\n  <description>Excel导入导出工具（简单、好用且轻量级的海量Excel文件导入导出解决方案.）</description>\n  <developers>\n    <developer>\n      <name>wuwenze</name>\n      <url>https://wuwenze.com</url>\n      <email>wenzewoo@gmail.com</email>\n    </developer>\n  </developers>\n  <licenses>\n    <license>\n      <name>The Apache Software License, Version 2.0</name>\n      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n    </license>\n  </licenses>\n  <scm>\n    <connection>scm:git:git@gitee.com:wuwenze/ExcelKit.git</connection>\n    <developerConnection>scm:git:git@gitee.com:wuwenze/ExcelKit.git</developerConnection>\n    <url>git@gitee.com:wuwenze/ExcelKit.git</url>\n  </scm>\n\n  <properties>\n    <encoding>UTF-8</encoding>\n    <jdk-version>1.6</jdk-version>\n    <poi-version>3.17</poi-version>\n    <dom4j-version>1.6.1</dom4j-version>\n    <jaxen-version>1.1.6</jaxen-version>\n    <xerces-version>2.11.0</xerces-version>\n    <guava-version>18.0</guava-version>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>org.apache.poi</groupId>\n      <artifactId>poi-ooxml</artifactId>\n      <version>${poi-version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.poi</groupId>\n      <artifactId>poi-ooxml-schemas</artifactId>\n      <version>${poi-version}</version>\n    </dependency>\n    <dependency>\n      <groupId>dom4j</groupId>\n      <artifactId>dom4j</artifactId>\n      <version>${dom4j-version}</version>\n    </dependency>\n    <dependency>\n      <groupId>jaxen</groupId>\n      <artifactId>jaxen</artifactId>\n      <version>${jaxen-version}</version>\n    </dependency>\n    <dependency>\n      <groupId>xerces</groupId>\n      <artifactId>xercesImpl</artifactId>\n      <version>${xerces-version}</version>\n    </dependency>\n    <dependency>\n      <groupId>xml-apis</groupId>\n      <artifactId>xml-apis</artifactId>\n      <version>2.0.2</version>\n    </dependency>\n    <dependency>\n      <groupId>com.google.guava</groupId>\n      <artifactId>guava</artifactId>\n      <version>18.0</version>\n    </dependency>\n    <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <version>1.16.10</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>servlet-api</artifactId>\n      <version>2.5</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>commons-beanutils</groupId>\n      <artifactId>commons-beanutils</artifactId>\n      <version>1.9.3</version>\n    </dependency>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <target>${jdk-version}</target>\n          <source>${jdk-version}</source>\n          <encoding>${encoding}</encoding>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n\n  <profiles>\n    <profile>\n      <id>jdk-profile</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n        <jdk>${jdk-version}</jdk>\n      </activation>\n      <properties>\n        <maven.compiler.source>${jdk-version}</maven.compiler.source>\n        <maven.compiler.target>${jdk-version}</maven.compiler.target>\n        <maven.compiler.compilerVersion>${jdk-version}</maven.compiler.compilerVersion>\n      </properties>\n    </profile>\n    <profile>\n      <id>release</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-source-plugin</artifactId>\n            <version>2.2.1</version>\n            <executions>\n              <execution>\n                <phase>package</phase>\n                <goals>\n                  <goal>jar-no-fork</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <version>2.9.1</version>\n            <executions>\n              <execution>\n                <phase>package</phase>\n                <goals>\n                  <goal>jar</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <version>1.5</version>\n            <executions>\n              <execution>\n                <phase>verify</phase>\n                <goals>\n                  <goal>sign</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n      <distributionManagement>\n        <snapshotRepository>\n          <id>sonatype</id>\n          <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n        </snapshotRepository>\n        <repository>\n          <id>sonatype</id>\n          <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n      </distributionManagement>\n    </profile>\n  </profiles>\n\n</project>\n```\n\n## Deploy Jar\n\n前面的准备工作一切妥当后，即可执行deploy操作了，执行以下Maven命令：\n\n```bash\nmvn clean package deploy -Prelease\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786864-70aaa06a-17f0-446b-9d8e-802bf24e8fbd.png#align=left&display=inline&height=185&linkTarget=_blank&originHeight=195&originWidth=786&size=0&width=746)<br />\n第一次执行该命令时，需要输入GPG的密码，之前配置的时候已经记录过了，然后静静的等待上传成功（这其中有很多坑，自己根据Maven报错依次解决，直到最终SUCCESS就行了，这里不表。）\n\n## Release Jar\n\n使用JIRA账号登陆：https://oss.sonatype.org/#stagingRepositories，简短的说一下操作步骤吧：\n\n* 将Staging Rpositories拉到最下即可看到你刚刚发布的jar包。<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786884-02179a54-5ff5-45de-b8f7-bfd432298716.png#align=left&display=inline&height=276&linkTarget=_blank&originHeight=730&originWidth=1920&size=0&width=726)\n* 选择上方的Close，第一次会有工作人员回复你之前创建的那个Issue（前面有截图）。\n* 然后再点击Release即可，等2个小时左右即可在http://search.maven.org/看到你发布的jar包。<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786875-454b94f5-85cd-47b5-83ba-f3e2e7535b44.png#align=left&display=inline&height=160&linkTarget=_blank&originHeight=250&originWidth=1135&size=0&width=726)\n* 注意：在流程中可能失败，这时可以点击Activity查看具体的错误原因：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786872-4c87fe41-d7b7-4167-ad0b-d061f86f983f.png#align=left&display=inline&height=186&linkTarget=_blank&originHeight=443&originWidth=1725&size=0&width=726)\n\n## Update Jar\n\n第一次相对来说比较麻烦，以后更新jar包就比较简单了，更改pom.xml中的version，重新deploy、close、release流程即可。\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2019-01-24 10:56:11</p><p>tags: [&quot;Maven&quot;]</p><hr /><p><br /></p><p>将jar包发布到Maven中央仓库（https://search.maven.org/）  供广大开发者使用，流程比较繁琐，遂成此文记录。</p><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786882-76bb5703-e7b1-4d4b-a9d7-d0668f0561f2.png#align=left&amp;display=inline&amp;height=357&amp;linkTarget=_blank&amp;originHeight=920&amp;originWidth=1920&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>Maven中央仓库并不支持直接上传Jar包。因此需要将jar包发布到一些指定的第三方Maven仓库，然后该仓库再将Jar包同步到Maven中央仓库。<br />\n本文使用最简单的方式，通过发布到<code>Sonatype OSSRH</code> (<a href=\"https://central.sonatype.org/pages/ossrh-guide.html\" target=\"_blank\">https://central.sonatype.org/pages/ossrh-guide.html</a>)  仓库的方式来实现。</p><h2 id=\"f121971f\">注册JIRA账号</h2><p><br /></p><p>JIRA是一个项目管理服务，类似于国内的Teambition。Sonatype通过JIRA来管理OSSRH仓库。<br />\n注册地址：<a href=\"https://issues.sonatype.org/secure/Signup!default.jspa\" target=\"_blank\">https://issues.sonatype.org/secure/Signup!default.jspa</a><br />\n需要填写Email, Full Name, Username以及password，其中Username与Password后面的步骤需要用到<code>（重要）</code>。</p><p><br /></p><h2 id=\"17d00ad1\">创建issue</h2><p><br /></p><p>在发布Jar包之前，需先创建issue，Sonatype的工作人员会进行审核。<br />\n申请地址：<a href=\"https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134\" target=\"_blank\">https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134</a><br />\n创建issue的时候需要填写下面这些信息：</p><p><br /></p><ul><li>Summary：摘要</li></ul><ul><li>Description：详细描述</li></ul><ul><li>Group Id：对应Maven的GroupId</li></ul><ul><li>Project URL：项目首页地址</li></ul><ul><li>SCM url：项目Github地址</li></ul><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786846-5a6f3661-c3b1-4cfc-b909-91e5cf21aa69.png#align=left&amp;display=inline&amp;height=377&amp;linkTarget=_blank&amp;originHeight=968&amp;originWidth=1917&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n在填写相关信息时，可以参照我之前创建的issue：<a href=\"https://issues.sonatype.org/browse/OSSRH-38344\" target=\"_blank\">https://issues.sonatype.org/browse/OSSRH-38344</a><br />\n由于时差问题，前一天创建issue，一般来说第二天早上才会有回应，工作人员会在回复中询问，是否拥有GroupId对应的域名所有权，<br />\n如果有的话就回复有，如果没有，建议使用github域名，如：com.github.wuwz：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786884-25a478e1-da5c-4099-b360-ded605e79184.png#align=left&amp;display=inline&amp;height=457&amp;linkTarget=_blank&amp;originHeight=726&amp;originWidth=1184&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n当issue的status变为RESOLVED，我们就可以进行下一步操作了。</p><p><br /></p><h2 id=\"9c65c720\">GPG配置与安装</h2><p><br /></p><p>为防止上传的Jar包被纂改，发布到Maven仓库中的所有文件都需要使用GPG签名。</p><p><br /></p><h3 id=\"7fc1a80a\">安装GPG</h3><p><br /></p><ul><li>Windows：下载Gpg4win（https://www.gpg4win.org/download.html）</li></ul><ul><li>MacOS: 下载GPG Suite（https://gpgtools.org/）</li></ul><ul><li>Linux：yum install gpg</li></ul><p><br /></p><h3 id=\"06f1e761\">生成GPG密钥对</h3><p><br /></p><pre data-lang=\"bash\"><code>gpg --gen-key\n\ngpg (GnuPG) 2.2.11-unknown; Copyright (C) 2018 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\ngpg: directory '/c/Users/info016/.gnupg' created\ngpg: keybox '/c/Users/info016/.gnupg/pubring.kbx' created\nNote: Use &quot;gpg --full-generate-key&quot; for a full featured key generation dialog.\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: wuwenze\nEmail address: wenzewoo@gmail.com\nYou selected this USER-ID:\n    &quot;wuwenze &lt;wenzewoo@gmail.com&gt;&quot;\n\nChange (N)ame, (E)mail, or (O)kay/(Q)uit? o\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\ngpg: /c/Users/info016/.gnupg/trustdb.gpg: trustdb created\ngpg: key D271764618CA9BBC marked as ultimately trusted\ngpg: directory '/c/Users/info016/.gnupg/openpgp-revocs.d' created\ngpg: revocation certificate stored as '/c/Users/info016/.gnupg/openpgp-revocs.d/AD320C934CC0DCA8C27C4407D271764618CA9BBC.rev'\npublic and secret key created and signed.\n\npub   rsa2048 2019-01-24 [SC] [expires: 2021-01-23]\n      AD320C934CC0DCA8C27C4407D271764618CA9BBC\nuid                      wuwenze &lt;wenzewoo@gmail.com&gt;\nsub   rsa2048 2019-01-24 [E] [expires: 2021-01-23]</code></pre><p><br /></p><p>生成密钥时将需要输入name、email以及password。password在之后的步骤需要用到，请记下来。</p><p><br /></p><h3 id=\"da1c4c5c\">上传GPG公钥</h3><p><br /></p><p>将公钥上传到公共的密钥服务器，这样其他人才可以通过公钥来验证jar包的完整性。</p><p><br /></p><pre data-lang=\"bash\"><code>gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys AD320C934CC0DCA8C27C4407D271764618CA9BBC</code></pre><p><br /></p><p>其中，<code>AD320C934CC0DCA8C27C4407D271764618CA9BBC</code>为秘钥的ID，可以通过<code>gpg --list-keys</code>命令来查看：</p><p><br /></p><pre data-lang=\"bash\"><code>gpg --list-keys\ngpg: checking the trustdb\ngpg: marginals needed: 3  completes needed: 1  trust model: pgp\ngpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u\ngpg: next trustdb check due at 2021-01-23\n/c/Users/info016/.gnupg/pubring.kbx\n-----------------------------------\npub   rsa2048 2019-01-24 [SC] [expires: 2021-01-23]\n      AD320C934CC0DCA8C27C4407D271764618CA9BBC\nuid           [ultimate] wuwenze &lt;wenzewoo@gmail.com&gt;\nsub   rsa2048 2019-01-24 [E] [expires: 2021-01-23]</code></pre><p><br /></p><h2 id=\"ebac9a9b\">Maven全局setting.xml配置</h2><p><br /></p><p>注意，此处是全局的setting.xml，例如我的路径是：<code>D:\\Maven\\conf\\settings.xml</code>，添加以下内容：</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;servers&gt;\n  &lt;server&gt;\n    &lt;id&gt;sonatype&lt;/id&gt;\n    &lt;username&gt;注册的JIRA账号&lt;/username&gt;\n    &lt;password&gt;注册的JIRA密码&lt;/password&gt;\n  &lt;/server&gt;\n&lt;/servers&gt;</code></pre><p><br /></p><h2 id=\"a6c72a61\">Maven项目的pom.xml配置</h2><p><br /></p><p>根据Sonatype OSSRH的要求，以下信息都必须配置：</p><p><br /></p><ul><li>Supply Javadoc and Sources</li></ul><ul><li>Sign Files with GPG/PGP</li></ul><ul><li>Sufficient Metadata</li></ul><ul data-lake-indent=\"1\"><li>Correct Coordinates</li></ul><ul data-lake-indent=\"1\"><li>Project Name, Description and URL</li></ul><ul data-lake-indent=\"1\"><li>License Information</li></ul><ul data-lake-indent=\"1\"><li>Developer Information</li></ul><ul data-lake-indent=\"1\"><li>SCM Information</li></ul><p><br /></p><p>配置挺多的，配置时参考我的项目，然后进行修改即可：</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;\n  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n  &lt;groupId&gt;com.wuwenze&lt;/groupId&gt;\n  &lt;artifactId&gt;ExcelKit&lt;/artifactId&gt;\n  &lt;version&gt;2.0.7&lt;/version&gt;\n  &lt;packaging&gt;jar&lt;/packaging&gt;\n  &lt;name&gt;ExcelKit&lt;/name&gt;\n  &lt;url&gt;http://gitee.com/wuwenze/ExcelKit&lt;/url&gt;\n  &lt;description&gt;Excel导入导出工具（简单、好用且轻量级的海量Excel文件导入导出解决方案.）&lt;/description&gt;\n  &lt;developers&gt;\n    &lt;developer&gt;\n      &lt;name&gt;wuwenze&lt;/name&gt;\n      &lt;url&gt;https://wuwenze.com&lt;/url&gt;\n      &lt;email&gt;wenzewoo@gmail.com&lt;/email&gt;\n    &lt;/developer&gt;\n  &lt;/developers&gt;\n  &lt;licenses&gt;\n    &lt;license&gt;\n      &lt;name&gt;The Apache Software License, Version 2.0&lt;/name&gt;\n      &lt;url&gt;http://www.apache.org/licenses/LICENSE-2.0.txt&lt;/url&gt;\n    &lt;/license&gt;\n  &lt;/licenses&gt;\n  &lt;scm&gt;\n    &lt;connection&gt;scm:git:git@gitee.com:wuwenze/ExcelKit.git&lt;/connection&gt;\n    &lt;developerConnection&gt;scm:git:git@gitee.com:wuwenze/ExcelKit.git&lt;/developerConnection&gt;\n    &lt;url&gt;git@gitee.com:wuwenze/ExcelKit.git&lt;/url&gt;\n  &lt;/scm&gt;\n\n  &lt;properties&gt;\n    &lt;encoding&gt;UTF-8&lt;/encoding&gt;\n    &lt;jdk-version&gt;1.6&lt;/jdk-version&gt;\n    &lt;poi-version&gt;3.17&lt;/poi-version&gt;\n    &lt;dom4j-version&gt;1.6.1&lt;/dom4j-version&gt;\n    &lt;jaxen-version&gt;1.1.6&lt;/jaxen-version&gt;\n    &lt;xerces-version&gt;2.11.0&lt;/xerces-version&gt;\n    &lt;guava-version&gt;18.0&lt;/guava-version&gt;\n  &lt;/properties&gt;\n\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;\n      &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;\n      &lt;version&gt;${poi-version}&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;\n      &lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt;\n      &lt;version&gt;${poi-version}&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;dom4j&lt;/groupId&gt;\n      &lt;artifactId&gt;dom4j&lt;/artifactId&gt;\n      &lt;version&gt;${dom4j-version}&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;jaxen&lt;/groupId&gt;\n      &lt;artifactId&gt;jaxen&lt;/artifactId&gt;\n      &lt;version&gt;${jaxen-version}&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;xerces&lt;/groupId&gt;\n      &lt;artifactId&gt;xercesImpl&lt;/artifactId&gt;\n      &lt;version&gt;${xerces-version}&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;xml-apis&lt;/groupId&gt;\n      &lt;artifactId&gt;xml-apis&lt;/artifactId&gt;\n      &lt;version&gt;2.0.2&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n      &lt;artifactId&gt;guava&lt;/artifactId&gt;\n      &lt;version&gt;18.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n      &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n      &lt;version&gt;1.16.10&lt;/version&gt;\n      &lt;scope&gt;provided&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\n      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;\n      &lt;version&gt;2.5&lt;/version&gt;\n      &lt;scope&gt;provided&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;\n      &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;\n      &lt;version&gt;1.9.3&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;4.12&lt;/version&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n\n  &lt;build&gt;\n    &lt;plugins&gt;\n      &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n        &lt;configuration&gt;\n          &lt;target&gt;${jdk-version}&lt;/target&gt;\n          &lt;source&gt;${jdk-version}&lt;/source&gt;\n          &lt;encoding&gt;${encoding}&lt;/encoding&gt;\n        &lt;/configuration&gt;\n      &lt;/plugin&gt;\n    &lt;/plugins&gt;\n  &lt;/build&gt;\n\n  &lt;profiles&gt;\n    &lt;profile&gt;\n      &lt;id&gt;jdk-profile&lt;/id&gt;\n      &lt;activation&gt;\n        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;\n        &lt;jdk&gt;${jdk-version}&lt;/jdk&gt;\n      &lt;/activation&gt;\n      &lt;properties&gt;\n        &lt;maven.compiler.source&gt;${jdk-version}&lt;/maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;${jdk-version}&lt;/maven.compiler.target&gt;\n        &lt;maven.compiler.compilerVersion&gt;${jdk-version}&lt;/maven.compiler.compilerVersion&gt;\n      &lt;/properties&gt;\n    &lt;/profile&gt;\n    &lt;profile&gt;\n      &lt;id&gt;release&lt;/id&gt;\n      &lt;build&gt;\n        &lt;plugins&gt;\n          &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;\n            &lt;version&gt;2.2.1&lt;/version&gt;\n            &lt;executions&gt;\n              &lt;execution&gt;\n                &lt;phase&gt;package&lt;/phase&gt;\n                &lt;goals&gt;\n                  &lt;goal&gt;jar-no-fork&lt;/goal&gt;\n                &lt;/goals&gt;\n              &lt;/execution&gt;\n            &lt;/executions&gt;\n          &lt;/plugin&gt;\n          &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;\n            &lt;version&gt;2.9.1&lt;/version&gt;\n            &lt;executions&gt;\n              &lt;execution&gt;\n                &lt;phase&gt;package&lt;/phase&gt;\n                &lt;goals&gt;\n                  &lt;goal&gt;jar&lt;/goal&gt;\n                &lt;/goals&gt;\n              &lt;/execution&gt;\n            &lt;/executions&gt;\n          &lt;/plugin&gt;\n          &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;\n            &lt;version&gt;1.5&lt;/version&gt;\n            &lt;executions&gt;\n              &lt;execution&gt;\n                &lt;phase&gt;verify&lt;/phase&gt;\n                &lt;goals&gt;\n                  &lt;goal&gt;sign&lt;/goal&gt;\n                &lt;/goals&gt;\n              &lt;/execution&gt;\n            &lt;/executions&gt;\n          &lt;/plugin&gt;\n        &lt;/plugins&gt;\n      &lt;/build&gt;\n      &lt;distributionManagement&gt;\n        &lt;snapshotRepository&gt;\n          &lt;id&gt;sonatype&lt;/id&gt;\n          &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots/&lt;/url&gt;\n        &lt;/snapshotRepository&gt;\n        &lt;repository&gt;\n          &lt;id&gt;sonatype&lt;/id&gt;\n          &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;\n        &lt;/repository&gt;\n      &lt;/distributionManagement&gt;\n    &lt;/profile&gt;\n  &lt;/profiles&gt;\n\n&lt;/project&gt;</code></pre><p><br /></p><h2 id=\"e9978c1d\">Deploy Jar</h2><p><br /></p><p>前面的准备工作一切妥当后，即可执行deploy操作了，执行以下Maven命令：</p><p><br /></p><pre data-lang=\"bash\"><code>mvn clean package deploy -Prelease</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786864-70aaa06a-17f0-446b-9d8e-802bf24e8fbd.png#align=left&amp;display=inline&amp;height=185&amp;linkTarget=_blank&amp;originHeight=195&amp;originWidth=786&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n第一次执行该命令时，需要输入GPG的密码，之前配置的时候已经记录过了，然后静静的等待上传成功（这其中有很多坑，自己根据Maven报错依次解决，直到最终SUCCESS就行了，这里不表。）</p><p><br /></p><h2 id=\"bb9988ac\">Release Jar</h2><p><br /></p><p>使用JIRA账号登陆：https://oss.sonatype.org/#stagingRepositories，简短的说一下操作步骤吧：</p><p><br /></p><ul><li>将Staging Rpositories拉到最下即可看到你刚刚发布的jar包。<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786884-02179a54-5ff5-45de-b8f7-bfd432298716.png#align=left&amp;display=inline&amp;height=276&amp;linkTarget=_blank&amp;originHeight=730&amp;originWidth=1920&amp;size=0&amp;width=726\" style=\"max-width: 600px; width: 726px;\" /></li></ul><ul><li>选择上方的Close，第一次会有工作人员回复你之前创建的那个Issue（前面有截图）。</li></ul><ul><li>然后再点击Release即可，等2个小时左右即可在http://search.maven.org/看到你发布的jar包。<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786875-454b94f5-85cd-47b5-83ba-f3e2e7535b44.png#align=left&amp;display=inline&amp;height=160&amp;linkTarget=_blank&amp;originHeight=250&amp;originWidth=1135&amp;size=0&amp;width=726\" style=\"max-width: 600px; width: 726px;\" /></li></ul><ul><li>注意：在流程中可能失败，这时可以点击Activity查看具体的错误原因：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004786872-4c87fe41-d7b7-4167-ad0b-d061f86f983f.png#align=left&amp;display=inline&amp;height=186&amp;linkTarget=_blank&amp;originHeight=443&amp;originWidth=1725&amp;size=0&amp;width=726\" style=\"max-width: 600px; width: 726px;\" /></li></ul><p><br /></p><h2 id=\"d7bc5966\">Update Jar</h2><p><br /></p><p>第一次相对来说比较麻烦，以后更新jar包就比较简单了，更改pom.xml中的version，重新deploy、close、release流程即可。</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:06:34.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:05:23.000Z",
    "updated_at": "2019-02-01T07:06:34.000Z",
    "published_at": "2019-02-01T07:06:34.000Z",
    "first_published_at": "2019-02-01T07:06:34.000Z",
    "word_count": 2511,
    "cover": "",
    "description": "date: 2019-01-24 10:56:11tags: [&quot;Maven&quot;]将jar包发布到Maven中央仓库（https://search.maven.org/）  供广大开发者使用，流程比较繁琐，遂成此文记录。Maven中央仓库并不支持直接上传Jar包。因此需要将j...",
    "custom_description": "将jar包发布到Maven中央仓库（https://search.maven.org/）  供广大开发者使用，流程比较繁琐，遂成此文记录。",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224316,
    "slug": "lombok-plugin-example",
    "title": "Java代码精简神器Lombok的使用",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-09-06 15:14:27<br />tags: [\"IDEA\",\"Lombok\",\"代码优化\"]\n---\n\nJava 代码中有很多冗余、臃肿的代码（如：Getter/Setter、构造方法、hashCode 方法等）`lombok` 是一款 IDE 插件，其专注于消除此类代码，以达到代码简洁高效的目的。它同时提供了 IDEA 以及 Eclipse 相关的插件，本文以 IDEA 为例，做一些相关的示例\n## 准备工作\n\n1）IDEA 中安装相关的插件，如图：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004686511-d857296d-7993-429c-88cf-a99987cbeb79.png#align=left&display=inline&height=621&linkTarget=_blank&originHeight=1360&originWidth=1634&size=0&width=746)\n\n2）IDEA 编译器相关设置，如图：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004687545-55c1cfe8-db3b-4946-ae40-0d6ce1b15712.png#align=left&display=inline&height=526&linkTarget=_blank&originHeight=1648&originWidth=2338&size=0&width=746)\n\n## 构建项目\n\n以 SpringBoot 项目为例，以下为 pom.xml 文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>lombok-example</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>lombok-example</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.4.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n## 常用注解\n\nlombok 提供了很多注解，常用的如下。\n\n| 注解 | 作用 |\n| --- | --- |\n| [Getter ](/Getter ) | 注解在属性上，提供 getter 方法； |\n| [Setter ](/Setter ) | 注解在属性上，提供 setter 方法； |\n| [AllArgsConstructor ](/AllArgsConstructor ) | 注解在类上，提供构造方法，参数为所有属性； |\n| [NoArgsConstructor ](/NoArgsConstructor ) | 注解在类上，提供无参构造方法； |\n| [Data ](/Data ) | 注解在类上，提供所有属性的 getter 方法、setter 方法以及 equals、hashCode、toString 等方法； |\n| [Log ](/Log ) | 注解在类上，提供一个名为 log 的属性，类型为 java.util.logging.Logger，也可使用 @Log4j、@Log4j2、[Slf4j ](/Slf4j ) 等其他注解； |\n| [ToString ](/ToString ) | 注解在类上，提供 toString 方法； |\n| [EqualsAndHashCode ](/EqualsAndHashCode ) | 注解在类上，提供 equals、hashCode 方法； |\n| [Synchronized ](/Synchronized ) | 注解在方法上，提供 synchronized，可以指定锁的名称； |\n| [NonNull ](/NonNull ) | 注解在方法参数上，提供对参数的校验，防止空指针异常； |\n| [Cleanup ](/Cleanup ) | 注解在局部变量上，提供对资源的关闭，即调用 close 方法； |\n\n\n## 使用示例\n\n```java\npackage com.example.lombok;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.ToString;\nimport lombok.experimental.Accessors;\nimport lombok.extern.slf4j.Slf4j;\n\n@Data\n@ToString\n@Accessors(chain = true)\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User {\n    private Integer uid;\n    private String username;\n    private String password;\n}\n\n@Slf4j\nclass UserService {\n\n    public static void main(String[] args) {\n        User user = new User().setUid(1).setUsername(\"username\").setPassword(\"123\");\n        log.debug(\"user = {}\", user);\n    }\n}\n```\n\n直接运行看下结果是否正确吧：\n\n```java\n21:26:31.742 [main] DEBUG com.example.lombok.UserService - user = User(uid=1, username=username, password=123)\n```\n\n如此一来，代码变得相当的简洁明了。\n\n## 最终生成的代码结构\n\nlombok 通过插件在编译期间根据注解自动生成了相关的代码，通过下面的代码结构图可以看出一些端倪：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004688041-d14d95b6-1178-4824-bfc7-d549aeacc7e7.png#align=left&display=inline&height=466&linkTarget=_blank&originHeight=1800&originWidth=2880&size=0&width=746)\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-09-06 15:14:27</p><p>tags: [&quot;IDEA&quot;,&quot;Lombok&quot;,&quot;代码优化&quot;]</p><hr /><p><br /></p><p>Java 代码中有很多冗余、臃肿的代码（如：Getter/Setter、构造方法、hashCode 方法等）<code>lombok</code> 是一款 IDE 插件，其专注于消除此类代码，以达到代码简洁高效的目的。它同时提供了 IDEA 以及 Eclipse 相关的插件，本文以 IDEA 为例，做一些相关的示例</p><h2 id=\"88210852\">准备工作</h2><p><br /></p><p>1）IDEA 中安装相关的插件，如图：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004686511-d857296d-7993-429c-88cf-a99987cbeb79.png#align=left&amp;display=inline&amp;height=621&amp;linkTarget=_blank&amp;originHeight=1360&amp;originWidth=1634&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>2）IDEA 编译器相关设置，如图：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004687545-55c1cfe8-db3b-4946-ae40-0d6ce1b15712.png#align=left&amp;display=inline&amp;height=526&amp;linkTarget=_blank&amp;originHeight=1648&amp;originWidth=2338&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"da4790b3\">构建项目</h2><p><br /></p><p>以 SpringBoot 项目为例，以下为 pom.xml 文件：</p><p><br /></p><pre data-lang=\"xml\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.example&lt;/groupId&gt;\n    &lt;artifactId&gt;lombok-example&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;jar&lt;/packaging&gt;\n\n    &lt;name&gt;lombok-example&lt;/name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.0.4.RELEASE&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n\n    &lt;properties&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;</code></pre><p><br /></p><h2 id=\"dd38c9c5\">常用注解</h2><p><br /></p><p>lombok 提供了很多注解，常用的如下。</p><p><br /></p><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"360\"></col><col width=\"361\"></col></colgroup><tbody><tr><td>注解</td><td>作用</td></tr></tbody><tbody><tr><td><a href=\"/Getter \">Getter </a></td><td>注解在属性上，提供 getter 方法；</td></tr><tr><td><a href=\"/Setter \">Setter </a></td><td>注解在属性上，提供 setter 方法；</td></tr><tr><td><a href=\"/AllArgsConstructor \">AllArgsConstructor </a></td><td>注解在类上，提供构造方法，参数为所有属性；</td></tr><tr><td><a href=\"/NoArgsConstructor \">NoArgsConstructor </a></td><td>注解在类上，提供无参构造方法；</td></tr><tr><td><a href=\"/Data \">Data </a></td><td>注解在类上，提供所有属性的 getter 方法、setter 方法以及 equals、hashCode、toString 等方法；</td></tr><tr><td><a href=\"/Log \">Log </a></td><td>注解在类上，提供一个名为 log 的属性，类型为 java.util.logging.Logger，也可使用 @Log4j、@Log4j2、<a href=\"/Slf4j \">Slf4j </a> 等其他注解；</td></tr><tr><td><a href=\"/ToString \">ToString </a></td><td>注解在类上，提供 toString 方法；</td></tr><tr><td><a href=\"/EqualsAndHashCode \">EqualsAndHashCode </a></td><td>注解在类上，提供 equals、hashCode 方法；</td></tr><tr><td><a href=\"/Synchronized \">Synchronized </a></td><td>注解在方法上，提供 synchronized，可以指定锁的名称；</td></tr><tr><td><a href=\"/NonNull \">NonNull </a></td><td>注解在方法参数上，提供对参数的校验，防止空指针异常；</td></tr><tr><td><a href=\"/Cleanup \">Cleanup </a></td><td>注解在局部变量上，提供对资源的关闭，即调用 close 方法；</td></tr></tbody></table><p><br /></p><h2 id=\"4a532e14\">使用示例</h2><p><br /></p><pre data-lang=\"java\"><code>package com.example.lombok;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.ToString;\nimport lombok.experimental.Accessors;\nimport lombok.extern.slf4j.Slf4j;\n\n@Data\n@ToString\n@Accessors(chain = true)\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User {\n    private Integer uid;\n    private String username;\n    private String password;\n}\n\n@Slf4j\nclass UserService {\n\n    public static void main(String[] args) {\n        User user = new User().setUid(1).setUsername(&quot;username&quot;).setPassword(&quot;123&quot;);\n        log.debug(&quot;user = {}&quot;, user);\n    }\n}</code></pre><p><br /></p><p>直接运行看下结果是否正确吧：</p><p><br /></p><pre data-lang=\"java\"><code>21:26:31.742 [main] DEBUG com.example.lombok.UserService - user = User(uid=1, username=username, password=123)</code></pre><p><br /></p><p>如此一来，代码变得相当的简洁明了。</p><p><br /></p><h2 id=\"99326f01\">最终生成的代码结构</h2><p><br /></p><p>lombok 通过插件在编译期间根据注解自动生成了相关的代码，通过下面的代码结构图可以看出一些端倪：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004688041-d14d95b6-1178-4824-bfc7-d549aeacc7e7.png#align=left&amp;display=inline&amp;height=466&amp;linkTarget=_blank&amp;originHeight=1800&amp;originWidth=2880&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:04:57.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:03:37.000Z",
    "updated_at": "2019-02-01T07:04:57.000Z",
    "published_at": "2019-02-01T07:04:57.000Z",
    "first_published_at": "2019-02-01T07:04:57.000Z",
    "word_count": 885,
    "cover": "",
    "description": "date: 2018-09-06 15:14:27tags: [&quot;IDEA&quot;,&quot;Lombok&quot;,&quot;代码优化&quot;]Java 代码中有很多冗余、臃肿的代码（如：Getter/Setter、构造方法、hashCode 方法等）lombok 是...",
    "custom_description": "Java 代码中有很多冗余、臃肿的代码（如：Getter/Setter、构造方法、hashCode 方法等）`lombok` 是一款 IDE 插件，其专注于消除此类代码，以达到代码简洁高效的目的。它同时提供了 IDEA 以及 Eclipse 相关的插件，本文以 IDEA 为例，做一些相关的示例",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224307,
    "slug": "maven-assembly-plugin",
    "title": "使用Maven打包可执行jar",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-08-29 15:13:26<br />tags: [\"Maven\",\"Jar\"]\n---\n\n## SpringBoot工程\n\n```xml\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n<configuration>\n  <mainClass>com.wuwneze.springbootexample.SpringbootExampleApplication</mainClass>\n</configuration>\n<executions>\n  <execution>\n    <goals>\n      <goal>repackage</goal>\n    </goals>\n  </execution>\n</executions>\n</plugin>\n```\n\n## 普通Java工程\n\n```xml\n<plugin>\n<artifactId>maven-assembly-plugin</artifactId>\n<configuration>\n  <descriptorRefs>\n    <descriptorRef>jar-with-dependencies</descriptorRef>\n  </descriptorRefs>\n  <archive>\n    <manifest>\n      <mainClass>com.wuwenze.Main</mainClass>\n    </manifest>\n  </archive>\n</configuration>\n<executions>\n  <execution>\n    <id>make-assembly</id>\n    <phase>package</phase>\n    <goals>\n      <goal>single</goal>\n    </goals>\n  </execution>\n</executions>\n</plugin>\n```\n\n使用该插件生成的jar包，带jar-with-dependencies后缀的jar文件，可以直接运行。\n\n## 如何打包\n\n```shell\nmvn clean install package\n```\n\n## 题外话：如何让linux命令保持后台运行？\n\n```shell\nnohup java -jar test-0.0.1-SNAPSHOT-jar-with-dependencies.jar >test.log 2>&1 &\n```\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-08-29 15:13:26</p><p>tags: [&quot;Maven&quot;,&quot;Jar&quot;]</p><hr /><p><br /></p><h2 id=\"841966a7\">SpringBoot工程</h2><p><br /></p><pre data-lang=\"xml\"><code>&lt;plugin&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n&lt;configuration&gt;\n  &lt;mainClass&gt;com.wuwneze.springbootexample.SpringbootExampleApplication&lt;/mainClass&gt;\n&lt;/configuration&gt;\n&lt;executions&gt;\n  &lt;execution&gt;\n    &lt;goals&gt;\n      &lt;goal&gt;repackage&lt;/goal&gt;\n    &lt;/goals&gt;\n  &lt;/execution&gt;\n&lt;/executions&gt;\n&lt;/plugin&gt;</code></pre><p><br /></p><h2 id=\"779601b9\">普通Java工程</h2><p><br /></p><pre data-lang=\"xml\"><code>&lt;plugin&gt;\n&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n&lt;configuration&gt;\n  &lt;descriptorRefs&gt;\n    &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;\n  &lt;/descriptorRefs&gt;\n  &lt;archive&gt;\n    &lt;manifest&gt;\n      &lt;mainClass&gt;com.wuwenze.Main&lt;/mainClass&gt;\n    &lt;/manifest&gt;\n  &lt;/archive&gt;\n&lt;/configuration&gt;\n&lt;executions&gt;\n  &lt;execution&gt;\n    &lt;id&gt;make-assembly&lt;/id&gt;\n    &lt;phase&gt;package&lt;/phase&gt;\n    &lt;goals&gt;\n      &lt;goal&gt;single&lt;/goal&gt;\n    &lt;/goals&gt;\n  &lt;/execution&gt;\n&lt;/executions&gt;\n&lt;/plugin&gt;</code></pre><p><br /></p><p>使用该插件生成的jar包，带jar-with-dependencies后缀的jar文件，可以直接运行。</p><p><br /></p><h2 id=\"c0e1e9a3\">如何打包</h2><p><br /></p><pre data-lang=\"shell\"><code>mvn clean install package</code></pre><p><br /></p><h2 id=\"fc94e90f\">题外话：如何让linux命令保持后台运行？</h2><p><br /></p><pre data-lang=\"shell\"><code>nohup java -jar test-0.0.1-SNAPSHOT-jar-with-dependencies.jar &gt;test.log 2&gt;&amp;1 &amp;</code></pre><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:03:27.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:02:29.000Z",
    "updated_at": "2019-02-01T07:03:27.000Z",
    "published_at": "2019-02-01T07:03:27.000Z",
    "first_published_at": "2019-02-01T07:03:27.000Z",
    "word_count": 254,
    "cover": "",
    "description": "date: 2018-08-29 15:13:26tags: [&quot;Maven&quot;,&quot;Jar&quot;]SpringBoot工程&lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt...",
    "custom_description": "date: 2018-08-29 15:13:26tags: [&quot;Maven&quot;,&quot;Jar&quot;]SpringBoot工程&lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224294,
    "slug": "jmeter-record-script",
    "title": "使用JMeter录制性能测试脚本",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-08-28 15:11:21<br />tags: [\"JMeter\",\"性能测试\"]\n---\nJMeter是一个开源的基于Java的性能测试工具，使用起来真的是即\"方便\"又\"强大\"\n\n### 新建线程组\n\n用于存放录制结果\n\n### 新建代理服务器\n\n1. 测试计划->新建非测试原件->HTTP代理服务器\n1. TestPlan Creation 将目标控制器设置为：测试计划>线程组 （录制后的请求信息将加到此线程组中来）\n1. Requests Filtering 请求过滤，排除无关的请求，具体配置如下：\n\n包含模式：只录制指定主机的请求\n\n```javascript\n.+(itkeeping\\.com).+\n```\n\n排除模式：排除静态请求\n\n```javascript\n(?i).*\\.(bmp|css|js|gif|ico|jpe?g|png|swf|woff|woff2)\n```\n\n配置完成后截图如下：<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473849-0fc6767f-b1df-4eec-96db-ca3f15025fb7.jpeg#align=left&display=inline&height=500&linkTarget=_blank&originHeight=723&originWidth=1078&size=0&width=746)<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473659-f139f325-f183-4470-ade6-a8a0b311d9e9.jpeg#align=left&display=inline&height=500&linkTarget=_blank&originHeight=723&originWidth=1078&size=0&width=746)\n\n### 录制前准备\n\n1. 启动代理服务器，默认端口8888。<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004474086-2c2a710b-0a04-4625-be37-a35401f43087.jpeg#align=left&display=inline&height=461&linkTarget=_blank&originHeight=600&originWidth=945&size=0&width=726)\n1. 启动代理服务器后，默认在bin目录下生成一个SSL证书，若不录制HTTPS网站，忽略此项。\n1. 使用Firefox配置代理，以及SSL证书。<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473877-d59d751c-e9e8-4f5c-89b4-1ad061f88ef8.jpeg#align=left&display=inline&height=608&linkTarget=_blank&originHeight=805&originWidth=962&size=0&width=726)<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473853-b6f324e4-b2af-408b-808e-2246029f8038.jpeg#align=left&display=inline&height=387&linkTarget=_blank&originHeight=703&originWidth=1318&size=0&width=726)\n\n### 录制\n\n一切准备就绪后，使用Firefox打开指定的网站进行操作，操作完成后，关闭代理服务器。<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473943-668c702b-effe-499e-ade3-d7c595f0f237.jpeg#align=left&display=inline&height=476&linkTarget=_blank&originHeight=761&originWidth=1193&size=0&width=746)<br />\n上图录制了从登陆到新建工单的整个过程, 有很多请求我现在并不需要，可以手动删除，只保留新建工单的接口。\n\n### 使用录制的脚本\n\n在使用之前，先进行一下线程组的相关设置，这里我设置了10个线程，共循环10次<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473805-f0d2fb28-a970-4bc0-9374-420ca1c853f3.jpeg#align=left&display=inline&height=562&linkTarget=_blank&originHeight=624&originWidth=828&size=0&width=746)<br />\n另外我希望新建工单主题的uid和主题，描述每次都不一样，可以使用jmeter内置函数替换。<br />\n生成UUID：\n\n```\n${__UUID}\n```\n\n基于UUID生成30个随机字符：\n\n```\n${__RandomString(30,${__UUID},1)}\n```\n\n最终配置请求的参数如下：<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473971-a336c511-91e1-45d0-ae99-7b9b2fa2ff29.jpeg#align=left&display=inline&height=443&linkTarget=_blank&originHeight=580&originWidth=977&size=0&width=746)<br />\n配置响应断言：更直观的判断请求是否成功，只要status=0就代表执行成功<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473769-c5a811d7-e8b5-4078-93b4-714bd4cdfacd.jpeg#align=left&display=inline&height=413&linkTarget=_blank&originHeight=701&originWidth=1265&size=0&width=746)\n\n启动一下试试吧！<br />\n结果查看树，断言全部通过，说明请求成功了<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004474108-cf4e3ec9-b5c4-467d-8ef0-f4c9460c118a.jpeg#align=left&display=inline&height=381&linkTarget=_blank&originHeight=712&originWidth=1393&size=0&width=746)<br />\n聚合报告，包含各项指标，反正就是没毛病：<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473845-02f9760e-8265-4173-93e5-b1976995ecaf.jpeg#align=left&display=inline&height=381&linkTarget=_blank&originHeight=712&originWidth=1393&size=0&width=746)<br />\n最后看数据是否正常生成？<br />\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473796-8a61dccb-2cf1-4859-9fe7-fc1cd4719562.jpeg#align=left&display=inline&height=809&linkTarget=_blank&originHeight=875&originWidth=807&size=0&width=746)\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-08-28 15:11:21</p><p>tags: [&quot;JMeter&quot;,&quot;性能测试&quot;]</p><hr /><p>JMeter是一个开源的基于Java的性能测试工具，使用起来真的是即&quot;方便&quot;又&quot;强大&quot;</p><p><br /></p><h3 id=\"7b310a06\">新建线程组</h3><p><br /></p><p>用于存放录制结果</p><p><br /></p><h3 id=\"1230138d\">新建代理服务器</h3><p><br /></p><ol start=\"1\"><li>测试计划-&gt;新建非测试原件-&gt;HTTP代理服务器</li></ol><ol start=\"2\"><li>TestPlan Creation 将目标控制器设置为：测试计划&gt;线程组 （录制后的请求信息将加到此线程组中来）</li></ol><ol start=\"3\"><li>Requests Filtering 请求过滤，排除无关的请求，具体配置如下：</li></ol><p><br /></p><p>包含模式：只录制指定主机的请求</p><p><br /></p><pre data-lang=\"javascript\"><code>.+(itkeeping\\.com).+</code></pre><p><br /></p><p>排除模式：排除静态请求</p><p><br /></p><pre data-lang=\"javascript\"><code>(?i).*\\.(bmp|css|js|gif|ico|jpe?g|png|swf|woff|woff2)</code></pre><p><br /></p><p>配置完成后截图如下：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473849-0fc6767f-b1df-4eec-96db-ca3f15025fb7.jpeg#align=left&amp;display=inline&amp;height=500&amp;linkTarget=_blank&amp;originHeight=723&amp;originWidth=1078&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473659-f139f325-f183-4470-ade6-a8a0b311d9e9.jpeg#align=left&amp;display=inline&amp;height=500&amp;linkTarget=_blank&amp;originHeight=723&amp;originWidth=1078&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"d141ceab\">录制前准备</h3><p><br /></p><ol start=\"1\"><li>启动代理服务器，默认端口8888。<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004474086-2c2a710b-0a04-4625-be37-a35401f43087.jpeg#align=left&amp;display=inline&amp;height=461&amp;linkTarget=_blank&amp;originHeight=600&amp;originWidth=945&amp;size=0&amp;width=726\" style=\"max-width: 600px; width: 726px;\" /></li></ol><ol start=\"2\"><li>启动代理服务器后，默认在bin目录下生成一个SSL证书，若不录制HTTPS网站，忽略此项。</li></ol><ol start=\"3\"><li>使用Firefox配置代理，以及SSL证书。<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473877-d59d751c-e9e8-4f5c-89b4-1ad061f88ef8.jpeg#align=left&amp;display=inline&amp;height=608&amp;linkTarget=_blank&amp;originHeight=805&amp;originWidth=962&amp;size=0&amp;width=726\" style=\"max-width: 600px; width: 726px;\" /><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473853-b6f324e4-b2af-408b-808e-2246029f8038.jpeg#align=left&amp;display=inline&amp;height=387&amp;linkTarget=_blank&amp;originHeight=703&amp;originWidth=1318&amp;size=0&amp;width=726\" style=\"max-width: 600px; width: 726px;\" /></li></ol><p><br /></p><h3 id=\"edf74d55\">录制</h3><p><br /></p><p>一切准备就绪后，使用Firefox打开指定的网站进行操作，操作完成后，关闭代理服务器。<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473943-668c702b-effe-499e-ade3-d7c595f0f237.jpeg#align=left&amp;display=inline&amp;height=476&amp;linkTarget=_blank&amp;originHeight=761&amp;originWidth=1193&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n上图录制了从登陆到新建工单的整个过程, 有很多请求我现在并不需要，可以手动删除，只保留新建工单的接口。</p><p><br /></p><h3 id=\"047324f4\">使用录制的脚本</h3><p><br /></p><p>在使用之前，先进行一下线程组的相关设置，这里我设置了10个线程，共循环10次<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473805-f0d2fb28-a970-4bc0-9374-420ca1c853f3.jpeg#align=left&amp;display=inline&amp;height=562&amp;linkTarget=_blank&amp;originHeight=624&amp;originWidth=828&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n另外我希望新建工单主题的uid和主题，描述每次都不一样，可以使用jmeter内置函数替换。<br />\n生成UUID：</p><p><br /></p><pre><code>${__UUID}</code></pre><p><br /></p><p>基于UUID生成30个随机字符：</p><p><br /></p><pre><code>${__RandomString(30,${__UUID},1)}</code></pre><p><br /></p><p>最终配置请求的参数如下：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473971-a336c511-91e1-45d0-ae99-7b9b2fa2ff29.jpeg#align=left&amp;display=inline&amp;height=443&amp;linkTarget=_blank&amp;originHeight=580&amp;originWidth=977&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n配置响应断言：更直观的判断请求是否成功，只要status=0就代表执行成功<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473769-c5a811d7-e8b5-4078-93b4-714bd4cdfacd.jpeg#align=left&amp;display=inline&amp;height=413&amp;linkTarget=_blank&amp;originHeight=701&amp;originWidth=1265&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>启动一下试试吧！<br />\n结果查看树，断言全部通过，说明请求成功了<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004474108-cf4e3ec9-b5c4-467d-8ef0-f4c9460c118a.jpeg#align=left&amp;display=inline&amp;height=381&amp;linkTarget=_blank&amp;originHeight=712&amp;originWidth=1393&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n聚合报告，包含各项指标，反正就是没毛病：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473845-02f9760e-8265-4173-93e5-b1976995ecaf.jpeg#align=left&amp;display=inline&amp;height=381&amp;linkTarget=_blank&amp;originHeight=712&amp;originWidth=1393&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n最后看数据是否正常生成？<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/243237/1549004473796-8a61dccb-2cf1-4859-9fe7-fc1cd4719562.jpeg#align=left&amp;display=inline&amp;height=809&amp;linkTarget=_blank&amp;originHeight=875&amp;originWidth=807&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:01:54.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T07:00:37.000Z",
    "updated_at": "2019-02-01T07:01:54.000Z",
    "published_at": "2019-02-01T07:01:54.000Z",
    "first_published_at": "2019-02-01T07:01:31.000Z",
    "word_count": 526,
    "cover": "",
    "description": "date: 2018-08-28 15:11:21tags: [&quot;JMeter&quot;,&quot;性能测试&quot;]JMeter是一个开源的基于Java的性能测试工具，使用起来真的是即&quot;方便&quot;又&quot;强大&quot;新建线程组用于存放录制结果新建代...",
    "custom_description": "JMeter是一个开源的基于Java的性能测试工具，使用起来真的是即&quot;方便&quot;又&quot;强大&quot;录制脚本步骤新建线程组用于存放录...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224290,
    "slug": "jmeter-plugins-dev",
    "title": "开发一个JMeter插件（CsvWriterPostProcessor）",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2019-01-04 12:46:43<br />tags: [\"JMeter\"]\n---\n\n虽然JMeter自带的插件基本能满足大多数场景，但有时候也需要自定义一些插件来实现。网上的JMeter的插件开发文档稀少，通过本人的一些尝试，总结了一些JMeter插件开发相关的经验。\n\n## JMeter的核心组件\n\n* `Timer` 定时器，用于配置每次sampling之间的等待时间。\n* `Sampler` 取样器，如果是其他的协议需要实现其他协议的Sampler。\n* `ConfigElement` 配置组件，主要用于定义前置配置。如数据库连接，csv输入数据集等。\n* `Assertion` 断言，验证Sampler的结果是否符合预期。\n* `PostProcessor` 后置处理器，一般用于对Sampler结果进行二次加工。\n* `Visualizer` 将sampler的结果进行可视化展示。\n* `Controller` 对sampler进行逻辑控制。\n* `SampleListener` 监听器，一般用于保存sampler的结果等耗费时间的操作。\n## JMeter插件加载机制\n\n通过阅读JMeter源码发现，它的加载插件机制是相当简单的，扫描扩展下的的所有实现了JMeterGUIComponent和TestBean接口的类，然后进行初始化。\n\n```java\nClassFinder.findClassesThatExtend(\n\tJMeterUtils.getSearchPaths(), \n\tnew Class[] {JMeterGUIComponent.class, TestBean.class }\n```\n\n所以只要确保插件的jar包在扩展路径下即可，默认路径是: `JMETER_HOME/lib/ext`\n\n## JMeter的GUI机制\n\nJMeter是基于Swing实现的，咱们直接继承JMeterGUIComponent接口的抽象实现类即可：\n\n```java\norg.apache.jmeter.config.gui.AbstractConfigGui\norg.apache.jmeter.assertions.gui.AbstractAssertionGui\norg.apache.jmeter.control.gui.AbstractControllerGui\norg.apache.jmeter.timers.gui.AbstractTimerGui\norg.apache.jmeter.visualizers.gui.AbstractVisualizer\norg.apache.jmeter.samplers.gui.AbstractSamplerGui\norg.apache.jmeter.processor.gui.AbstractPostProcessorGui\n...\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004414933-f975aa96-8b63-409c-9bd3-5c6caa263131.png#align=left&display=inline&height=433&linkTarget=_blank&originHeight=750&originWidth=1292&size=0&width=746)\n\n## 例子\n\n本例子是一个后置处理器（CsvWriterPostProcessor），用于将取样器结果按照指定的格式写入CSV文件中。\n\n### 建立一个标准的Maven项目，其核心依赖如下：\n\n```xml\n<dependency>\n  <groupId>org.apache.jmeter</groupId>\n  <artifactId>ApacheJMeter_core</artifactId>\n  <version>5.0</version>\n</dependency>\n<dependency>\n  <groupId>org.apache.jmeter</groupId>\n  <artifactId>ApacheJMeter_java</artifactId>\n  <version>5.0</version>\n</dependency>\n<dependency>\n  <groupId>net.sourceforge.javacsv</groupId>\n  <artifactId>javacsv</artifactId>\n  <version>2.0</version>\n</dependency>\n```\n\n### 实现AbstractPostProcessorGui，绘制界面：\n\n```java\npublic class CsvWriterPostProcessorGui extends AbstractPostProcessorGui {\n    public static final String WIKIPAGE = \"CsvWriterPostProcessor\";\n    private JTextField filename, headers, columnVariables;\n    private JCheckBox appendRecord;\n\n    public CsvWriterPostProcessorGui() {\n        super();\n        this.initGui();\n        this.initDefaultFields();\n    }\n\n    @Override\n    public String getStaticLabel() {\n        return JMeterPluginsUtils.prefixLabel(\"CsvWriter PostProcessor\");\n    }\n\n    @Override\n    public String getLabelResource() {\n        return getClass().getCanonicalName();\n    }\n\n    @Override\n    public void configure(TestElement element) {\n        super.configure(element);\n        if (element instanceof CsvWriterPostProcessor) {\n            CsvWriterPostProcessor el = (CsvWriterPostProcessor) element;\n            filename.setText(el.getFileName());\n            headers.setText(el.getHeaders());\n            columnVariables.setText(el.getColumnVariables());\n            appendRecord.setSelected(el.isAppendRecord());\n        }\n    }\n\n    @Override\n    public TestElement createTestElement() {\n        CsvWriterPostProcessor csvWriterPostProcessor = new CsvWriterPostProcessor();\n        this.modifyTestElement(csvWriterPostProcessor);\n        csvWriterPostProcessor.setComment(JMeterPluginsUtils.getWikiLinkText(WIKIPAGE));\n        return csvWriterPostProcessor;\n    }\n\n    @Override\n    public void modifyTestElement(TestElement element) {\n        super.configureTestElement(element);\n        if (element instanceof CsvWriterPostProcessor) {\n            CsvWriterPostProcessor el = (CsvWriterPostProcessor) element;\n            el.setFileName(filename.getText());\n            el.setHeaders(headers.getText());\n            el.setColumnVariables(columnVariables.getText());\n            el.setAppendRecord(appendRecord.isSelected());\n        }\n    }\n\n    @Override\n    public void clearGui() {\n        super.clearGui();\n        this.initDefaultFields();\n    }\n\n    private void initGui() {\n        setLayout(new BorderLayout(0, 5));\n        setBorder(makeBorder());\n\n        add(JMeterPluginsUtils.addHelpLinkToPanel(makeTitlePanel(), WIKIPAGE), BorderLayout.NORTH);\n\n        JPanel mainPanel = new JPanel(new GridBagLayout());\n\n        GridBagConstraints labelConstraints = new GridBagConstraints();\n        labelConstraints.anchor = GridBagConstraints.FIRST_LINE_END;\n\n        GridBagConstraints editConstraints = new GridBagConstraints();\n        editConstraints.anchor = GridBagConstraints.FIRST_LINE_START;\n        editConstraints.weightx = 1.0;\n        editConstraints.fill = GridBagConstraints.HORIZONTAL;\n\n        addToPanel(mainPanel, labelConstraints, 0, 1, new JLabel(\"FileName: \", JLabel.RIGHT));\n        addToPanel(mainPanel, editConstraints, 1, 1, filename = new JTextField(20));\n        JButton browseButton = new JButton(\"Browse...\");\n        addToPanel(mainPanel, labelConstraints, 2, 1, browseButton);\n        GuiBuilderHelper.strechItemToComponent(filename, browseButton);\n        browseButton.addActionListener(new BrowseAction(filename));\n\n        addToPanel(mainPanel, labelConstraints, 0, 2, new JLabel(\"Headers: \", JLabel.RIGHT));\n        addToPanel(mainPanel, editConstraints, 1, 2, headers = new JTextField(20));\n\n        editConstraints.insets = new Insets(2, 0, 0, 0);\n        labelConstraints.insets = new Insets(2, 0, 0, 0);\n        addToPanel(mainPanel, labelConstraints, 0, 3, new JLabel(\"ColumnVariables: \", JLabel.RIGHT));\n        addToPanel(mainPanel, editConstraints, 1, 3, columnVariables = new JTextField(20));\n\n        addToPanel(mainPanel, labelConstraints, 0, 4, new JLabel(\"AppendRecord?: \", JLabel.RIGHT));\n        addToPanel(mainPanel, editConstraints, 1, 4, appendRecord = new JCheckBox());\n\n        JPanel container = new JPanel(new BorderLayout());\n        container.add(mainPanel, BorderLayout.NORTH);\n        add(container, BorderLayout.CENTER);\n    }\n\n    private void addToPanel(JPanel panel, GridBagConstraints constraints, int col, int row, JComponent component) {\n        constraints.gridx = col;\n        constraints.gridy = row;\n        panel.add(component, constraints);\n    }\n\n    private void initDefaultFields() {\n        filename.setText(\"email.token.csv\");\n        headers.setText(\"Email,Token\");\n        columnVariables.setText(\"email,token\");\n        appendRecord.setSelected(true);\n    }\n}\n```\n\n### 实现PostProcessor，处理读取数据、写入CSV文件逻辑：\n\n```java\npublic class CsvWriterPostProcessor extends AbstractTestElement\n        implements PostProcessor {\n    private static final Logger log = LoggingManager.getLoggerForClass();\n    private static final String FILENAME = \"CsvWriterPostProcessor.FileName\";\n    private static final String HEADERS = \"CsvWriterPostProcessor.Headers\";\n    private static final String COLUMN_VARIABLES = \"CsvWriterPostProcessor.ColumnVariables\";\n    private static final String APPEND_RECORD = \"CsvWriterPostProcessor.AppendRecord\";\n    private static final String DEFAULT_CHARSET = \"UTF-8\";\n    private static final char DEFAULT_CSV_SPLIT = ',';\n    private static final String DEFAULT_CSV_COLUMN_VALUE = \"-\";\n\n\n    @Override\n    public void process() {\n        this.doCsvWriter(this.getFileName(), this.getCsvHeaders(), this.getCsvColumns());\n    }\n\n    private String[] getCsvHeaders() {\n        String headers = this.getHeaders();\n        if (null == headers || headers.length() == 0) {\n            return new String[0];\n        }\n        return headers.split(\",\");\n    }\n\n    private List<String[]> getCsvColumns() {\n        List<String[]> csvColumns = new ArrayList<>();\n\n        Integer maxMatchNr = -1;\n        String columnVariableString = this.getColumnVariables();\n        String[] columnVariables = (null != columnVariableString && columnVariableString.trim().length() != 0) ? columnVariableString.split(\",\") : new String[0];\n        for (int i = 0; i < columnVariables.length; i++) {\n            int _matchNr = this.getVariableAsInt(columnVariables[i] + \"_matchNr\", -1);\n            if (_matchNr > maxMatchNr) {\n                maxMatchNr = _matchNr;\n            }\n        }\n        String[] firstColumns = new String[columnVariables.length];\n        for (int i = 0; i < columnVariables.length; i++) {\n            // get columnVariables\n            firstColumns[i] = this.getVariableAsString(columnVariables[i], DEFAULT_CSV_COLUMN_VALUE);\n        }\n        if (!this.isEmptyColumns(firstColumns)) {\n            csvColumns.add(firstColumns);\n        }\n\n        for (int i = 0; i < maxMatchNr; i++) {\n            String[] bodyColumns = new String[columnVariables.length];\n            for (int j = 0; j < columnVariables.length; j++) {\n                // get columnVariables_matchNr\n                bodyColumns[j] = this.getVariableAsString((columnVariables[j] + (\"_\" + (i + 1))), DEFAULT_CSV_COLUMN_VALUE);\n            }\n            if (!this.isEmptyColumns(bodyColumns)) {\n                csvColumns.add(bodyColumns);\n            }\n        }\n        return csvColumns;\n    }\n\n\n    private void doCsvWriter(String path, String[] csvHeader, List<String[]> csvColumns) {\n        log.info(\"#0104 doCsvWriter path = \" + path);\n\n        if (null == csvColumns || csvColumns.size() == 0) {\n            log.info(\"#0104 doCsvWriter error, csvColumns.size() == 0\");\n            return;\n        }\n\n        boolean isAppendRecord = this.isAppendRecord();\n        if (isAppendRecord && csvHeader != null && csvHeader.length > 0) {\n            CsvReader csvReader = null;\n            try {\n                csvReader = new CsvReader(path, DEFAULT_CSV_SPLIT, Charset.forName(DEFAULT_CHARSET));\n                csvReader.readHeaders();\n\n                String[] readerHeaders = csvReader.getHeaders();\n                if (readerHeaders.length != csvHeader.length) {\n                    isAppendRecord = false;\n                }\n\n                for (int i = 0; i < readerHeaders.length; i++) {\n                    if (!readerHeaders[i].equals(csvHeader[i])) {\n                        isAppendRecord = false;\n                        break;\n                    }\n                }\n                if (readerHeaders.length > 0 && isAppendRecord) {\n                    csvHeader = null;\n                }\n            } catch (FileNotFoundException e) {\n                // ignore\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                if (null != csvReader) {\n                    csvReader.close();\n                }\n            }\n        }\n\n        CsvWriter csvWriter = null;\n        BufferedWriter bufferedWriter = null;\n        try {\n            bufferedWriter = new BufferedWriter(//\n                    new OutputStreamWriter(//\n                            new FileOutputStream(path, isAppendRecord), DEFAULT_CHARSET), 1024);\n            csvWriter = new CsvWriter(bufferedWriter, DEFAULT_CSV_SPLIT);\n\n            if (null != csvHeader && csvHeader.length > 0) {\n                csvWriter.writeRecord(csvHeader);\n                log.info(\"#0104 doCsvWriter writeRecord csvHeader = \" + this.printArray(csvHeader));\n            }\n            for (String[] csvColumn : csvColumns) {\n                csvWriter.writeRecord(csvColumn);\n                log.info(\"#0104 doCsvWriter writeRecord csvColumn = \" + this.printArray(csvColumn));\n            }\n            log.info(\"#0104 doCsvWriter success, csvColumns.size() == \" + csvColumns.size());\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (null != csvWriter) {\n                csvWriter.flush();\n                csvWriter.close();\n            }\n            if (null != bufferedWriter) {\n                try {\n                    bufferedWriter.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private boolean isEmptyColumns(String[] array) {\n        if (null != array && array.length > 0) {\n            int emptyCount = 0;\n            for (int i = 0; i < array.length; i++) {\n                if (null == array[i] || array[i].trim().length() == 0 || DEFAULT_CSV_COLUMN_VALUE.equals(array[i])) {\n                    emptyCount++;\n                }\n            }\n            return emptyCount == array.length;\n        }\n        return true;\n    }\n\n    private String printArray(String[] array) {\n        if (null != array && array.length > 0) {\n            StringBuilder stringBuilder = new StringBuilder(\"[\");\n            for (String item : array) {\n                stringBuilder.append(item).append(\",\");\n            }\n            if (stringBuilder.length() > 1) {\n                stringBuilder.deleteCharAt(stringBuilder.length() - 1);\n            }\n            stringBuilder.append(\"]\");\n            return stringBuilder.toString();\n        }\n        return \"[]\";\n    }\n\n    public JMeterVariables getVars() {\n        return this.getThreadContext().getVariables();\n    }\n\n    private String getVariableAsString(String key, String defaultVal) {\n        Object value = this.getVars().getObject(key);\n        if (null == value || (value instanceof String && ((String) value).trim().length() == 0)) {\n            return defaultVal;\n        }\n        return String.valueOf(value);\n    }\n\n    private int getVariableAsInt(String key, int defaultVal) {\n        Object value = this.getVars().getObject(key);\n        if (null == value) {\n            return defaultVal;\n        }\n        return Integer.parseInt(String.valueOf(value));\n    }\n\n    public void setFileName(String fileName) {\n        this.setProperty(FILENAME, fileName);\n    }\n\n    public String getFileName() {\n        return this.getPropertyAsString(FILENAME);\n    }\n\n    public void setHeaders(String headers) {\n        this.setProperty(HEADERS, headers);\n    }\n\n    public String getHeaders() {\n        return this.getPropertyAsString(HEADERS, DEFAULT_CSV_COLUMN_VALUE);\n    }\n\n    public void setColumnVariables(String columns) {\n        this.setProperty(COLUMN_VARIABLES, columns);\n    }\n\n    public String getColumnVariables() {\n        return this.getPropertyAsString(COLUMN_VARIABLES);\n    }\n\n    public void setAppendRecord(boolean appendRecord) {\n        this.setProperty(APPEND_RECORD, appendRecord);\n    }\n\n    public boolean isAppendRecord() {\n        return this.getPropertyAsBoolean(APPEND_RECORD, true);\n    }\n}\n```\n\n### 打包并测试\n\n打包完成后，将jar放入`JMETER_HOME/lib/ext`目录中。\n\n* 添加取样器，请求相关接口，接口返回数据格式如下：\n\n```json\n{\n\t\"result\": {\n\t\t\"_count\": 100,\n\t\t\"_total\": 105,\n\t\t\"_page\": 1,\n\t\t\"engineers\": [{\n\t\t\t\"user\": {\n\t\t\t\t\"email\": \"xxxxx@test.com\",\n\t\t\t\t\"id\": 6008,\n\t\t\t\t\"status\": 1\n\t\t\t}\n\t\t},....]\n\t},\n\t\"status\": 0\n}\n```\n\n* 添加两个正则表达式提取器，将所有的Email、UserID取出。\n\n```javascript\n// email = {\"email\":\"(.*?)\",\n// userId = \"id\":(.*?),\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004414941-268e20b3-35bb-4709-959b-5352ecbfe453.png#align=left&display=inline&height=111&linkTarget=_blank&originHeight=158&originWidth=1066&size=0&width=746)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004414964-d4e26104-4d6b-4744-871b-2802ffcea4b9.png#align=left&display=inline&height=115&linkTarget=_blank&originHeight=165&originWidth=1075&size=0&width=746)\n\n* 添加编写好的后置处理器（CsvWriterPostProcessor），将提取器取出的值写入CSV文件中。\n* 最终的结果如下\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004414992-723f0c8d-3221-494a-9398-ef97dc804b52.png#align=left&display=inline&height=420&linkTarget=_blank&originHeight=864&originWidth=1536&size=0&width=746)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004415009-b888f600-6af6-4d8e-86cc-ae7cc9878937.png#align=left&display=inline&height=358&linkTarget=_blank&originHeight=735&originWidth=1533&size=0&width=746)\n\n* 源代码地址：[https://github.com/wuwz/jmeter-plugins/tree/master/plugins/csvwriter](https://github.com/wuwz/jmeter-plugins/tree/master/plugins/csvwriter)\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2019-01-04 12:46:43</p><p>tags: [&quot;JMeter&quot;]</p><hr /><p><br /></p><p>虽然JMeter自带的插件基本能满足大多数场景，但有时候也需要自定义一些插件来实现。网上的JMeter的插件开发文档稀少，通过本人的一些尝试，总结了一些JMeter插件开发相关的经验。</p><p><br /></p><h2 id=\"1e62f37d\">JMeter的核心组件</h2><p><br /></p><ul><li><code>Timer</code> 定时器，用于配置每次sampling之间的等待时间。</li></ul><ul><li><code>Sampler</code> 取样器，如果是其他的协议需要实现其他协议的Sampler。</li></ul><ul><li><code>ConfigElement</code> 配置组件，主要用于定义前置配置。如数据库连接，csv输入数据集等。</li></ul><ul><li><code>Assertion</code> 断言，验证Sampler的结果是否符合预期。</li></ul><ul><li><code>PostProcessor</code> 后置处理器，一般用于对Sampler结果进行二次加工。</li></ul><ul><li><code>Visualizer</code> 将sampler的结果进行可视化展示。</li></ul><ul><li><code>Controller</code> 对sampler进行逻辑控制。</li></ul><ul><li><code>SampleListener</code> 监听器，一般用于保存sampler的结果等耗费时间的操作。</li></ul><h2 id=\"046319d3\">JMeter插件加载机制</h2><p><br /></p><p>通过阅读JMeter源码发现，它的加载插件机制是相当简单的，扫描扩展下的的所有实现了JMeterGUIComponent和TestBean接口的类，然后进行初始化。</p><p><br /></p><pre data-lang=\"java\"><code>ClassFinder.findClassesThatExtend(\n\tJMeterUtils.getSearchPaths(), \n\tnew Class[] {JMeterGUIComponent.class, TestBean.class }</code></pre><p><br /></p><p>所以只要确保插件的jar包在扩展路径下即可，默认路径是: <code>JMETER_HOME/lib/ext</code></p><p><br /></p><h2 id=\"39049c9b\">JMeter的GUI机制</h2><p><br /></p><p>JMeter是基于Swing实现的，咱们直接继承JMeterGUIComponent接口的抽象实现类即可：</p><p><br /></p><pre data-lang=\"java\"><code>org.apache.jmeter.config.gui.AbstractConfigGui\norg.apache.jmeter.assertions.gui.AbstractAssertionGui\norg.apache.jmeter.control.gui.AbstractControllerGui\norg.apache.jmeter.timers.gui.AbstractTimerGui\norg.apache.jmeter.visualizers.gui.AbstractVisualizer\norg.apache.jmeter.samplers.gui.AbstractSamplerGui\norg.apache.jmeter.processor.gui.AbstractPostProcessorGui\n...</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004414933-f975aa96-8b63-409c-9bd3-5c6caa263131.png#align=left&amp;display=inline&amp;height=433&amp;linkTarget=_blank&amp;originHeight=750&amp;originWidth=1292&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"8cb94eb1\">例子</h2><p><br /></p><p>本例子是一个后置处理器（CsvWriterPostProcessor），用于将取样器结果按照指定的格式写入CSV文件中。</p><p><br /></p><h3 id=\"8b1177ec\">建立一个标准的Maven项目，其核心依赖如下：</h3><p><br /></p><pre data-lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.apache.jmeter&lt;/groupId&gt;\n  &lt;artifactId&gt;ApacheJMeter_core&lt;/artifactId&gt;\n  &lt;version&gt;5.0&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.apache.jmeter&lt;/groupId&gt;\n  &lt;artifactId&gt;ApacheJMeter_java&lt;/artifactId&gt;\n  &lt;version&gt;5.0&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;net.sourceforge.javacsv&lt;/groupId&gt;\n  &lt;artifactId&gt;javacsv&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre><p><br /></p><h3 id=\"49bafd45\">实现AbstractPostProcessorGui，绘制界面：</h3><p><br /></p><pre data-lang=\"java\"><code>public class CsvWriterPostProcessorGui extends AbstractPostProcessorGui {\n    public static final String WIKIPAGE = &quot;CsvWriterPostProcessor&quot;;\n    private JTextField filename, headers, columnVariables;\n    private JCheckBox appendRecord;\n\n    public CsvWriterPostProcessorGui() {\n        super();\n        this.initGui();\n        this.initDefaultFields();\n    }\n\n    @Override\n    public String getStaticLabel() {\n        return JMeterPluginsUtils.prefixLabel(&quot;CsvWriter PostProcessor&quot;);\n    }\n\n    @Override\n    public String getLabelResource() {\n        return getClass().getCanonicalName();\n    }\n\n    @Override\n    public void configure(TestElement element) {\n        super.configure(element);\n        if (element instanceof CsvWriterPostProcessor) {\n            CsvWriterPostProcessor el = (CsvWriterPostProcessor) element;\n            filename.setText(el.getFileName());\n            headers.setText(el.getHeaders());\n            columnVariables.setText(el.getColumnVariables());\n            appendRecord.setSelected(el.isAppendRecord());\n        }\n    }\n\n    @Override\n    public TestElement createTestElement() {\n        CsvWriterPostProcessor csvWriterPostProcessor = new CsvWriterPostProcessor();\n        this.modifyTestElement(csvWriterPostProcessor);\n        csvWriterPostProcessor.setComment(JMeterPluginsUtils.getWikiLinkText(WIKIPAGE));\n        return csvWriterPostProcessor;\n    }\n\n    @Override\n    public void modifyTestElement(TestElement element) {\n        super.configureTestElement(element);\n        if (element instanceof CsvWriterPostProcessor) {\n            CsvWriterPostProcessor el = (CsvWriterPostProcessor) element;\n            el.setFileName(filename.getText());\n            el.setHeaders(headers.getText());\n            el.setColumnVariables(columnVariables.getText());\n            el.setAppendRecord(appendRecord.isSelected());\n        }\n    }\n\n    @Override\n    public void clearGui() {\n        super.clearGui();\n        this.initDefaultFields();\n    }\n\n    private void initGui() {\n        setLayout(new BorderLayout(0, 5));\n        setBorder(makeBorder());\n\n        add(JMeterPluginsUtils.addHelpLinkToPanel(makeTitlePanel(), WIKIPAGE), BorderLayout.NORTH);\n\n        JPanel mainPanel = new JPanel(new GridBagLayout());\n\n        GridBagConstraints labelConstraints = new GridBagConstraints();\n        labelConstraints.anchor = GridBagConstraints.FIRST_LINE_END;\n\n        GridBagConstraints editConstraints = new GridBagConstraints();\n        editConstraints.anchor = GridBagConstraints.FIRST_LINE_START;\n        editConstraints.weightx = 1.0;\n        editConstraints.fill = GridBagConstraints.HORIZONTAL;\n\n        addToPanel(mainPanel, labelConstraints, 0, 1, new JLabel(&quot;FileName: &quot;, JLabel.RIGHT));\n        addToPanel(mainPanel, editConstraints, 1, 1, filename = new JTextField(20));\n        JButton browseButton = new JButton(&quot;Browse...&quot;);\n        addToPanel(mainPanel, labelConstraints, 2, 1, browseButton);\n        GuiBuilderHelper.strechItemToComponent(filename, browseButton);\n        browseButton.addActionListener(new BrowseAction(filename));\n\n        addToPanel(mainPanel, labelConstraints, 0, 2, new JLabel(&quot;Headers: &quot;, JLabel.RIGHT));\n        addToPanel(mainPanel, editConstraints, 1, 2, headers = new JTextField(20));\n\n        editConstraints.insets = new Insets(2, 0, 0, 0);\n        labelConstraints.insets = new Insets(2, 0, 0, 0);\n        addToPanel(mainPanel, labelConstraints, 0, 3, new JLabel(&quot;ColumnVariables: &quot;, JLabel.RIGHT));\n        addToPanel(mainPanel, editConstraints, 1, 3, columnVariables = new JTextField(20));\n\n        addToPanel(mainPanel, labelConstraints, 0, 4, new JLabel(&quot;AppendRecord?: &quot;, JLabel.RIGHT));\n        addToPanel(mainPanel, editConstraints, 1, 4, appendRecord = new JCheckBox());\n\n        JPanel container = new JPanel(new BorderLayout());\n        container.add(mainPanel, BorderLayout.NORTH);\n        add(container, BorderLayout.CENTER);\n    }\n\n    private void addToPanel(JPanel panel, GridBagConstraints constraints, int col, int row, JComponent component) {\n        constraints.gridx = col;\n        constraints.gridy = row;\n        panel.add(component, constraints);\n    }\n\n    private void initDefaultFields() {\n        filename.setText(&quot;email.token.csv&quot;);\n        headers.setText(&quot;Email,Token&quot;);\n        columnVariables.setText(&quot;email,token&quot;);\n        appendRecord.setSelected(true);\n    }\n}</code></pre><p><br /></p><h3 id=\"7f88e463\">实现PostProcessor，处理读取数据、写入CSV文件逻辑：</h3><p><br /></p><pre data-lang=\"java\"><code>public class CsvWriterPostProcessor extends AbstractTestElement\n        implements PostProcessor {\n    private static final Logger log = LoggingManager.getLoggerForClass();\n    private static final String FILENAME = &quot;CsvWriterPostProcessor.FileName&quot;;\n    private static final String HEADERS = &quot;CsvWriterPostProcessor.Headers&quot;;\n    private static final String COLUMN_VARIABLES = &quot;CsvWriterPostProcessor.ColumnVariables&quot;;\n    private static final String APPEND_RECORD = &quot;CsvWriterPostProcessor.AppendRecord&quot;;\n    private static final String DEFAULT_CHARSET = &quot;UTF-8&quot;;\n    private static final char DEFAULT_CSV_SPLIT = ',';\n    private static final String DEFAULT_CSV_COLUMN_VALUE = &quot;-&quot;;\n\n\n    @Override\n    public void process() {\n        this.doCsvWriter(this.getFileName(), this.getCsvHeaders(), this.getCsvColumns());\n    }\n\n    private String[] getCsvHeaders() {\n        String headers = this.getHeaders();\n        if (null == headers || headers.length() == 0) {\n            return new String[0];\n        }\n        return headers.split(&quot;,&quot;);\n    }\n\n    private List&lt;String[]&gt; getCsvColumns() {\n        List&lt;String[]&gt; csvColumns = new ArrayList&lt;&gt;();\n\n        Integer maxMatchNr = -1;\n        String columnVariableString = this.getColumnVariables();\n        String[] columnVariables = (null != columnVariableString &amp;&amp; columnVariableString.trim().length() != 0) ? columnVariableString.split(&quot;,&quot;) : new String[0];\n        for (int i = 0; i &lt; columnVariables.length; i++) {\n            int _matchNr = this.getVariableAsInt(columnVariables[i] + &quot;_matchNr&quot;, -1);\n            if (_matchNr &gt; maxMatchNr) {\n                maxMatchNr = _matchNr;\n            }\n        }\n        String[] firstColumns = new String[columnVariables.length];\n        for (int i = 0; i &lt; columnVariables.length; i++) {\n            // get columnVariables\n            firstColumns[i] = this.getVariableAsString(columnVariables[i], DEFAULT_CSV_COLUMN_VALUE);\n        }\n        if (!this.isEmptyColumns(firstColumns)) {\n            csvColumns.add(firstColumns);\n        }\n\n        for (int i = 0; i &lt; maxMatchNr; i++) {\n            String[] bodyColumns = new String[columnVariables.length];\n            for (int j = 0; j &lt; columnVariables.length; j++) {\n                // get columnVariables_matchNr\n                bodyColumns[j] = this.getVariableAsString((columnVariables[j] + (&quot;_&quot; + (i + 1))), DEFAULT_CSV_COLUMN_VALUE);\n            }\n            if (!this.isEmptyColumns(bodyColumns)) {\n                csvColumns.add(bodyColumns);\n            }\n        }\n        return csvColumns;\n    }\n\n\n    private void doCsvWriter(String path, String[] csvHeader, List&lt;String[]&gt; csvColumns) {\n        log.info(&quot;#0104 doCsvWriter path = &quot; + path);\n\n        if (null == csvColumns || csvColumns.size() == 0) {\n            log.info(&quot;#0104 doCsvWriter error, csvColumns.size() == 0&quot;);\n            return;\n        }\n\n        boolean isAppendRecord = this.isAppendRecord();\n        if (isAppendRecord &amp;&amp; csvHeader != null &amp;&amp; csvHeader.length &gt; 0) {\n            CsvReader csvReader = null;\n            try {\n                csvReader = new CsvReader(path, DEFAULT_CSV_SPLIT, Charset.forName(DEFAULT_CHARSET));\n                csvReader.readHeaders();\n\n                String[] readerHeaders = csvReader.getHeaders();\n                if (readerHeaders.length != csvHeader.length) {\n                    isAppendRecord = false;\n                }\n\n                for (int i = 0; i &lt; readerHeaders.length; i++) {\n                    if (!readerHeaders[i].equals(csvHeader[i])) {\n                        isAppendRecord = false;\n                        break;\n                    }\n                }\n                if (readerHeaders.length &gt; 0 &amp;&amp; isAppendRecord) {\n                    csvHeader = null;\n                }\n            } catch (FileNotFoundException e) {\n                // ignore\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                if (null != csvReader) {\n                    csvReader.close();\n                }\n            }\n        }\n\n        CsvWriter csvWriter = null;\n        BufferedWriter bufferedWriter = null;\n        try {\n            bufferedWriter = new BufferedWriter(//\n                    new OutputStreamWriter(//\n                            new FileOutputStream(path, isAppendRecord), DEFAULT_CHARSET), 1024);\n            csvWriter = new CsvWriter(bufferedWriter, DEFAULT_CSV_SPLIT);\n\n            if (null != csvHeader &amp;&amp; csvHeader.length &gt; 0) {\n                csvWriter.writeRecord(csvHeader);\n                log.info(&quot;#0104 doCsvWriter writeRecord csvHeader = &quot; + this.printArray(csvHeader));\n            }\n            for (String[] csvColumn : csvColumns) {\n                csvWriter.writeRecord(csvColumn);\n                log.info(&quot;#0104 doCsvWriter writeRecord csvColumn = &quot; + this.printArray(csvColumn));\n            }\n            log.info(&quot;#0104 doCsvWriter success, csvColumns.size() == &quot; + csvColumns.size());\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (null != csvWriter) {\n                csvWriter.flush();\n                csvWriter.close();\n            }\n            if (null != bufferedWriter) {\n                try {\n                    bufferedWriter.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private boolean isEmptyColumns(String[] array) {\n        if (null != array &amp;&amp; array.length &gt; 0) {\n            int emptyCount = 0;\n            for (int i = 0; i &lt; array.length; i++) {\n                if (null == array[i] || array[i].trim().length() == 0 || DEFAULT_CSV_COLUMN_VALUE.equals(array[i])) {\n                    emptyCount++;\n                }\n            }\n            return emptyCount == array.length;\n        }\n        return true;\n    }\n\n    private String printArray(String[] array) {\n        if (null != array &amp;&amp; array.length &gt; 0) {\n            StringBuilder stringBuilder = new StringBuilder(&quot;[&quot;);\n            for (String item : array) {\n                stringBuilder.append(item).append(&quot;,&quot;);\n            }\n            if (stringBuilder.length() &gt; 1) {\n                stringBuilder.deleteCharAt(stringBuilder.length() - 1);\n            }\n            stringBuilder.append(&quot;]&quot;);\n            return stringBuilder.toString();\n        }\n        return &quot;[]&quot;;\n    }\n\n    public JMeterVariables getVars() {\n        return this.getThreadContext().getVariables();\n    }\n\n    private String getVariableAsString(String key, String defaultVal) {\n        Object value = this.getVars().getObject(key);\n        if (null == value || (value instanceof String &amp;&amp; ((String) value).trim().length() == 0)) {\n            return defaultVal;\n        }\n        return String.valueOf(value);\n    }\n\n    private int getVariableAsInt(String key, int defaultVal) {\n        Object value = this.getVars().getObject(key);\n        if (null == value) {\n            return defaultVal;\n        }\n        return Integer.parseInt(String.valueOf(value));\n    }\n\n    public void setFileName(String fileName) {\n        this.setProperty(FILENAME, fileName);\n    }\n\n    public String getFileName() {\n        return this.getPropertyAsString(FILENAME);\n    }\n\n    public void setHeaders(String headers) {\n        this.setProperty(HEADERS, headers);\n    }\n\n    public String getHeaders() {\n        return this.getPropertyAsString(HEADERS, DEFAULT_CSV_COLUMN_VALUE);\n    }\n\n    public void setColumnVariables(String columns) {\n        this.setProperty(COLUMN_VARIABLES, columns);\n    }\n\n    public String getColumnVariables() {\n        return this.getPropertyAsString(COLUMN_VARIABLES);\n    }\n\n    public void setAppendRecord(boolean appendRecord) {\n        this.setProperty(APPEND_RECORD, appendRecord);\n    }\n\n    public boolean isAppendRecord() {\n        return this.getPropertyAsBoolean(APPEND_RECORD, true);\n    }\n}</code></pre><p><br /></p><h3 id=\"d7985f23\">打包并测试</h3><p><br /></p><p>打包完成后，将jar放入<code>JMETER_HOME/lib/ext</code>目录中。</p><p><br /></p><ul><li>添加取样器，请求相关接口，接口返回数据格式如下：</li></ul><p><br /></p><pre data-lang=\"json\"><code>{\n\t&quot;result&quot;: {\n\t\t&quot;_count&quot;: 100,\n\t\t&quot;_total&quot;: 105,\n\t\t&quot;_page&quot;: 1,\n\t\t&quot;engineers&quot;: [{\n\t\t\t&quot;user&quot;: {\n\t\t\t\t&quot;email&quot;: &quot;xxxxx@test.com&quot;,\n\t\t\t\t&quot;id&quot;: 6008,\n\t\t\t\t&quot;status&quot;: 1\n\t\t\t}\n\t\t},....]\n\t},\n\t&quot;status&quot;: 0\n}</code></pre><p><br /></p><ul><li>添加两个正则表达式提取器，将所有的Email、UserID取出。</li></ul><p><br /></p><pre data-lang=\"javascript\"><code>// email = {&quot;email&quot;:&quot;(.*?)&quot;,\n// userId = &quot;id&quot;:(.*?),</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004414941-268e20b3-35bb-4709-959b-5352ecbfe453.png#align=left&amp;display=inline&amp;height=111&amp;linkTarget=_blank&amp;originHeight=158&amp;originWidth=1066&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004414964-d4e26104-4d6b-4744-871b-2802ffcea4b9.png#align=left&amp;display=inline&amp;height=115&amp;linkTarget=_blank&amp;originHeight=165&amp;originWidth=1075&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><ul><li>添加编写好的后置处理器（CsvWriterPostProcessor），将提取器取出的值写入CSV文件中。</li></ul><ul><li>最终的结果如下</li></ul><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004414992-723f0c8d-3221-494a-9398-ef97dc804b52.png#align=left&amp;display=inline&amp;height=420&amp;linkTarget=_blank&amp;originHeight=864&amp;originWidth=1536&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004415009-b888f600-6af6-4d8e-86cc-ae7cc9878937.png#align=left&amp;display=inline&amp;height=358&amp;linkTarget=_blank&amp;originHeight=735&amp;originWidth=1533&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><ul><li>源代码地址：<a href=\"https://github.com/wuwz/jmeter-plugins/tree/master/plugins/csvwriter\" target=\"_blank\">https://github.com/wuwz/jmeter-plugins/tree/master/plugins/csvwriter</a></li></ul><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:00:27.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:59:02.000Z",
    "updated_at": "2019-02-01T07:00:27.000Z",
    "published_at": "2019-02-01T07:00:27.000Z",
    "first_published_at": "2019-02-01T07:00:27.000Z",
    "word_count": 1920,
    "cover": "",
    "description": "date: 2019-01-04 12:46:43tags: [&quot;JMeter&quot;]虽然JMeter自带的插件基本能满足大多数场景，但有时候也需要自定义一些插件来实现。网上的JMeter的插件开发文档稀少，通过本人的一些尝试，总结了一些JMeter插件开发相关的经验。JMet...",
    "custom_description": "虽然JMeter自带的插件基本能满足大多数场景，但有时候也需要自定义一些插件来实现。网上的JMeter的插件开发文档稀少，通过本人的一些尝试，总结了一些JMeter插件开发相关的经验。",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224287,
    "slug": "java11-example",
    "title": "Java11 部分新特性一览",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-09-30 15:20:08<br />tags: [\"Java\"]\n---\n9月26日，Java 11（LTS 长期支持版）如期而至，虽然短期很难投入生产使用（毕竟现在还在用jdk7呢，哈哈哈哈）但是还是非常有必要了解一下相关的特性的。\n\n## jshell\n\n使用jshell可以像python交互模式那样直接运行代码<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004323075-bd57e02e-90f3-485f-85a4-7fb6f118975e.png#align=left&display=inline&height=570&linkTarget=_blank&originHeight=578&originWidth=756&size=0&width=746)\n## 编译 && 运行\n\n简化了javac & java命令\n\n```bash\njavac Test.java\njava Test\n\n## jdk 11\njava Test.java\n```\n\n## 局部类型推断\n\n```bash\nvar msg = \"Hello Java11\";\nSystem.out.println(msg instanceof String); // true\n\n\nvar list = new ArrayList<String>();\nSystem.out.println(list instanceof List); // true\n```\n\nvar关键字的相关限制：\n\n* 使用var声明变量时必须有初始值\n* var 声明的必须一个显式的目标类型，比如不可以用在lamdba变量或数组变量上\n* var不能声明不可表示的类型，包括：null类型，交叉类型以及匿名类类型\n\n> 交叉类型详解：[https://www.w3cschool.cn/java/java-intersection-type.html](https://www.w3cschool.cn/java/java-intersection-type.html)\n\n\n## String API\n\n* Stream lines();\n\n一次性将字符串按照换行符分割并返回所有行的流\n\n```java\nvar content = \"hello\\nworld\\njava11\";\ncontent.lines().collect(Collectors.toList()).forEach(System.out::println);\n/**\n * hello\n * world\n * java11\n */\n```\n\n* String repeat(int count);\n\n将字符串重复N次，如：重要的话说3遍！\n\n```java\nvar message = \"重要的话说3遍！\";\nSystem.out.println(message.repeat(3));\n// 重要的话说3遍！重要的话说3遍！重要的话说3遍！\n```\n\n* boolean isBlank(); 判断字符串是否为空\n* String strip(); 删除字符串头尾的所有空白符\n* String stripLeading(); 删除字符串头部的所有空白符\n* String stripTrailing(); 删除字符串尾部的所有空白符\n\n## Collection API\n\n集合（List/ Set/ Map）都添加了 of 和 copyOf 方法，它们两个都用来创建不可变的集合\n\n```java\nvar list = List.of(\"Hello\", \"World\", \"Java11\");\nvar copy = List.copyOf(list);\nSystem.out.println(list == copy);  // true\n\nvar list1 = new ArrayList<String>();\nvar copy1 = List.copyOf(list);\nSystem.out.println(list1 == copy1);  // false\n```\n\n有一点需要注意的是，使用 of 和 copyOf 创建的集合为不可变集合，不能进行添加、删除、替换、排序等操作！\n\n## Stream API\n\n* 增加ofNullable, 可以传入null了。\n\n```java\nStream.ofNullable(null).count(); // 0\n```\n\n* 增加 takeWhile 和 dropWhile 方法\n\n```java\n// 从开始计算，当 n < 3 时就截止。\nStream.of(1, 2, 3, 2, 1).takeWhile(n -> n < 3).collect(Collectors.toList()).forEach(System.out::println);  // [1, 2]\n// 一旦 n < 3 不成立就开始计算\nStream.of(1, 2, 3, 2, 1).dropWhile(n -> n < 3).collect(Collectors.toList()).forEach(System.out::println);  // [3, 2, 1]\n```\n\n## Optional API\n\n```java\nOptional.of(\"Java11\").orElseThrow();     // java11\nOptional.of(\"Java11\").stream().count();  // 1\nOptional.ofNullable(null).or(() -> Optional.of(\"Java11\")).get();   // java11\n```\n\n## InputStream API\n\n使用long transferTo(OutputStream out)方法可以直接将数据传输到OutputStream；\n\n## HTTP Client API\n\n有这玩意儿后，可以扔掉难用的Apache HttpClient了。\n\n```java\nvar request = HttpRequest.newBuilder()\n        .uri(URI.create(\"http://baidu.com\"))\n        .GET()\n        .build();\nvar client = HttpClient.newHttpClient();\n\n// 同步\nHttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\nSystem.out.println(response.body());\n\n// 异步\nclient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n        .thenApply(HttpResponse::body)\n        .thenAccept(System.out::println);\n```\n\n最后说一句：IntelliJ IDEA：2018.2.x已全面支持JDK11。\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-09-30 15:20:08</p><p>tags: [&quot;Java&quot;]</p><hr /><p>9月26日，Java 11（LTS 长期支持版）如期而至，虽然短期很难投入生产使用（毕竟现在还在用jdk7呢，哈哈哈哈）但是还是非常有必要了解一下相关的特性的。</p><p><br /></p><h2 id=\"jshell\">jshell</h2><p><br /></p><p>使用jshell可以像python交互模式那样直接运行代码<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004323075-bd57e02e-90f3-485f-85a4-7fb6f118975e.png#align=left&amp;display=inline&amp;height=570&amp;linkTarget=_blank&amp;originHeight=578&amp;originWidth=756&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><h2 id=\"d1b63f34\">编译 &amp;&amp; 运行</h2><p><br /></p><p>简化了javac &amp; java命令</p><p><br /></p><pre data-lang=\"bash\"><code>javac Test.java\njava Test\n\n## jdk 11\njava Test.java</code></pre><p><br /></p><h2 id=\"08368926\">局部类型推断</h2><p><br /></p><pre data-lang=\"bash\"><code>var msg = &quot;Hello Java11&quot;;\nSystem.out.println(msg instanceof String); // true\n\n\nvar list = new ArrayList&lt;String&gt;();\nSystem.out.println(list instanceof List); // true</code></pre><p><br /></p><p>var关键字的相关限制：</p><p><br /></p><ul><li>使用var声明变量时必须有初始值</li></ul><ul><li>var 声明的必须一个显式的目标类型，比如不可以用在lamdba变量或数组变量上</li></ul><ul><li>var不能声明不可表示的类型，包括：null类型，交叉类型以及匿名类类型</li></ul><p><br /></p><blockquote><p>交叉类型详解：<a href=\"https://www.w3cschool.cn/java/java-intersection-type.html\" target=\"_blank\">https://www.w3cschool.cn/java/java-intersection-type.html</a></p></blockquote><p><br /></p><h2 id=\"b8b7b9e4\">String API</h2><p><br /></p><ul><li>Stream lines();</li></ul><p><br /></p><p>一次性将字符串按照换行符分割并返回所有行的流</p><p><br /></p><pre data-lang=\"java\"><code>var content = &quot;hello\\nworld\\njava11&quot;;\ncontent.lines().collect(Collectors.toList()).forEach(System.out::println);\n/**\n * hello\n * world\n * java11\n */</code></pre><p><br /></p><ul><li>String repeat(int count);</li></ul><p><br /></p><p>将字符串重复N次，如：重要的话说3遍！</p><p><br /></p><pre data-lang=\"java\"><code>var message = &quot;重要的话说3遍！&quot;;\nSystem.out.println(message.repeat(3));\n// 重要的话说3遍！重要的话说3遍！重要的话说3遍！</code></pre><p><br /></p><ul><li>boolean isBlank(); 判断字符串是否为空</li></ul><ul><li>String strip(); 删除字符串头尾的所有空白符</li></ul><ul><li>String stripLeading(); 删除字符串头部的所有空白符</li></ul><ul><li>String stripTrailing(); 删除字符串尾部的所有空白符</li></ul><p><br /></p><h2 id=\"a6009e70\">Collection API</h2><p><br /></p><p>集合（List/ Set/ Map）都添加了 of 和 copyOf 方法，它们两个都用来创建不可变的集合</p><p><br /></p><pre data-lang=\"java\"><code>var list = List.of(&quot;Hello&quot;, &quot;World&quot;, &quot;Java11&quot;);\nvar copy = List.copyOf(list);\nSystem.out.println(list == copy);  // true\n\nvar list1 = new ArrayList&lt;String&gt;();\nvar copy1 = List.copyOf(list);\nSystem.out.println(list1 == copy1);  // false</code></pre><p><br /></p><p>有一点需要注意的是，使用 of 和 copyOf 创建的集合为不可变集合，不能进行添加、删除、替换、排序等操作！</p><p><br /></p><h2 id=\"ad8f5385\">Stream API</h2><p><br /></p><ul><li>增加ofNullable, 可以传入null了。</li></ul><p><br /></p><pre data-lang=\"java\"><code>Stream.ofNullable(null).count(); // 0</code></pre><p><br /></p><ul><li>增加 takeWhile 和 dropWhile 方法</li></ul><p><br /></p><pre data-lang=\"java\"><code>// 从开始计算，当 n &lt; 3 时就截止。\nStream.of(1, 2, 3, 2, 1).takeWhile(n -&gt; n &lt; 3).collect(Collectors.toList()).forEach(System.out::println);  // [1, 2]\n// 一旦 n &lt; 3 不成立就开始计算\nStream.of(1, 2, 3, 2, 1).dropWhile(n -&gt; n &lt; 3).collect(Collectors.toList()).forEach(System.out::println);  // [3, 2, 1]</code></pre><p><br /></p><h2 id=\"6a9187ca\">Optional API</h2><p><br /></p><pre data-lang=\"java\"><code>Optional.of(&quot;Java11&quot;).orElseThrow();     // java11\nOptional.of(&quot;Java11&quot;).stream().count();  // 1\nOptional.ofNullable(null).or(() -&gt; Optional.of(&quot;Java11&quot;)).get();   // java11</code></pre><p><br /></p><h2 id=\"a2352b62\">InputStream API</h2><p><br /></p><p>使用long transferTo(OutputStream out)方法可以直接将数据传输到OutputStream；</p><p><br /></p><h2 id=\"9d4a931b\">HTTP Client API</h2><p><br /></p><p>有这玩意儿后，可以扔掉难用的Apache HttpClient了。</p><p><br /></p><pre data-lang=\"java\"><code>var request = HttpRequest.newBuilder()\n        .uri(URI.create(&quot;http://baidu.com&quot;))\n        .GET()\n        .build();\nvar client = HttpClient.newHttpClient();\n\n// 同步\nHttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());\nSystem.out.println(response.body());\n\n// 异步\nclient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n        .thenApply(HttpResponse::body)\n        .thenAccept(System.out::println);</code></pre><p><br /></p><p>最后说一句：IntelliJ IDEA：2018.2.x已全面支持JDK11。</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:58:50.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:57:45.000Z",
    "updated_at": "2019-02-01T06:58:50.000Z",
    "published_at": "2019-02-01T06:58:50.000Z",
    "first_published_at": "2019-02-01T06:58:50.000Z",
    "word_count": 760,
    "cover": "",
    "description": "date: 2018-09-30 15:20:08tags: [&quot;Java&quot;]9月26日，Java 11（LTS 长期支持版）如期而至，虽然短期很难投入生产使用（毕竟现在还在用jdk7呢，哈哈哈哈）但是还是非常有必要了解一下相关的特性的。jshell使用jshell可以像p...",
    "custom_description": "9月26日，Java 11（LTS 长期支持版）如期而至，虽然短期很难投入生产使用（毕竟现在还在用jdk7呢，哈哈哈哈）但是还是非常有必要了解一下相关的特性的。",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224281,
    "slug": "java8-stream-example",
    "title": "Java8 Stream Api使用详解",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-08-07 15:02:19<br />tags: [\"Java\",\"Stream\"]\n---\njdk8发布至今已有几年有余，是一个影响深远且具有革命意义的版本，目前jdk版本已直奔v11.0, 发展之迅速让人始料未及。本文在假设已有 `java8 lambda` 语法的基础下，通过几个示例，快速上手Stream 流处理相关的 API 使用。\n## 什么是流操作\n\n流操作就是一条流水线，将元素放在流水线上一个个地进行处理: \n```java\nList<User> list = Lists.newArrayList(user1,user2);\nList<String> resultList =\n    list.\n    // 将集合转换成流对象\n    stream()\n    // 将List<User>遍历，将每个元素的name取出，组装成新的List<String>\n    .map(User::getName)\n    // 按照默认规则排序\n    .sorted()\n    // 只取20条数据\n    .limit(20)\n    // 收集流数据，组装成最终需要集合(List<String>)\n    .collect(toList())\n```\n\n在以上的代码中，通过短短的几行代码，行云流水般的完成了一系列操作，这些操作在 jdk7 之前，是远远不能如此简单明了而高效的。\n\n## 常用 API 概述\n\n> 在开始熟悉相关 API 之前，先做一些必要的准备工作，初始化一些数据。\n\n\n```java\n@Data\npublic class User {\n    private String username;\n    private Integer age;\n}\n```\n\n```java\nList<User> list = new ArrayList<>();\nlist.add(new User(\"tom\", 20));\nlist.add(new User(\"libai\", 19));\nlist.add(new User(\"luxun\", 55));\n```\n\n### stream()\n\n在开始操作之前，需要将一个普通的集合转换成流对象（Stream）<br />\n创建的方式很多，这里目前来说使用最直接也是常见的方式：\n\n```java\nlist.stream();\n```\n\n### filter(T -> boolean)\n\n顾名思义，通过该函数将数据源筛选并保留lambda表达式中为 true的值。\n\n```java\nStream<?> stream = list.stream()\n    .filter(user -> user.getAge() == 20)\n```\n\n### sorted() / sorted((T, T) -> int)\n\n如果流中的元素的类实现了 Comparable 接口，即有自己的排序规则，那么可以直接调用 sorted() 方法对元素进行排序，反之, 则需要调用 sorted((T, T) -> int) 自己实现 Comparator 接口。\n\n```\nStream<?> stream = list.stream()\n       .sorted((u1, u2) -> u1.getAge() - u2.getAge())\n```\n\n以上形式的代码还可以继续简写，这属于lambda相关的知识：\n\n```java\nStream<?> stream = list.stream()   .sorted(Comparator.comparingInt(User::getAge))\n```\n\n### limit(long n)\n\n返回前 n 个元素\n\n```java\nStream<?> stream = list.stream().limit(20);\n```\n\n### skip(long n)\n\n跳过前 n 个元素\n\n```java\nStream<?> stream = list.stream().skip(20);\n```\n\n### map(T -> R)\n\n将流中的每一个元素 T 映射为 R（类似类型转换）\n\n```java\nStream<?> stream = list.stream().map(User::getName)\n```\n\n### anyMatch(T -> boolean)\n\n流中是否有一个元素匹配给定的 T -> boolean 条件\n\n### allMatch(T -> boolean)\n\n流中是否所有元素都匹配给定的 T -> boolean 条件\n\n### noneMatch(T -> boolean)\n\n流中是否没有元素匹配给定的 T -> boolean 条件\n\n### findAny() 和 findFirst()\n\nfindAny()：找到其中一个元素 （使用 stream() 时找到的是第一个元素；使用 parallelStream() 并行时找到的是其中一个元素）<br />\nfindFirst()：找到第一个元素<br />\n值得注意的是，这两个方法返回的是一个 Optional 对象，它是一个容器类，能代表一个值存在或不存在，这个后面会讲到\n\n### reduce((T, T) -> T) 和 reduce(T, (T, T) -> T)\n\n用于组合流中的元素，如求和，求积，求最大值等\n\n```java\n// 计算年龄总和：\nint sum = list.stream().map(User::getAge).reduce(0, (a, b) -&gt; a + b);\n// 与之相同:\nint sum = list.stream().map(User::getAge).reduce(0, Integer::sum);\n```\n\n### count()\n\n返回流中元素个数，结果为 long 类型\n\n### collect()\n\n收集方法，我们很常用的是 collect(toList())，当然还有 collect(toSet()) 等...\n\n### forEach()\n\n迭代器\n\nStream API 相当的强大，本文只是列举一些皮毛，起个抛砖引玉的效果。\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-08-07 15:02:19</p><p>tags: [&quot;Java&quot;,&quot;Stream&quot;]</p><hr /><p>jdk8发布至今已有几年有余，是一个影响深远且具有革命意义的版本，目前jdk版本已直奔v11.0, 发展之迅速让人始料未及。本文在假设已有 <code>java8 lambda</code> 语法的基础下，通过几个示例，快速上手Stream 流处理相关的 API 使用。</p><h2 id=\"e483ea73\">什么是流操作</h2><p><br /></p><p>流操作就是一条流水线，将元素放在流水线上一个个地进行处理: </p><pre data-lang=\"java\"><code>List&lt;User&gt; list = Lists.newArrayList(user1,user2);\nList&lt;String&gt; resultList =\n    list.\n    // 将集合转换成流对象\n    stream()\n    // 将List&lt;User&gt;遍历，将每个元素的name取出，组装成新的List&lt;String&gt;\n    .map(User::getName)\n    // 按照默认规则排序\n    .sorted()\n    // 只取20条数据\n    .limit(20)\n    // 收集流数据，组装成最终需要集合(List&lt;String&gt;)\n    .collect(toList())</code></pre><p><br /></p><p>在以上的代码中，通过短短的几行代码，行云流水般的完成了一系列操作，这些操作在 jdk7 之前，是远远不能如此简单明了而高效的。</p><p><br /></p><h2 id=\"24d4980d\">常用 API 概述</h2><p><br /></p><blockquote><p>在开始熟悉相关 API 之前，先做一些必要的准备工作，初始化一些数据。</p></blockquote><p><br /></p><pre data-lang=\"java\"><code>@Data\npublic class User {\n    private String username;\n    private Integer age;\n}</code></pre><p><br /></p><pre data-lang=\"java\"><code>List&lt;User&gt; list = new ArrayList&lt;&gt;();\nlist.add(new User(&quot;tom&quot;, 20));\nlist.add(new User(&quot;libai&quot;, 19));\nlist.add(new User(&quot;luxun&quot;, 55));</code></pre><p><br /></p><h3 id=\"8c4fce6d\">stream()</h3><p><br /></p><p>在开始操作之前，需要将一个普通的集合转换成流对象（Stream）<br />\n创建的方式很多，这里目前来说使用最直接也是常见的方式：</p><p><br /></p><pre data-lang=\"java\"><code>list.stream();</code></pre><p><br /></p><h3 id=\"8c86d779\">filter(T -&gt; boolean)</h3><p><br /></p><p>顾名思义，通过该函数将数据源筛选并保留lambda表达式中为 true的值。</p><p><br /></p><pre data-lang=\"java\"><code>Stream&lt;?&gt; stream = list.stream()\n    .filter(user -&gt; user.getAge() == 20)</code></pre><p><br /></p><h3 id=\"14f7c1bd\">sorted() / sorted((T, T) -&gt; int)</h3><p><br /></p><p>如果流中的元素的类实现了 Comparable 接口，即有自己的排序规则，那么可以直接调用 sorted() 方法对元素进行排序，反之, 则需要调用 sorted((T, T) -&gt; int) 自己实现 Comparator 接口。</p><p><br /></p><pre><code>Stream&lt;?&gt; stream = list.stream()\n       .sorted((u1, u2) -&gt; u1.getAge() - u2.getAge())</code></pre><p><br /></p><p>以上形式的代码还可以继续简写，这属于lambda相关的知识：</p><p><br /></p><pre data-lang=\"java\"><code>Stream&lt;?&gt; stream = list.stream()   .sorted(Comparator.comparingInt(User::getAge))</code></pre><p><br /></p><h3 id=\"94eee01e\">limit(long n)</h3><p><br /></p><p>返回前 n 个元素</p><p><br /></p><pre data-lang=\"java\"><code>Stream&lt;?&gt; stream = list.stream().limit(20);</code></pre><p><br /></p><h3 id=\"69672287\">skip(long n)</h3><p><br /></p><p>跳过前 n 个元素</p><p><br /></p><pre data-lang=\"java\"><code>Stream&lt;?&gt; stream = list.stream().skip(20);</code></pre><p><br /></p><h3 id=\"da13b489\">map(T -&gt; R)</h3><p><br /></p><p>将流中的每一个元素 T 映射为 R（类似类型转换）</p><p><br /></p><pre data-lang=\"java\"><code>Stream&lt;?&gt; stream = list.stream().map(User::getName)</code></pre><p><br /></p><h3 id=\"d5f8f182\">anyMatch(T -&gt; boolean)</h3><p><br /></p><p>流中是否有一个元素匹配给定的 T -&gt; boolean 条件</p><p><br /></p><h3 id=\"90368caf\">allMatch(T -&gt; boolean)</h3><p><br /></p><p>流中是否所有元素都匹配给定的 T -&gt; boolean 条件</p><p><br /></p><h3 id=\"08fc50d0\">noneMatch(T -&gt; boolean)</h3><p><br /></p><p>流中是否没有元素匹配给定的 T -&gt; boolean 条件</p><p><br /></p><h3 id=\"6823d519\">findAny() 和 findFirst()</h3><p><br /></p><p>findAny()：找到其中一个元素 （使用 stream() 时找到的是第一个元素；使用 parallelStream() 并行时找到的是其中一个元素）<br />\nfindFirst()：找到第一个元素<br />\n值得注意的是，这两个方法返回的是一个 Optional 对象，它是一个容器类，能代表一个值存在或不存在，这个后面会讲到</p><p><br /></p><h3 id=\"2b0e8189\">reduce((T, T) -&gt; T) 和 reduce(T, (T, T) -&gt; T)</h3><p><br /></p><p>用于组合流中的元素，如求和，求积，求最大值等</p><p><br /></p><pre data-lang=\"java\"><code>// 计算年龄总和：\nint sum = list.stream().map(User::getAge).reduce(0, (a, b) -&amp;gt; a + b);\n// 与之相同:\nint sum = list.stream().map(User::getAge).reduce(0, Integer::sum);</code></pre><p><br /></p><h3 id=\"0087aeab\">count()</h3><p><br /></p><p>返回流中元素个数，结果为 long 类型</p><p><br /></p><h3 id=\"e91318ef\">collect()</h3><p><br /></p><p>收集方法，我们很常用的是 collect(toList())，当然还有 collect(toSet()) 等...</p><p><br /></p><h3 id=\"046cf2b2\">forEach()</h3><p><br /></p><p>迭代器</p><p><br /></p><p>Stream API 相当的强大，本文只是列举一些皮毛，起个抛砖引玉的效果。</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:57:37.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:56:11.000Z",
    "updated_at": "2019-02-01T06:57:37.000Z",
    "published_at": "2019-02-01T06:57:37.000Z",
    "first_published_at": "2019-02-01T06:57:37.000Z",
    "word_count": 938,
    "cover": "",
    "description": "date: 2018-08-07 15:02:19tags: [&quot;Java&quot;,&quot;Stream&quot;]jdk8发布至今已有几年有余，是一个影响深远且具有革命意义的版本，目前jdk版本已直奔v11.0, 发展之迅速让人始料未及。本文在假设已有 java8 lam...",
    "custom_description": "jdk8发布至今已有几年有余，是一个影响深远且具有革命意义的版本，目前jdk版本已直奔v11.0, 发展之迅速让人始料未及。本文在假设已有 `java8 lambda` 语法的基础下，通过几个示例，快速上手Stream 流处理相关的 API 使用。",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224273,
    "slug": "java-optimization",
    "title": "关于Java代码的一些优化技巧",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-04-28 14:39:32<br />tags: [\"Java\",\"代码优化\"]\n---\n## 减少重复计算\n```java\nfor (int i = 0; i < list.size(); i++) {\n  // do something;\n}\nfor (int i = 0; int len = list.size(); i < len; i++) {\n  // do something;\n}\n// 不要觉得麻烦, 尽量减少变量的重复计算, 这在大量数据集合遍历时非常有效.\n```\n\n## 不要创建大量的对象引用\n```java\nfor (; ;) {\n  Object obj = new Object();\n}\n\nObject obj = null;\nfor (; ;) {\n  obj = new Object();\n}\n// 能省就省.\n```\n\n## 卫语句\n```java\nvoid fun(Date date) {\n  if (isWorkDay(date)) {\n    syso(date + \" is work day.\");\n  } else {\n    if (isWorkTime(date)) {\n      syso(date + \" is work time.\");\n    } else {\n      // do something;\n    }\n  }\n}\n\nvoid fun(Date date) {\n  if (isWorkDay(date)) {\n    syso(date + \" is work day.\");\n    return;\n  }\n  if (isWorkTime(date)) {\n    syso(date + \" is work time.\");\n    return;\n  }\n  // do something;\n}\n// 使用卫语句取代嵌套表达式, 使代码可读性更强且易维护\n```\n\n## 提取表达式\n```java\nvoid fun(String browser) {\n  if(\n    browser.toUpperCase().indexOf(\"SAFARI\") > -1 ||\n    brower.toUpperCase().indexOf(\"CHROME\") > -1 ||\n    brower.toUpperCase().indexOf(\"FIREFOX\") > -1 ||\n    brower.toUpperCase().indexOf(\"IE\") > -1){\n      //do something...\n  }\n}\n\nvoid fun(String browser) {\n  String buc = browser.toUpperCase();\n  boolean isSafari = buc.indexOf(\"SAFARI\") > -1;\n  boolean isChrome = buc.indexOf(\"CHROME\") > -1;\n  boolean isFireFox = buc.indexOf(\"FIREFOX\") > -1;\n  boolean isIe = buc.indexOf(\"IE\") > -1;\n\n  if(isSafair || isChrome || isFireFox || isIe){\n      //do something\n  }\n}\n// 任何时候, 可读性更重要.\n```\n\n## 资源的close()请分开操作\n```java\ntry {\n\tin.close();\n\tout.close();\n} catch(Exception e) {\n  //..\n}\n\ntry {\n\tin.close();\n} catch(Exception e) {\n  //..\n}\ntry {\n\tout.close();\n} catch(Exception e) {\n  //..\n}\n// 避免资源泄露\n```\n\n## 使用try - with - resources语法.\n```java\ntry (InputStream in = getIn();\n    OutputStream out = getOut()) {\n\n  // do something..\n} catch (Exception e) {\n  //..\n}\n// 任何AutoCloseable 和 Closeable的实现类都可以使用这种方式高效的关闭资源.\n```\n\n## 单例的最佳实践: 枚举\n```java\npublic class SingletonObj {\n    private SingletonObj()  {}\n    public static SingletonObj getInstance() {\n        return Singleton.INSTANCE.getInstance();\n    }\n\n    private static enum Singleton {\n        INSTANCE;\n        private SingletonObj singletonObj;\n        private Singleton() {\n            singletonObj = new SingletonObj();\n        }\n        public SingletonObj getInstance() {\n            return singletonObj;\n        }\n    }\n}\n\n// SingletonObj.getInstance(); 简洁高效且线程安全, 且支持序列化.\n```\n\n## Lazy load 策略\n```java\nString fun(int x) {\n  User user = userService.find();\n  if (x > 0) {\n    return user.getName();\n  }\n  return String.Empty;\n}\n\nString fun(int x) {\n  if (x > 0) {\n    User user = userService.find();\n    return user.getName();\n  }\n  return String.Empty;\n}\n// 总是在需要的时候, 才索取.\n```\n\n## 尽可能的使用缓存\n```java\nfinal int MAX_ENTRIES = 1000;\nfinal LoadingCache<String, String> mCache = CacheBuilder.newBuilder()\n  .maximumSize(MAX_ENTRIES).build(new CacheLoader<String,String>() {\n    @Override\n    public String load(String key) throws Exception {\n      return findByKey(key);\n    }\n  }\n);\n\nString output = mCache.getUnchecked(input);\n\n// 缓存的实现方式有很多, 这里列举了guava提供的简单实现.\n```\n\n## 尽可能的预估集合的大小\n```java\nMap<String, String> hashMap = null;\nMap<String, String> convert(List<Field> list) {\n  hashMap = new HashMap<>((int) Math.ceil(list.size() / 0.7));\n  for (Field f : list) {\n    hashMap.put(f.getTitle(), f);\n  }\n  return hashMap;\n}\n// 避免再次hash带来的不必要开销\n```\n\n## 预先编译正则表达式\n```java\nboolean valid(List<String> urls) {\n  Pattern p = Pattern.compile(_regex);\n  for (String url : urls) {\n    if (!p.matcher(url)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfinal static Pattern URL_PATTERN = Pattern.compile(_regex);\nboolean valid(List<String> urls) {\n  for (String url : urls) {\n    if (!URL_PATTERN.matcher(url)) {\n      return false;\n    }\n  }\n  return true;\n}\n```\n\n## 使用链式调用\n```java\npublic User {\n  private String name;\n  private String address;\n\n  //getter..\n  public User setName(String name) {\n    this.name = name;\n    return this;\n  }\n  //..\n}\n\nnew User().setName(\"xx\").setAddress(\"xxx\");\n```\n\n当然, 这只是冰山一角。\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-04-28 14:39:32</p><p>tags: [&quot;Java&quot;,&quot;代码优化&quot;]</p><hr /><h2 id=\"7ca02110\">减少重复计算</h2><pre data-lang=\"java\"><code>for (int i = 0; i &lt; list.size(); i++) {\n  // do something;\n}\nfor (int i = 0; int len = list.size(); i &lt; len; i++) {\n  // do something;\n}\n// 不要觉得麻烦, 尽量减少变量的重复计算, 这在大量数据集合遍历时非常有效.</code></pre><p><br /></p><h2 id=\"12a385e2\">不要创建大量的对象引用</h2><pre data-lang=\"java\"><code>for (; ;) {\n  Object obj = new Object();\n}\n\nObject obj = null;\nfor (; ;) {\n  obj = new Object();\n}\n// 能省就省.</code></pre><p><br /></p><h2 id=\"1e83c022\">卫语句</h2><pre data-lang=\"java\"><code>void fun(Date date) {\n  if (isWorkDay(date)) {\n    syso(date + &quot; is work day.&quot;);\n  } else {\n    if (isWorkTime(date)) {\n      syso(date + &quot; is work time.&quot;);\n    } else {\n      // do something;\n    }\n  }\n}\n\nvoid fun(Date date) {\n  if (isWorkDay(date)) {\n    syso(date + &quot; is work day.&quot;);\n    return;\n  }\n  if (isWorkTime(date)) {\n    syso(date + &quot; is work time.&quot;);\n    return;\n  }\n  // do something;\n}\n// 使用卫语句取代嵌套表达式, 使代码可读性更强且易维护</code></pre><p><br /></p><h2 id=\"5ebecbf5\">提取表达式</h2><pre data-lang=\"java\"><code>void fun(String browser) {\n  if(\n    browser.toUpperCase().indexOf(&quot;SAFARI&quot;) &gt; -1 ||\n    brower.toUpperCase().indexOf(&quot;CHROME&quot;) &gt; -1 ||\n    brower.toUpperCase().indexOf(&quot;FIREFOX&quot;) &gt; -1 ||\n    brower.toUpperCase().indexOf(&quot;IE&quot;) &gt; -1){\n      //do something...\n  }\n}\n\nvoid fun(String browser) {\n  String buc = browser.toUpperCase();\n  boolean isSafari = buc.indexOf(&quot;SAFARI&quot;) &gt; -1;\n  boolean isChrome = buc.indexOf(&quot;CHROME&quot;) &gt; -1;\n  boolean isFireFox = buc.indexOf(&quot;FIREFOX&quot;) &gt; -1;\n  boolean isIe = buc.indexOf(&quot;IE&quot;) &gt; -1;\n\n  if(isSafair || isChrome || isFireFox || isIe){\n      //do something\n  }\n}\n// 任何时候, 可读性更重要.</code></pre><p><br /></p><h2 id=\"7d96b791\">资源的close()请分开操作</h2><pre data-lang=\"java\"><code>try {\n\tin.close();\n\tout.close();\n} catch(Exception e) {\n  //..\n}\n\ntry {\n\tin.close();\n} catch(Exception e) {\n  //..\n}\ntry {\n\tout.close();\n} catch(Exception e) {\n  //..\n}\n// 避免资源泄露</code></pre><p><br /></p><h2 id=\"8ff24d15\">使用try - with - resources语法.</h2><pre data-lang=\"java\"><code>try (InputStream in = getIn();\n    OutputStream out = getOut()) {\n\n  // do something..\n} catch (Exception e) {\n  //..\n}\n// 任何AutoCloseable 和 Closeable的实现类都可以使用这种方式高效的关闭资源.</code></pre><p><br /></p><h2 id=\"4271ecc6\">单例的最佳实践: 枚举</h2><pre data-lang=\"java\"><code>public class SingletonObj {\n    private SingletonObj()  {}\n    public static SingletonObj getInstance() {\n        return Singleton.INSTANCE.getInstance();\n    }\n\n    private static enum Singleton {\n        INSTANCE;\n        private SingletonObj singletonObj;\n        private Singleton() {\n            singletonObj = new SingletonObj();\n        }\n        public SingletonObj getInstance() {\n            return singletonObj;\n        }\n    }\n}\n\n// SingletonObj.getInstance(); 简洁高效且线程安全, 且支持序列化.</code></pre><p><br /></p><h2 id=\"0241a16d\">Lazy load 策略</h2><pre data-lang=\"java\"><code>String fun(int x) {\n  User user = userService.find();\n  if (x &gt; 0) {\n    return user.getName();\n  }\n  return String.Empty;\n}\n\nString fun(int x) {\n  if (x &gt; 0) {\n    User user = userService.find();\n    return user.getName();\n  }\n  return String.Empty;\n}\n// 总是在需要的时候, 才索取.</code></pre><p><br /></p><h2 id=\"3a5e418c\">尽可能的使用缓存</h2><pre data-lang=\"java\"><code>final int MAX_ENTRIES = 1000;\nfinal LoadingCache&lt;String, String&gt; mCache = CacheBuilder.newBuilder()\n  .maximumSize(MAX_ENTRIES).build(new CacheLoader&lt;String,String&gt;() {\n    @Override\n    public String load(String key) throws Exception {\n      return findByKey(key);\n    }\n  }\n);\n\nString output = mCache.getUnchecked(input);\n\n// 缓存的实现方式有很多, 这里列举了guava提供的简单实现.</code></pre><p><br /></p><h2 id=\"36d4ecdf\">尽可能的预估集合的大小</h2><pre data-lang=\"java\"><code>Map&lt;String, String&gt; hashMap = null;\nMap&lt;String, String&gt; convert(List&lt;Field&gt; list) {\n  hashMap = new HashMap&lt;&gt;((int) Math.ceil(list.size() / 0.7));\n  for (Field f : list) {\n    hashMap.put(f.getTitle(), f);\n  }\n  return hashMap;\n}\n// 避免再次hash带来的不必要开销</code></pre><p><br /></p><h2 id=\"fbf7017b\">预先编译正则表达式</h2><pre data-lang=\"java\"><code>boolean valid(List&lt;String&gt; urls) {\n  Pattern p = Pattern.compile(_regex);\n  for (String url : urls) {\n    if (!p.matcher(url)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfinal static Pattern URL_PATTERN = Pattern.compile(_regex);\nboolean valid(List&lt;String&gt; urls) {\n  for (String url : urls) {\n    if (!URL_PATTERN.matcher(url)) {\n      return false;\n    }\n  }\n  return true;\n}</code></pre><p><br /></p><h2 id=\"d4782385\">使用链式调用</h2><pre data-lang=\"java\"><code>public User {\n  private String name;\n  private String address;\n\n  //getter..\n  public User setName(String name) {\n    this.name = name;\n    return this;\n  }\n  //..\n}\n\nnew User().setName(&quot;xx&quot;).setAddress(&quot;xxx&quot;);</code></pre><p><br /></p><p>当然, 这只是冰山一角。</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:55:52.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:54:13.000Z",
    "updated_at": "2019-02-01T06:55:52.000Z",
    "published_at": "2019-02-01T06:55:52.000Z",
    "first_published_at": "2019-02-01T06:55:52.000Z",
    "word_count": 751,
    "cover": "",
    "description": "date: 2018-04-28 14:39:32tags: [&quot;Java&quot;,&quot;代码优化&quot;]减少重复计算for (int i = 0; i &lt; list.size(); i++) {   // do something; } for (int i ...",
    "custom_description": "",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224266,
    "slug": "idea-remote-debugger",
    "title": "Intellij IDEA如何远程调试",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [\"IDEA\", \"Debugger\"]<br />date: 2018-12-30 10:57:57\n---\n\n一般情况下，对于分布式系统的调试还是比较麻烦的，比较常见的方式是在远程调用的过程中通过不断的打印log，然后重新部署上线、调试、定位问题，实在是过于麻烦。<br />\n实际上Java是支持远程调试的，只是大家平时没有怎么用过罢了，本文通过`Intellij IDEA`为例讲解如何来使用远程调试。\n\n## 准备测试程序\n```java\n@GetMapping(\"/list\")\npublic ResponseEntity<?> list() {\n    List<String> arrayList = new ArrayList<>();\n    for (int i = 0; i < 1000; i++) {\n        arrayList.add(String.format(\"arrayList_item_%s\", i));\n    }\n    return ResponseEntity.ok(arrayList);\n}\n```\n\n这个程序很简单，就是循环生成ArrayList对象罢了。\n\n## 使用特定的JVM参数启动程序\n\n将程序上传到服务器（`10.211.55.5`）上后，使用相关的JVM参数启动程序:\n```bash\n-Xdebug -Xrunjdwp:transport=dt_socket,address=${debugger_port},server=y,suspend=n\n```\n\n其中，`${debugger_port}`代表开启远程调试的端口，开启完毕后，要注意防火墙相关的配置\n```bash\njava -D -Xdebug -Xrunjdwp:transport=dt_socket,address=9012,server=y,suspend=n -jar springboot-test-0.0.1-SNAPSHOT.jar\n```\n\n启动成功后如图：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004005068-9dc506ce-a137-46f6-a1ff-44700c2c386a.png#align=left&display=inline&height=603&linkTarget=_blank&originHeight=1050&originWidth=1300&size=0&width=746)\n\n## 配置IDEA连接远程调试\n\n打开`Edit Configurations`，然后新建`Remote` 配置后如图：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004005076-16fa6fd9-5e0c-494b-bc8c-97eca11dd41d.png#align=left&display=inline&height=517&linkTarget=_blank&originHeight=1550&originWidth=2238&size=0&width=746)<br /><br /><br />然后启动之，如若控制台出现以下提示，则表示连接成功了：\n```bash\nConnected to the target VM, address: '10.211.55.5:9012', transport: 'socket'\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004005121-7de5e9d3-7135-4c35-bacd-762149e5f37c.png#align=left&display=inline&height=85&linkTarget=_blank&originHeight=206&originWidth=1798&size=0&width=746)\n\n## 开始调试\n\n后面的步骤就像是在本地一样了，该怎么调试就怎么调试：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549004005126-641fe9fa-6247-4a65-ad5f-39d604649807.png#align=left&display=inline&height=387&linkTarget=_blank&originHeight=1012&originWidth=1950&size=0&width=746)\n\n",
    "body_draft": "",
    "body_html": "<p>tags: [&quot;IDEA&quot;, &quot;Debugger&quot;]</p><p>date: 2018-12-30 10:57:57</p><hr /><p><br /></p><p>一般情况下，对于分布式系统的调试还是比较麻烦的，比较常见的方式是在远程调用的过程中通过不断的打印log，然后重新部署上线、调试、定位问题，实在是过于麻烦。<br />\n实际上Java是支持远程调试的，只是大家平时没有怎么用过罢了，本文通过<code>Intellij IDEA</code>为例讲解如何来使用远程调试。</p><p><br /></p><h2 id=\"3a4cb23a\">准备测试程序</h2><pre data-lang=\"java\"><code>@GetMapping(&quot;/list&quot;)\npublic ResponseEntity&lt;?&gt; list() {\n    List&lt;String&gt; arrayList = new ArrayList&lt;&gt;();\n    for (int i = 0; i &lt; 1000; i++) {\n        arrayList.add(String.format(&quot;arrayList_item_%s&quot;, i));\n    }\n    return ResponseEntity.ok(arrayList);\n}</code></pre><p><br /></p><p>这个程序很简单，就是循环生成ArrayList对象罢了。</p><p><br /></p><h2 id=\"af1db14c\">使用特定的JVM参数启动程序</h2><p><br /></p><p>将程序上传到服务器（<code>10.211.55.5</code>）上后，使用相关的JVM参数启动程序:</p><pre data-lang=\"bash\"><code>-Xdebug -Xrunjdwp:transport=dt_socket,address=${debugger_port},server=y,suspend=n</code></pre><p><br /></p><p>其中，<code>${debugger_port}</code>代表开启远程调试的端口，开启完毕后，要注意防火墙相关的配置</p><pre data-lang=\"bash\"><code>java -D -Xdebug -Xrunjdwp:transport=dt_socket,address=9012,server=y,suspend=n -jar springboot-test-0.0.1-SNAPSHOT.jar</code></pre><p><br /></p><p>启动成功后如图：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004005068-9dc506ce-a137-46f6-a1ff-44700c2c386a.png#align=left&amp;display=inline&amp;height=603&amp;linkTarget=_blank&amp;originHeight=1050&amp;originWidth=1300&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"db069d01\">配置IDEA连接远程调试</h2><p><br /></p><p>打开<code>Edit Configurations</code>，然后新建<code>Remote</code> 配置后如图：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004005076-16fa6fd9-5e0c-494b-bc8c-97eca11dd41d.png#align=left&amp;display=inline&amp;height=517&amp;linkTarget=_blank&amp;originHeight=1550&amp;originWidth=2238&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br /><br /></p><p>然后启动之，如若控制台出现以下提示，则表示连接成功了：</p><pre data-lang=\"bash\"><code>Connected to the target VM, address: '10.211.55.5:9012', transport: 'socket'</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004005121-7de5e9d3-7135-4c35-bacd-762149e5f37c.png#align=left&amp;display=inline&amp;height=85&amp;linkTarget=_blank&amp;originHeight=206&amp;originWidth=1798&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"10c56d54\">开始调试</h2><p><br /></p><p>后面的步骤就像是在本地一样了，该怎么调试就怎么调试：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549004005126-641fe9fa-6247-4a65-ad5f-39d604649807.png#align=left&amp;display=inline&amp;height=387&amp;linkTarget=_blank&amp;originHeight=1012&amp;originWidth=1950&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:54:07.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:52:29.000Z",
    "updated_at": "2019-02-01T06:54:07.000Z",
    "published_at": "2019-02-01T06:54:07.000Z",
    "first_published_at": "2019-02-01T06:54:07.000Z",
    "word_count": 385,
    "cover": "",
    "description": "tags: [&quot;IDEA&quot;, &quot;Debugger&quot;]date: 2018-12-30 10:57:57一般情况下，对于分布式系统的调试还是比较麻烦的，比较常见的方式是在远程调用的过程中通过不断的打印log，然后重新部署上线、调试、定位问题，实在是过于麻烦...",
    "custom_description": "一般情况下，对于分布式系统的调试还是比较麻烦的，比较常见的方式是在远程调用的过程中通过不断的打印log，然后重新部署上线、调试、定位问题，实在是过于麻烦...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224260,
    "slug": "hexo-best-practices",
    "title": "Netlify-Hexo持续部署最佳实践",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-12-21 13:48:09<br />tags: [\"Hexo\",\"Netlify\"]\n---\n\nHexo被称为是最佳的静态博客程序之一，然而其繁琐的环境搭建、构建，发布过程，让很多人望之却步，转而使用了传统的`WordPress`等博客程序，抛开维护成本不说，本着折腾一切的心态，最终研究出了一套完善的自动部署方案。\n\n## Hexo特色\n\n* **超快速度:** Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。\n* **支持 Markdown:** Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。\n* **一键部署:** 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。\n* **丰富的插件:** Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。\n\n> 目前市面上还存在很多类似的静态网站生成器，详情请查看：[https://www.staticgen.com/](https://www.staticgen.com/)\n\n\n## 如何实现优雅发布\n\n就目前而言，Hexo发布的方式有以下几种：\n\n* 原始方式，即在本地搭建相关环境，编写md文件后，手动`hexo g`生成静态文件，然后通过`hexo deploy`发布到`Github Pages`；\n* 利用Github + Webhook来实现自动发布（这个需要一台自己服务器）详见：[http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/](http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/)\n* 使用第三方的Hexo-Client、Hexo-Admin等程序，详见：[https://github.com/search?q=hexo-client](https://github.com/search?q=hexo-client)\n* 使用`Travis CI`持续部署Hexo，详见：[https://www.jianshu.com/p/5691815b81b6](https://www.jianshu.com/p/5691815b81b6)\n* 使用`Netlify`进行优雅地持续部署。详见：[https://www.netlify.com](https://www.netlify.com)\n\n## 简要流程\n\n1. 使用`Github`登陆`Netlify`。\n1. 使用`StaticGen`一键初始化Hexo仓库。\n1. 将Hexo源码仓库Clone到本地，调整网站配置，编写文章。\n1. 本地无需`Nodejs`、`NPM`、`Hexo`环境，修改完成后`Push到Github`，`Netlify`检测到仓库变更后实现`自动部署`。\n\n在`Netlify`整个部署过程中, 你只需要提交代码, 其余的master部署预览(包括MR的预览), HTTPS证书, 静态资源的优化与CDN加速, 部署消息通知, 等等都不用再操心. 真的是太优雅了!\n\n## 创建项目\n\n### 在StaticGen上选择Hexo\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874813-a59a1d5d-c4e0-4634-8123-6fffe6a3a6e7.png#align=left&display=inline&height=416&linkTarget=_blank&originHeight=774&originWidth=1388&size=0&width=746)\n\n### 使用Github登陆\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874854-54998794-a730-44ac-80af-bd29591ab372.png#align=left&display=inline&height=462&linkTarget=_blank&originHeight=860&originWidth=1388&size=0&width=746)\n\n### 设置一个Github仓库名\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003876174-0a009760-281a-471a-ae84-ba57e78bc7f5.png#align=left&display=inline&height=462&linkTarget=_blank&originHeight=860&originWidth=1388&size=0&width=746)\n\n## 轻点3步，轻松实现网站上线\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874862-5f0e0a60-fe79-47fc-acad-4613664b3330.png#align=left&display=inline&height=563&linkTarget=_blank&originHeight=1047&originWidth=1388&size=0&width=746)\n\n### 第一步：自动部署\n\n不用做任何设置, 每次master分支有更新代码, Netlify就会帮你自动部署代码. 图为部署记录<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874848-deab7b30-4177-4c46-ab56-51fcedb15b3f.png#align=left&display=inline&height=236&linkTarget=_blank&originHeight=383&originWidth=1210&size=0&width=746)<br />\n实时看到部署的日志:<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003877190-706120c0-83bd-48aa-8e3d-e0b2b409e7bc.png#align=left&display=inline&height=524&linkTarget=_blank&originHeight=844&originWidth=1202&size=0&width=746)\n\n### 第二步：自定义域名\n\n默认情况下，Netlify为我们分配了一个随机域名（可以自定义二级域名、独立域名）<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003875885-a29a15b3-0dbd-4127-b074-ed0408983529.png#align=left&display=inline&height=424&linkTarget=_blank&originHeight=685&originWidth=1205&size=0&width=746)\n\n### 第三步：开启Https\n\n自动生成`Let’s Encrypt`的证书, 也支持上传自己的证书，详见：[https://www.netlify.com/docs/ssl/](https://www.netlify.com/docs/ssl/)<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874842-8d573cd6-e34d-4e55-8694-9ef26dac94f6.png#align=left&display=inline&height=421&linkTarget=_blank&originHeight=679&originWidth=1204&size=0&width=746)\n\n## 其他：Netlify的优缺点\n\n优点：\n\n* 提供webhook的形式触发部署\n* 提供Html代码注入\n* 自动优化\n* 自动部署通知<br />\n缺点：不能检测到`git submodule`的变更\n\n## 关于Markdown编辑器\n\n现在我们已经完成了Hexo的持续部署，将Hexo源码项目Clone到本地后，可以使用IDEA导入，IDEA内置的Markdown编辑器正好用来写文章，而IDEA内置的Git版本管理工具也不赖，哈哈，如此一来，书写博客就如同写代码一般，写完提交到Git即可。<br />\n此外、IDEA内置的Markdown编辑器不支持插入图片，我这里写了个轻量级的Markdown编辑器扩展程序, 支持粘贴图片文件然后上传到七牛云存储, 然后生成Markdown图片标记插入到文章中。<br />\n> 详见https://gitee.com/wuwenze/markdown-support-qiniu\n\n## 效果图\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874928-cb340911-cc35-469b-b437-b9f22cbb1812.png#align=left&display=inline&height=570&linkTarget=_blank&originHeight=1007&originWidth=1317&size=0&width=746)<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874873-aa57aca4-b019-4d17-b5e7-a6c60a46a4cd.png#align=left&display=inline&height=618&linkTarget=_blank&originHeight=1047&originWidth=1264&size=0&width=746)<br />\n\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-12-21 13:48:09</p><p>tags: [&quot;Hexo&quot;,&quot;Netlify&quot;]</p><hr /><p><br /></p><p>Hexo被称为是最佳的静态博客程序之一，然而其繁琐的环境搭建、构建，发布过程，让很多人望之却步，转而使用了传统的<code>WordPress</code>等博客程序，抛开维护成本不说，本着折腾一切的心态，最终研究出了一套完善的自动部署方案。</p><p><br /></p><h2 id=\"36a394ce\">Hexo特色</h2><p><br /></p><ul><li><strong>超快速度:</strong> Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li></ul><ul><li><strong>支持 Markdown:</strong> Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li></ul><ul><li><strong>一键部署:</strong> 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</li></ul><ul><li><strong>丰富的插件:</strong> Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</li></ul><p><br /></p><blockquote><p>目前市面上还存在很多类似的静态网站生成器，详情请查看：<a href=\"https://www.staticgen.com/\" target=\"_blank\">https://www.staticgen.com/</a></p></blockquote><p><br /></p><h2 id=\"5cb443b6\">如何实现优雅发布</h2><p><br /></p><p>就目前而言，Hexo发布的方式有以下几种：</p><p><br /></p><ul><li>原始方式，即在本地搭建相关环境，编写md文件后，手动<code>hexo g</code>生成静态文件，然后通过<code>hexo deploy</code>发布到<code>Github Pages</code>；</li></ul><ul><li>利用Github + Webhook来实现自动发布（这个需要一台自己服务器）详见：<a href=\"http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/\" target=\"_blank\">http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/</a></li></ul><ul><li>使用第三方的Hexo-Client、Hexo-Admin等程序，详见：<a href=\"https://github.com/search?q=hexo-client\" target=\"_blank\">https://github.com/search?q=hexo-client</a></li></ul><ul><li>使用<code>Travis CI</code>持续部署Hexo，详见：<a href=\"https://www.jianshu.com/p/5691815b81b6\" target=\"_blank\">https://www.jianshu.com/p/5691815b81b6</a></li></ul><ul><li>使用<code>Netlify</code>进行优雅地持续部署。详见：<a href=\"https://www.netlify.com\" target=\"_blank\">https://www.netlify.com</a></li></ul><p><br /></p><h2 id=\"de095fe9\">简要流程</h2><p><br /></p><ol start=\"1\"><li>使用<code>Github</code>登陆<code>Netlify</code>。</li></ol><ol start=\"2\"><li>使用<code>StaticGen</code>一键初始化Hexo仓库。</li></ol><ol start=\"3\"><li>将Hexo源码仓库Clone到本地，调整网站配置，编写文章。</li></ol><ol start=\"4\"><li>本地无需<code>Nodejs</code>、<code>NPM</code>、<code>Hexo</code>环境，修改完成后<code>Push到Github</code>，<code>Netlify</code>检测到仓库变更后实现<code>自动部署</code>。</li></ol><p><br /></p><p>在<code>Netlify</code>整个部署过程中, 你只需要提交代码, 其余的master部署预览(包括MR的预览), HTTPS证书, 静态资源的优化与CDN加速, 部署消息通知, 等等都不用再操心. 真的是太优雅了!</p><p><br /></p><h2 id=\"39da6755\">创建项目</h2><p><br /></p><h3 id=\"2fa378b4\">在StaticGen上选择Hexo</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874813-a59a1d5d-c4e0-4634-8123-6fffe6a3a6e7.png#align=left&amp;display=inline&amp;height=416&amp;linkTarget=_blank&amp;originHeight=774&amp;originWidth=1388&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"37bac119\">使用Github登陆</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874854-54998794-a730-44ac-80af-bd29591ab372.png#align=left&amp;display=inline&amp;height=462&amp;linkTarget=_blank&amp;originHeight=860&amp;originWidth=1388&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"88dd8e66\">设置一个Github仓库名</h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003876174-0a009760-281a-471a-ae84-ba57e78bc7f5.png#align=left&amp;display=inline&amp;height=462&amp;linkTarget=_blank&amp;originHeight=860&amp;originWidth=1388&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"9e9304c9\">轻点3步，轻松实现网站上线</h2><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874862-5f0e0a60-fe79-47fc-acad-4613664b3330.png#align=left&amp;display=inline&amp;height=563&amp;linkTarget=_blank&amp;originHeight=1047&amp;originWidth=1388&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"d8df4a01\">第一步：自动部署</h3><p><br /></p><p>不用做任何设置, 每次master分支有更新代码, Netlify就会帮你自动部署代码. 图为部署记录<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874848-deab7b30-4177-4c46-ab56-51fcedb15b3f.png#align=left&amp;display=inline&amp;height=236&amp;linkTarget=_blank&amp;originHeight=383&amp;originWidth=1210&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n实时看到部署的日志:<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003877190-706120c0-83bd-48aa-8e3d-e0b2b409e7bc.png#align=left&amp;display=inline&amp;height=524&amp;linkTarget=_blank&amp;originHeight=844&amp;originWidth=1202&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"550762a1\">第二步：自定义域名</h3><p><br /></p><p>默认情况下，Netlify为我们分配了一个随机域名（可以自定义二级域名、独立域名）<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003875885-a29a15b3-0dbd-4127-b074-ed0408983529.png#align=left&amp;display=inline&amp;height=424&amp;linkTarget=_blank&amp;originHeight=685&amp;originWidth=1205&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"867358de\">第三步：开启Https</h3><p><br /></p><p>自动生成<code>Let’s Encrypt</code>的证书, 也支持上传自己的证书，详见：<a href=\"https://www.netlify.com/docs/ssl/\" target=\"_blank\">https://www.netlify.com/docs/ssl/</a><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874842-8d573cd6-e34d-4e55-8694-9ef26dac94f6.png#align=left&amp;display=inline&amp;height=421&amp;linkTarget=_blank&amp;originHeight=679&amp;originWidth=1204&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"4029dd06\">其他：Netlify的优缺点</h2><p><br /></p><p>优点：</p><p><br /></p><ul><li>提供webhook的形式触发部署</li></ul><ul><li>提供Html代码注入</li></ul><ul><li>自动优化</li></ul><ul><li>自动部署通知<br />\n缺点：不能检测到<code>git submodule</code>的变更</li></ul><p><br /></p><h2 id=\"c168c9a0\">关于Markdown编辑器</h2><p><br /></p><p>现在我们已经完成了Hexo的持续部署，将Hexo源码项目Clone到本地后，可以使用IDEA导入，IDEA内置的Markdown编辑器正好用来写文章，而IDEA内置的Git版本管理工具也不赖，哈哈，如此一来，书写博客就如同写代码一般，写完提交到Git即可。<br />\n此外、IDEA内置的Markdown编辑器不支持插入图片，我这里写了个轻量级的Markdown编辑器扩展程序, 支持粘贴图片文件然后上传到七牛云存储, 然后生成Markdown图片标记插入到文章中。<br />\n&gt; 详见https://gitee.com/wuwenze/markdown-support-qiniu</p><p><br /></p><h2 id=\"4231d51e\">效果图</h2><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874928-cb340911-cc35-469b-b437-b9f22cbb1812.png#align=left&amp;display=inline&amp;height=570&amp;linkTarget=_blank&amp;originHeight=1007&amp;originWidth=1317&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003874873-aa57aca4-b019-4d17-b5e7-a6c60a46a4cd.png#align=left&amp;display=inline&amp;height=618&amp;linkTarget=_blank&amp;originHeight=1047&amp;originWidth=1264&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:52:12.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:50:09.000Z",
    "updated_at": "2019-02-01T06:52:12.000Z",
    "published_at": "2019-02-01T06:52:12.000Z",
    "first_published_at": "2019-02-01T06:52:12.000Z",
    "word_count": 922,
    "cover": "",
    "description": "date: 2018-12-21 13:48:09tags: [&quot;Hexo&quot;,&quot;Netlify&quot;]Hexo被称为是最佳的静态博客程序之一，然而其繁琐的环境搭建、构建，发布过程，让很多人望之却步，转而使用了传统的WordPress等博客程序，抛开维护成本不...",
    "custom_description": "Hexo被称为是最佳的静态博客程序之一，然而其繁琐的环境搭建、构建，发布过程，让很多人望之却步，转而使用了传统的`WordPress`等博客程序，抛开维护成本不说，本着折腾一切的心态，最终研究出了一套完善的自动部署方案。",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224250,
    "slug": "fastjson-fix-ref",
    "title": "解决FastJson中ref重复引用问题",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-11-23 15:47:56<br />tags: [\"Fastjson\",\"JSON\"]\n---\n\n解决FastJson中\"$ref重复引用\"的问题，先来看一个例子吧：\n\n```java\npublic static void main(String[] args) {\n   UserGroup userGroup = new UserGroup().setName(\"UserGroup\");\n\n   User user = new User(\"User\");\n   for (int i = 0; i < 3; i++) {\n       userGroup.addUser(user);\n   }\n   Console.log(JSON.toJSONString(userGroup));\n}\n\n\n@Data\n@AllArgsConstructor\nstatic class User {\n   private String name;\n}\n\n@Data\n@Accessors(chain = true)\nstatic class UserGroup {\n   private String name;\n   private List<User> users = Lists.newArrayList();\n\n   public UserGroup addUser(User user) {\n       this.getUsers().add(user);\n       return this;\n   }\n}\n```\n\n输出结果：\n\n```json\n{\"name\":\"UserGroup\",\"users\":[{\"name\":\"User\"},{\"$ref\":\"$.users[0]\"},{\"$ref\":\"$.users[0]\"}]}\n```\n上面的现象就是将user对象的引用重复使用造成了重复引用问题，Fastjson默认开启引用检测将相同的对象写成引用的形式：\n\n```json\n{\"$ref\": \"$\"} // 引用根对象\n{\"$ref\":\"@\"} // 引用自己\n{\"$ref\":\"..\"} // 引用父对象\n{\"$ref\":\"../..\"} // 引用父对象的父对象\n{\"$ref\":\"$.members[0].reportTo\"} // 基于路径的引用\n```\n\n目前来说，前端还没有一个很好的办法来解析这样的JSON格式。\n\n除了上面的重复引用外， 还衍生出了另外一个概念：\"循环引用\"，下面来看下两者之间的区别吧：\n\n* 重复引用：指一个对象引用重复出现多次\n* 循环引用：对象A引用对象B，对象B引用对象A（这种情况一般是个雷区，轻易不要尝试的好，很容易引发StackOverflowError）\n\n再来看一个循环引用的例子：\n\n```java\npublic static void main(String[] args) {\n    Order order = new Order().setName(\"Order\");\n    Item item = new Item().setName(\"Item\");\n\n    item.setOrder(order);\n    order.setItem(item);\n\n    Console.log(JSON.toJSONString(order));\n    Console.log(\"----------------------------\");\n    Console.log(JSON.toJSONString(item));\n}\n\n@Data\n@Accessors(chain = true)\nstatic class Order {\n    private String name;\n    private Item item;\n}\n\n@Data\n@Accessors(chain = true)\nstatic class Item {\n    private String name;\n    private Order order;\n}\n```\n\n```json\n{\"item\":{\"name\":\"Item\",\"order\":{\"$ref\":\"..\"}},\"name\":\"Order\"}\n----------------------------\n{\"name\":\"Item\",\"order\":{\"item\":{\"$ref\":\"..\"},\"name\":\"Order\"}}\n```\n\n## 解决方案\n\n* 关闭FastJson引用检测机制（慎用，循环引用时可能导致`StackOverflowError`）\n\n```java\nJSON.toJSONString(obj, SerializerFeature.DisableCircularReferenceDetect)\n```\n\n* 避免循环引用（某一方的引用字段不参与序列化：`@JSONField(serialize=false)`）\n* 避免一个对象引用被重复使用多次（使用拷贝的对象副本来完成JSON数据填充）\n\n```java\npublic static void main(String[] args) {\n    UserGroup userGroup = new UserGroup().setName(\"UserGroup\");\n\n    User user = new User(\"User\");\n    for (int i = 0; i < 3; i++) {\n        User duplicateUser = new User();\n        BeanUtil.copyProperties(user, duplicateUser);\n        userGroup.addUser(duplicateUser);\n    }\n    Console.log(JSON.toJSONString(userGroup));\n}\n```\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-11-23 15:47:56</p><p>tags: [&quot;Fastjson&quot;,&quot;JSON&quot;]</p><hr /><p><br /></p><p>解决FastJson中&quot;$ref重复引用&quot;的问题，先来看一个例子吧：</p><p><br /></p><pre data-lang=\"java\"><code>public static void main(String[] args) {\n   UserGroup userGroup = new UserGroup().setName(&quot;UserGroup&quot;);\n\n   User user = new User(&quot;User&quot;);\n   for (int i = 0; i &lt; 3; i++) {\n       userGroup.addUser(user);\n   }\n   Console.log(JSON.toJSONString(userGroup));\n}\n\n\n@Data\n@AllArgsConstructor\nstatic class User {\n   private String name;\n}\n\n@Data\n@Accessors(chain = true)\nstatic class UserGroup {\n   private String name;\n   private List&lt;User&gt; users = Lists.newArrayList();\n\n   public UserGroup addUser(User user) {\n       this.getUsers().add(user);\n       return this;\n   }\n}</code></pre><p><br /></p><p>输出结果：</p><p><br /></p><pre data-lang=\"json\"><code>{&quot;name&quot;:&quot;UserGroup&quot;,&quot;users&quot;:[{&quot;name&quot;:&quot;User&quot;},{&quot;$ref&quot;:&quot;$.users[0]&quot;},{&quot;$ref&quot;:&quot;$.users[0]&quot;}]}</code></pre><p>上面的现象就是将user对象的引用重复使用造成了重复引用问题，Fastjson默认开启引用检测将相同的对象写成引用的形式：</p><p><br /></p><pre data-lang=\"json\"><code>{&quot;$ref&quot;: &quot;$&quot;} // 引用根对象\n{&quot;$ref&quot;:&quot;@&quot;} // 引用自己\n{&quot;$ref&quot;:&quot;..&quot;} // 引用父对象\n{&quot;$ref&quot;:&quot;../..&quot;} // 引用父对象的父对象\n{&quot;$ref&quot;:&quot;$.members[0].reportTo&quot;} // 基于路径的引用</code></pre><p><br /></p><p>目前来说，前端还没有一个很好的办法来解析这样的JSON格式。</p><p><br /></p><p>除了上面的重复引用外， 还衍生出了另外一个概念：&quot;循环引用&quot;，下面来看下两者之间的区别吧：</p><p><br /></p><ul><li>重复引用：指一个对象引用重复出现多次</li></ul><ul><li>循环引用：对象A引用对象B，对象B引用对象A（这种情况一般是个雷区，轻易不要尝试的好，很容易引发StackOverflowError）</li></ul><p><br /></p><p>再来看一个循环引用的例子：</p><p><br /></p><pre data-lang=\"java\"><code>public static void main(String[] args) {\n    Order order = new Order().setName(&quot;Order&quot;);\n    Item item = new Item().setName(&quot;Item&quot;);\n\n    item.setOrder(order);\n    order.setItem(item);\n\n    Console.log(JSON.toJSONString(order));\n    Console.log(&quot;----------------------------&quot;);\n    Console.log(JSON.toJSONString(item));\n}\n\n@Data\n@Accessors(chain = true)\nstatic class Order {\n    private String name;\n    private Item item;\n}\n\n@Data\n@Accessors(chain = true)\nstatic class Item {\n    private String name;\n    private Order order;\n}</code></pre><p><br /></p><pre data-lang=\"json\"><code>{&quot;item&quot;:{&quot;name&quot;:&quot;Item&quot;,&quot;order&quot;:{&quot;$ref&quot;:&quot;..&quot;}},&quot;name&quot;:&quot;Order&quot;}\n----------------------------\n{&quot;name&quot;:&quot;Item&quot;,&quot;order&quot;:{&quot;item&quot;:{&quot;$ref&quot;:&quot;..&quot;},&quot;name&quot;:&quot;Order&quot;}}</code></pre><p><br /></p><h2 id=\"de842a6c\">解决方案</h2><p><br /></p><ul><li>关闭FastJson引用检测机制（慎用，循环引用时可能导致<code>StackOverflowError</code>）</li></ul><p><br /></p><pre data-lang=\"java\"><code>JSON.toJSONString(obj, SerializerFeature.DisableCircularReferenceDetect)</code></pre><p><br /></p><ul><li>避免循环引用（某一方的引用字段不参与序列化：<code>@JSONField(serialize=false)</code>）</li></ul><ul><li>避免一个对象引用被重复使用多次（使用拷贝的对象副本来完成JSON数据填充）</li></ul><p><br /></p><pre data-lang=\"java\"><code>public static void main(String[] args) {\n    UserGroup userGroup = new UserGroup().setName(&quot;UserGroup&quot;);\n\n    User user = new User(&quot;User&quot;);\n    for (int i = 0; i &lt; 3; i++) {\n        User duplicateUser = new User();\n        BeanUtil.copyProperties(user, duplicateUser);\n        userGroup.addUser(duplicateUser);\n    }\n    Console.log(JSON.toJSONString(userGroup));\n}</code></pre><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:50:00.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:48:06.000Z",
    "updated_at": "2019-02-01T06:50:00.000Z",
    "published_at": "2019-02-01T06:50:00.000Z",
    "first_published_at": "2019-02-01T06:50:00.000Z",
    "word_count": 648,
    "cover": "",
    "description": "date: 2018-11-23 15:47:56tags: [&quot;Fastjson&quot;,&quot;JSON&quot;]解决FastJson中&quot;$ref重复引用&quot;的问题，先来看一个例子吧：public static void main(String[] ...",
    "custom_description": "解决FastJson中\"$ref重复引用\"的问题",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224245,
    "slug": "ewei-api-sign-gen",
    "title": "适用于Ewei Open Api的Sign计算脚本",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-12-06 16:26:44<br />tags: [\"Postman\",\"Ewei\",\"Sign\"]\n---\n\n为方便在Postman中测试易维开放平台中需要sign参数相关的接口，写了两个Pre-Request-Script脚本，用于在Postman中动态计算签名。\n\n> 文档：[http://api.ewei.com/index#/index/developer_read/join_guide](http://api.ewei.com/index#/index/developer_read/join_guide)\n\n## \n## v1 版本相关API\n\n```javascript\n// 前置处理器：计算请求签名(OpenV1)\nvar _app_secret = pm.environment.get(\"provider_app_secret\");\nvar _time_open_v1 = (new Date()).valueOf();\nvar _request_method = request.method;\nvar _request_url_no_query_string = getRequestUrlWithNoQueryString();\nvar _request_body = pm.request.body.raw;\n\nvar _params = _request_method \n    + getStringWithPopParameters(_request_url_no_query_string) \n    + (\"_app_secret=\" + _app_secret)\n    + (\"_timestamp=\" + _time_open_v1)\n    + getQueryStringWithNoSplitter()\n    + (_request_body ? (\"requestBody=\" + _request_body) : \"\");\nconsole.log(\"_params = \" + _params);\n\nvar _url_encoded_params = encodeURIComponent(_params);\nconsole.log(\"_url_encoded_params = \" + _url_encoded_params);\n\nvar _lower_url_encoded_params = _url_encoded_params.toLowerCase();\nconsole.log(\"_lower_url_encoded_params = \" + _url_encoded_params);\n\nvar _sign_open_v1 = CryptoJS.MD5(_lower_url_encoded_params).toString();\nconsole.log(\"_sign_open_v1 = \" + _sign_open_v1);\n\npm.environment.set(\"_time_open_v1\", _time_open_v1);\npm.environment.set(\"_sign_open_v1\", _sign_open_v1);\n\nfunction getQueryStringWithNoSplitter() {\n    var request_url = request.url;\n    var query_string = request_url.substring(request_url.indexOf('?') + 1);\n    var query_string_no_splitter = query_string.replace(\"&\",\"\");\n    return getStringWithPopParameters(query_string_no_splitter);\n}\n\nfunction getRequestUrlWithNoQueryString() {\n    var request_url = request.url;\n    return request_url.substring(0, request_url.indexOf('?'));\n}\n\nfunction getStringWithPopParameters(str) {\n    var variableArray = extractPmVariables(str);\n    for (var i = 0; i < variableArray.length; i++) {\n        var va = variableArray[i];\n        if (va.variableValue) {\n            str = str.replace(va.variableKey, va.variableValue);\n        }\n    }\n    return str;\n}\n\nfunction extractPmVariables(requestUrl) {\n    var variableArray = [];\n    var variables = requestUrl.match(/{{[A-Za-z0-9-\\$_]+}}/g);\n    if (variables) {\n       for (var i = 0; i < variables.length; i++) {\n            var variableKey = variables[i];\n            var variableName = variableKey.replace(\"{{\",\"\").replace(\"}}\",\"\");\n            var variableValue = pm.environment.get(variableName);\n            variableArray.push({\n                \"variableKey\": variableKey,\n                \"variableName\": variableName,\n                \"variableValue\": variableValue\n            });\n        } \n    }\n    return variableArray;\n}\n```\n\n### 使用示例\n### ![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003557676-aea35616-7877-4deb-91bb-a6c6e370eefe.png#align=left&display=inline&height=325&linkTarget=_blank&originHeight=707&originWidth=1624&size=0&width=746)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003558707-d56e5ba4-377e-4d29-8ce3-e26a38c8c8a5.png#align=left&display=inline&height=186&linkTarget=_blank&originHeight=406&originWidth=1625&size=0&width=746)\n\n## v2 版本相关API\n\n```javascript\n// 前置处理器：计算请求签名(OpenV2)\nvar _app_secret = pm.environment.get(\"provider_app_secret\");\nvar _time_open_v2 = (new Date()).valueOf();\nvar _pre_sign = 'requestBody=' + pm.request.body.raw + ',time=' + _time_open_v2 + ',appSecret=' + _app_secret;\nvar _sign_open_v2 = CryptoJS.MD5(_pre_sign).toString();\npm.environment.set(\"_time_open_v2\", _time_open_v2);\npm.environment.set(\"_sign_open_v2\", _sign_open_v2);\n\nconsole.log('[Pre]OpenAccountApi.getUserToken _pre_sign='+_pre_sign+',_sign_open_v2=' + _sign_open_v2);\n```\n\n### 使用示例\n### ![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003557584-24a203cd-9dde-4309-af94-51b98cd91d31.png#align=left&display=inline&height=187&linkTarget=_blank&originHeight=407&originWidth=1623&size=0&width=746)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003558621-47422f6b-3a70-4b9f-aebc-003e5583e1db.png#align=left&display=inline&height=188&linkTarget=_blank&originHeight=410&originWidth=1627&size=0&width=746)\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-12-06 16:26:44</p><p>tags: [&quot;Postman&quot;,&quot;Ewei&quot;,&quot;Sign&quot;]</p><hr /><p><br /></p><p>为方便在Postman中测试易维开放平台中需要sign参数相关的接口，写了两个Pre-Request-Script脚本，用于在Postman中动态计算签名。</p><p><br /></p><blockquote><p>文档：<a href=\"http://api.ewei.com/index#/index/developer_read/join_guide\" target=\"_blank\">http://api.ewei.com/index#/index/developer_read/join_guide</a></p></blockquote><h2 id=\"d41d8cd9\"><br /></h2><h2 id=\"64e8382a\">v1 版本相关API</h2><p><br /></p><pre data-lang=\"javascript\"><code>// 前置处理器：计算请求签名(OpenV1)\nvar _app_secret = pm.environment.get(&quot;provider_app_secret&quot;);\nvar _time_open_v1 = (new Date()).valueOf();\nvar _request_method = request.method;\nvar _request_url_no_query_string = getRequestUrlWithNoQueryString();\nvar _request_body = pm.request.body.raw;\n\nvar _params = _request_method \n    + getStringWithPopParameters(_request_url_no_query_string) \n    + (&quot;_app_secret=&quot; + _app_secret)\n    + (&quot;_timestamp=&quot; + _time_open_v1)\n    + getQueryStringWithNoSplitter()\n    + (_request_body ? (&quot;requestBody=&quot; + _request_body) : &quot;&quot;);\nconsole.log(&quot;_params = &quot; + _params);\n\nvar _url_encoded_params = encodeURIComponent(_params);\nconsole.log(&quot;_url_encoded_params = &quot; + _url_encoded_params);\n\nvar _lower_url_encoded_params = _url_encoded_params.toLowerCase();\nconsole.log(&quot;_lower_url_encoded_params = &quot; + _url_encoded_params);\n\nvar _sign_open_v1 = CryptoJS.MD5(_lower_url_encoded_params).toString();\nconsole.log(&quot;_sign_open_v1 = &quot; + _sign_open_v1);\n\npm.environment.set(&quot;_time_open_v1&quot;, _time_open_v1);\npm.environment.set(&quot;_sign_open_v1&quot;, _sign_open_v1);\n\nfunction getQueryStringWithNoSplitter() {\n    var request_url = request.url;\n    var query_string = request_url.substring(request_url.indexOf('?') + 1);\n    var query_string_no_splitter = query_string.replace(&quot;&amp;&quot;,&quot;&quot;);\n    return getStringWithPopParameters(query_string_no_splitter);\n}\n\nfunction getRequestUrlWithNoQueryString() {\n    var request_url = request.url;\n    return request_url.substring(0, request_url.indexOf('?'));\n}\n\nfunction getStringWithPopParameters(str) {\n    var variableArray = extractPmVariables(str);\n    for (var i = 0; i &lt; variableArray.length; i++) {\n        var va = variableArray[i];\n        if (va.variableValue) {\n            str = str.replace(va.variableKey, va.variableValue);\n        }\n    }\n    return str;\n}\n\nfunction extractPmVariables(requestUrl) {\n    var variableArray = [];\n    var variables = requestUrl.match(/{{[A-Za-z0-9-\\$_]+}}/g);\n    if (variables) {\n       for (var i = 0; i &lt; variables.length; i++) {\n            var variableKey = variables[i];\n            var variableName = variableKey.replace(&quot;{{&quot;,&quot;&quot;).replace(&quot;}}&quot;,&quot;&quot;);\n            var variableValue = pm.environment.get(variableName);\n            variableArray.push({\n                &quot;variableKey&quot;: variableKey,\n                &quot;variableName&quot;: variableName,\n                &quot;variableValue&quot;: variableValue\n            });\n        } \n    }\n    return variableArray;\n}</code></pre><p><br /></p><h3 id=\"4a532e14\">使用示例</h3><h3 id=\"cbe7302b\"><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003557676-aea35616-7877-4deb-91bb-a6c6e370eefe.png#align=left&amp;display=inline&amp;height=325&amp;linkTarget=_blank&amp;originHeight=707&amp;originWidth=1624&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003558707-d56e5ba4-377e-4d29-8ce3-e26a38c8c8a5.png#align=left&amp;display=inline&amp;height=186&amp;linkTarget=_blank&amp;originHeight=406&amp;originWidth=1625&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"0ecdd432\">v2 版本相关API</h2><p><br /></p><pre data-lang=\"javascript\"><code>// 前置处理器：计算请求签名(OpenV2)\nvar _app_secret = pm.environment.get(&quot;provider_app_secret&quot;);\nvar _time_open_v2 = (new Date()).valueOf();\nvar _pre_sign = 'requestBody=' + pm.request.body.raw + ',time=' + _time_open_v2 + ',appSecret=' + _app_secret;\nvar _sign_open_v2 = CryptoJS.MD5(_pre_sign).toString();\npm.environment.set(&quot;_time_open_v2&quot;, _time_open_v2);\npm.environment.set(&quot;_sign_open_v2&quot;, _sign_open_v2);\n\nconsole.log('[Pre]OpenAccountApi.getUserToken _pre_sign='+_pre_sign+',_sign_open_v2=' + _sign_open_v2);</code></pre><p><br /></p><h3 id=\"4a532e14\">使用示例</h3><h3 id=\"cbe7302b\"><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003557584-24a203cd-9dde-4309-af94-51b98cd91d31.png#align=left&amp;display=inline&amp;height=187&amp;linkTarget=_blank&amp;originHeight=407&amp;originWidth=1623&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></h3><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003558621-47422f6b-3a70-4b9f-aebc-003e5583e1db.png#align=left&amp;display=inline&amp;height=188&amp;linkTarget=_blank&amp;originHeight=410&amp;originWidth=1627&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:47:54.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:44:16.000Z",
    "updated_at": "2019-02-01T06:47:54.000Z",
    "published_at": "2019-02-01T06:47:54.000Z",
    "first_published_at": "2019-02-01T06:47:54.000Z",
    "word_count": 551,
    "cover": "",
    "description": "date: 2018-12-06 16:26:44tags: [&quot;Postman&quot;,&quot;Ewei&quot;,&quot;Sign&quot;]为方便在Postman中测试易维开放平台中需要sign参数相关的接口，写了两个Pre-Request-Script脚本，用...",
    "custom_description": "为方便在Postman中测试易维开放平台中需要sign参数相关的接口，写了两个Pre-Request-Script脚本，用于在Postman中动态计算签名。",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224237,
    "slug": "elk-kibana-lucene",
    "title": "Kibana中使用的lucene查询语法详解",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-10-11 15:22:23<br />tags: [\"ELK\",\"Kibana\",\"Lucene\"]\n---\nKibana是一个分析和可视化平台，可用来搜索、查看、交互存放在Elasticsearch索引里的数据<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003411594-fdf218e8-bd24-465c-a80a-91219d1aceae.png#align=left&display=inline&height=579&linkTarget=_blank&originHeight=869&originWidth=1119&size=0&width=746)\n\n本文简单概括在搜索框中使用lucene查询语法检索相关的日志数据。\n\n## 全文搜索\n直接输入关键字，将返回所有字段值中包含关键字的文档：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003411618-4c16aee3-ea12-4e0b-9ce6-a8550c662502.png#align=left&display=inline&height=523&linkTarget=_blank&originHeight=889&originWidth=1269&size=0&width=746)\n\n使用双引号包起来作为一个短语搜索精准匹配：\n```bash\n\"providerId\\=719\"\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003411616-b48301d7-6c51-47a4-83d7-decb8735235f.png#align=left&display=inline&height=523&linkTarget=_blank&originHeight=889&originWidth=1269&size=0&width=746)\n\n## \n## 字段\n可以直接通过页面配置：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003411616-9868479e-2ba0-4612-b3c8-4b5a8f8b27a6.png#align=left&display=inline&height=523&linkTarget=_blank&originHeight=889&originWidth=1269&size=0&width=746)\n\n同时也可以在输入框中输入相关语法：\n```bash\nclassName:com.ewei.module.talk.logic.impl.ChatLogicImpl\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003411587-495e6ce4-0e1b-4819-9f57-4038bf72deac.png#align=left&display=inline&height=523&linkTarget=_blank&originHeight=889&originWidth=1269&size=0&width=746)\n\n相关的语法说明：\n\n* 限定字段全文搜索：field:value\n* 限定字段精确搜索：field:\"value\"\n\n如：`level:error` 表示搜索基本为error的日志信息\n\n* 字段本身是否存在：_exists_:field\n* 不能包含某个字段：_missing_:field\n\n另外，大概有哪些字段可以使用呢？见下图：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549003411607-f2dd7989-6f62-41ca-81bd-0647f1bdd6c4.png#align=left&display=inline&height=523&linkTarget=_blank&originHeight=889&originWidth=1269&size=0&width=746)\n\n## 通配\n\n```bash\n? 匹配单个字符\n* 匹配0到多个字符\n\n如：kiba?a, el*search\n\n注意，? * 不能用作第一个字符，例如：?text *text\n```\n\n## 正则\n\nes支持部分正则功能,性能较差\n\n```bash\nname:/joh?n(ath[oa]n)/\n```\n\n## 模糊搜索\n\n```bash\nquikc~ brwn~ foks~\n\n~:在一个单词后面加上~启用模糊搜索，可以搜到一些拼写错误的单词\n\nfirst~ 这种也能匹配到 frist\n\n还可以设置编辑距离（整数），指定需要多少相似度\ncromm~1 会匹配到 from 和 chrome\n默认2，越大越接近搜索的原始值，设置为1基本能搜到80%拼写错误的单词\n```\n\n## 近似搜索\n\n```bash\n在短语后面加上~，可以搜到被隔开或顺序不同的单词\n\"where select\"~5 表示 select 和 where 中间可以隔着5个单词，可以搜到 select password from users where id=1\n```\n\n## 范围搜索\n\n```bash\n数值/时间/IP/字符串 类型的字段可以对某一范围进行查询\nlength:[100 TO 200]\nsip:[\"172.24.20.110\" TO \"172.24.20.140\"]\ndate:{\"now-6h\" TO \"now\"}\ntag:{b TO e} 搜索b到e中间的字符\ncount:[10 TO *] * 表示一端不限制范围\ncount:[1 TO 5} [ ] 表示端点数值包含在范围内，{ } 表示端点数值不包含在范围内，可以混合使用，此语句为1到5，包括1，不包括5\n可以简化成以下写法：\nage:&gt;10\nage:=10 AND  &lt; ! ( ) { } [ ] ^ &quot; ~ * ? : \\ /\n以上字符当作值搜索的时候需要用\\转义\n\\(1\\+1\\)\\=2用来查询(1+1)=2\n```\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-10-11 15:22:23</p><p>tags: [&quot;ELK&quot;,&quot;Kibana&quot;,&quot;Lucene&quot;]</p><hr /><p>Kibana是一个分析和可视化平台，可用来搜索、查看、交互存放在Elasticsearch索引里的数据<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003411594-fdf218e8-bd24-465c-a80a-91219d1aceae.png#align=left&amp;display=inline&amp;height=579&amp;linkTarget=_blank&amp;originHeight=869&amp;originWidth=1119&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>本文简单概括在搜索框中使用lucene查询语法检索相关的日志数据。</p><p><br /></p><h2 id=\"430c07cf\">全文搜索</h2><p>直接输入关键字，将返回所有字段值中包含关键字的文档：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003411618-4c16aee3-ea12-4e0b-9ce6-a8550c662502.png#align=left&amp;display=inline&amp;height=523&amp;linkTarget=_blank&amp;originHeight=889&amp;originWidth=1269&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>使用双引号包起来作为一个短语搜索精准匹配：</p><pre data-lang=\"bash\"><code>&quot;providerId\\=719&quot;</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003411616-b48301d7-6c51-47a4-83d7-decb8735235f.png#align=left&amp;display=inline&amp;height=523&amp;linkTarget=_blank&amp;originHeight=889&amp;originWidth=1269&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"d41d8cd9\"><br /></h2><h2 id=\"9caecd93\">字段</h2><p>可以直接通过页面配置：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003411616-9868479e-2ba0-4612-b3c8-4b5a8f8b27a6.png#align=left&amp;display=inline&amp;height=523&amp;linkTarget=_blank&amp;originHeight=889&amp;originWidth=1269&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>同时也可以在输入框中输入相关语法：</p><pre data-lang=\"bash\"><code>className:com.ewei.module.talk.logic.impl.ChatLogicImpl</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003411587-495e6ce4-0e1b-4819-9f57-4038bf72deac.png#align=left&amp;display=inline&amp;height=523&amp;linkTarget=_blank&amp;originHeight=889&amp;originWidth=1269&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>相关的语法说明：</p><p><br /></p><ul><li>限定字段全文搜索：field:value</li></ul><ul><li>限定字段精确搜索：field:&quot;value&quot;</li></ul><p><br /></p><p>如：<code>level:error</code> 表示搜索基本为error的日志信息</p><p><br /></p><ul><li>字段本身是否存在：<em>exists</em>:field</li></ul><ul><li>不能包含某个字段：<em>missing</em>:field</li></ul><p><br /></p><p>另外，大概有哪些字段可以使用呢？见下图：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549003411607-f2dd7989-6f62-41ca-81bd-0647f1bdd6c4.png#align=left&amp;display=inline&amp;height=523&amp;linkTarget=_blank&amp;originHeight=889&amp;originWidth=1269&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"4eebefde\">通配</h2><p><br /></p><pre data-lang=\"bash\"><code>? 匹配单个字符\n* 匹配0到多个字符\n\n如：kiba?a, el*search\n\n注意，? * 不能用作第一个字符，例如：?text *text</code></pre><p><br /></p><h2 id=\"ed3dd0bf\">正则</h2><p><br /></p><p>es支持部分正则功能,性能较差</p><p><br /></p><pre data-lang=\"bash\"><code>name:/joh?n(ath[oa]n)/</code></pre><p><br /></p><h2 id=\"7c414e66\">模糊搜索</h2><p><br /></p><pre data-lang=\"bash\"><code>quikc~ brwn~ foks~\n\n~:在一个单词后面加上~启用模糊搜索，可以搜到一些拼写错误的单词\n\nfirst~ 这种也能匹配到 frist\n\n还可以设置编辑距离（整数），指定需要多少相似度\ncromm~1 会匹配到 from 和 chrome\n默认2，越大越接近搜索的原始值，设置为1基本能搜到80%拼写错误的单词</code></pre><p><br /></p><h2 id=\"cc5ff267\">近似搜索</h2><p><br /></p><pre data-lang=\"bash\"><code>在短语后面加上~，可以搜到被隔开或顺序不同的单词\n&quot;where select&quot;~5 表示 select 和 where 中间可以隔着5个单词，可以搜到 select password from users where id=1</code></pre><p><br /></p><h2 id=\"31b8f617\">范围搜索</h2><p><br /></p><pre data-lang=\"bash\"><code>数值/时间/IP/字符串 类型的字段可以对某一范围进行查询\nlength:[100 TO 200]\nsip:[&quot;172.24.20.110&quot; TO &quot;172.24.20.140&quot;]\ndate:{&quot;now-6h&quot; TO &quot;now&quot;}\ntag:{b TO e} 搜索b到e中间的字符\ncount:[10 TO *] * 表示一端不限制范围\ncount:[1 TO 5} [ ] 表示端点数值包含在范围内，{ } 表示端点数值不包含在范围内，可以混合使用，此语句为1到5，包括1，不包括5\n可以简化成以下写法：\nage:&amp;gt;10\nage:=10 AND  &amp;lt; ! ( ) { } [ ] ^ &amp;quot; ~ * ? : \\ /\n以上字符当作值搜索的时候需要用\\转义\n\\(1\\+1\\)\\=2用来查询(1+1)=2</code></pre><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:44:09.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:42:32.000Z",
    "updated_at": "2019-02-01T06:44:09.000Z",
    "published_at": "2019-02-01T06:44:09.000Z",
    "first_published_at": "2019-02-01T06:44:09.000Z",
    "word_count": 639,
    "cover": "",
    "description": "date: 2018-10-11 15:22:23tags: [&quot;ELK&quot;,&quot;Kibana&quot;,&quot;Lucene&quot;]Kibana是一个分析和可视化平台，可用来搜索、查看、交互存放在Elasticsearch索引里的数据 本文简单概括在搜索...",
    "custom_description": "Kibana是一个分析和可视化平台，可用来搜索、查看、交互存放在Elasticsearch索引里的数据",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224190,
    "slug": "dubbox-example",
    "title": "当当网Dubbox框架使用示例",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-09-28 15:19:23<br />tags: [\"Dubbo\",\"DubboX\"]\n---\n\n`Dubbox`是当当网基于阿里巴巴`dubbo`衍生出来的一个新版本，以下是在官网摘抄的相关特性：  \n* 支持REST风格远程调用（HTTP + JSON/XML)\n* 支持基于Jackson的JSON序列化\n* 支持基于嵌入式Tomcat的HTTP remoting体系\n* 升级ZooKeeper客户端：将dubbo中的zookeeper客户端升级到最新的版本，以修正老版本中包含的bug。\n* 支持完全基于Java代码的Dubbo配置：基于Spring的Java Config，实现完全无XML的纯Java代码方式来配置dubbo\n\n## Dubbox 环境搭建\n> 由于dubbox相关的jar没有发布到maven中心仓库，故只能自行下载源码编译然后打入本地仓库或私服使用。\n\n\n以下编译过程均在windows环境上执行，使用git bash.exe\n```bash\n$ git clone https://github.com/dangdangdotcom/dubbox.git\n$ cd dubbox\n$ mvn install -Dmaven.test.skip=true\n```\n\n## Zookeeper 环境搭建\n> 默认使用zookeeper作为服务注册中心，故需要先行安装（步骤略）\n\n\n修改配置文件zoo.cfg：\n```bash\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=D:\\\\zookeeper-3.4.11\\\\data\ndataLogDir=D:\\\\zookeeper-3.4.11\\\\log\nclientPort=2181\n```\n\n启动服务：`D:\\zookeeper-3.4.11\\bin\\zkServer.cmd`<br />使用ZooInspector工具查看相关的数据：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002553281-9e614793-d7d5-431f-a5ac-fd278d51078f.png#align=left&display=inline&height=391&linkTarget=_blank&originHeight=520&originWidth=993&size=0&width=746)\n\n## Dubbox-demo Preview\n\n**1) 在IDEA中导入dubbox提供的示例项目：\\dubbox\\dubbo-demo**<br />![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002553270-1866f7b1-55ac-4995-a4fa-675a6cf60f88.png#align=left&display=inline&height=430&linkTarget=_blank&originHeight=745&originWidth=1293&size=0&width=746)\n\n**2) 运行服务提供者（`com.alibaba.dubbo.demo.provider.DemoProvider`）**\n\n**3) 运行成功后，在ZooInspector中可以看到相关的信息已经注册上来了。**<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002552757-7778fa49-6def-4bd3-9939-fc7feeaf4d9b.png#align=left&display=inline&height=432&linkTarget=_blank&originHeight=533&originWidth=920&size=0&width=746)\n\n**4) 运行服务消费者（`com.alibaba.dubbo.demo.consumer.DemoConsumer`）**\n\n**5) 服务消费着调用测试**<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002553756-f239e5c0-14ff-43eb-805d-6c741e2190ea.png#align=left&display=inline&height=430&linkTarget=_blank&originHeight=745&originWidth=1293&size=0&width=746)\n\n**6) 运行对外提供的RESTFul接口（com.alibaba.dubbo.demo.consumer.RestClient）**\n\n**7) 使用浏览器访问`http://localhost:8888/services/users/100.json`：**<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002552665-2596e9ac-e07c-486e-a6ad-f31fbc090e57.png#align=left&display=inline&height=424&linkTarget=_blank&originHeight=559&originWidth=984&size=0&width=746)\n\n**8) 同时支持序列化为xml结果：`http://localhost:8888/services/users/100.xml`：**<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002552756-26b80584-3007-4483-9c7b-8276a4e8c6ca.png#align=left&display=inline&height=424&linkTarget=_blank&originHeight=559&originWidth=984&size=0&width=746)\n\n## Dubbox-example\n\n**UserRestService.java**\n```java\npackage com.alibaba.dubbo.demo.user.facade;\n\nimport com.alibaba.dubbo.demo.user.User;\n\nimport javax.validation.constraints.Min;\n\n/**\n * This interface acts as some kind of service broker for the original UserService\n\n * Here we want to simulate the twitter/weibo rest api, e.g.\n *\n * http://localhost:8888/user/1.json\n * http://localhost:8888/user/1.xml\n *\n * @author lishen\n */\npublic interface UserRestService {\n\n    /**\n     * the request object is just used to test jax-rs injection.\n     */\n    User getUser(@Min(value=1L, message=\"User ID must be greater than 1\") Long id);\n\n    RegistrationResult registerUser(User user);\n}\n```\n\n**UserRestServiceImpl.java**\n```java\npackage com.alibaba.dubbo.demo.user.facade;\n\nimport com.alibaba.dubbo.demo.user.User;\nimport com.alibaba.dubbo.demo.user.UserService;\nimport com.alibaba.dubbo.rpc.RpcContext;\nimport com.alibaba.dubbo.rpc.protocol.rest.support.ContentType;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"users\")\n@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML})\n@Produces({ContentType.APPLICATION_JSON_UTF_8, ContentType.TEXT_XML_UTF_8})\npublic class UserRestServiceImpl implements UserRestService {\n    private UserService userService;\n\n    public void setUserService(UserService userService) {\n        this.userService = userService;\n    }\n\n    @GET\n    @Path(\"{id : \\\\d+}\")\n    public User getUser(@PathParam(\"id\") Long id) {\n        if (RpcContext.getContext().getRequest(HttpServletRequest.class) != null) {\n            System.out.println(\"Client IP address from RpcContext: \" + RpcContext.getContext().getRequest(HttpServletRequest.class).getRemoteAddr());\n        }\n        if (RpcContext.getContext().getResponse(HttpServletResponse.class) != null) {\n            System.out.println(\"Response object from RpcContext: \" + RpcContext.getContext().getResponse(HttpServletResponse.class));\n        }\n        return userService.getUser(id);\n    }\n\n    @POST\n    @Path(\"register\")\n    public RegistrationResult registerUser(User user) {\n        return new RegistrationResult(userService.registerUser(user));\n    }\n}\n```\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-09-28 15:19:23</p><p>tags: [&quot;Dubbo&quot;,&quot;DubboX&quot;]</p><hr /><p><br /></p><p><code>Dubbox</code>是当当网基于阿里巴巴<code>dubbo</code>衍生出来的一个新版本，以下是在官网摘抄的相关特性：  </p><ul><li>支持REST风格远程调用（HTTP + JSON/XML)</li></ul><ul><li>支持基于Jackson的JSON序列化</li></ul><ul><li>支持基于嵌入式Tomcat的HTTP remoting体系</li></ul><ul><li>升级ZooKeeper客户端：将dubbo中的zookeeper客户端升级到最新的版本，以修正老版本中包含的bug。</li></ul><ul><li>支持完全基于Java代码的Dubbo配置：基于Spring的Java Config，实现完全无XML的纯Java代码方式来配置dubbo</li></ul><p><br /></p><h2 id=\"c0ae479e\">Dubbox 环境搭建</h2><blockquote><p>由于dubbox相关的jar没有发布到maven中心仓库，故只能自行下载源码编译然后打入本地仓库或私服使用。</p></blockquote><p><br /></p><p>以下编译过程均在windows环境上执行，使用git bash.exe</p><pre data-lang=\"bash\"><code>$ git clone https://github.com/dangdangdotcom/dubbox.git\n$ cd dubbox\n$ mvn install -Dmaven.test.skip=true</code></pre><p><br /></p><h2 id=\"bf0f2058\">Zookeeper 环境搭建</h2><blockquote><p>默认使用zookeeper作为服务注册中心，故需要先行安装（步骤略）</p></blockquote><p><br /></p><p>修改配置文件<span style=\"color: #8C8C8C;\">zoo.cfg：</span></p><pre data-lang=\"bash\"><code>tickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=D:\\\\zookeeper-3.4.11\\\\data\ndataLogDir=D:\\\\zookeeper-3.4.11\\\\log\nclientPort=2181</code></pre><p><br /></p><p>启动服务：<code>D:\\zookeeper-3.4.11\\bin\\zkServer.cmd</code></p><p>使用ZooInspector工具查看相关的数据：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002553281-9e614793-d7d5-431f-a5ac-fd278d51078f.png#align=left&amp;display=inline&amp;height=391&amp;linkTarget=_blank&amp;originHeight=520&amp;originWidth=993&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"756bb72a\">Dubbox-demo Preview</h2><p><br /></p><p><strong>1) 在IDEA中导入dubbox提供的示例项目：\\dubbox\\dubbo-demo</strong></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002553270-1866f7b1-55ac-4995-a4fa-675a6cf60f88.png#align=left&amp;display=inline&amp;height=430&amp;linkTarget=_blank&amp;originHeight=745&amp;originWidth=1293&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p><strong>2) 运行服务提供者（</strong><strong><code>com.alibaba.dubbo.demo.provider.DemoProvider</code></strong><strong>）</strong></p><p><br /></p><p><strong>3) 运行成功后，在ZooInspector中可以看到相关的信息已经注册上来了。</strong><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002552757-7778fa49-6def-4bd3-9939-fc7feeaf4d9b.png#align=left&amp;display=inline&amp;height=432&amp;linkTarget=_blank&amp;originHeight=533&amp;originWidth=920&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p><strong>4) 运行服务消费者（</strong><strong><code>com.alibaba.dubbo.demo.consumer.DemoConsumer</code></strong><strong>）</strong></p><p><br /></p><p><strong>5) 服务消费着调用测试</strong><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002553756-f239e5c0-14ff-43eb-805d-6c741e2190ea.png#align=left&amp;display=inline&amp;height=430&amp;linkTarget=_blank&amp;originHeight=745&amp;originWidth=1293&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p><strong>6) 运行对外提供的RESTFul接口（com.alibaba.dubbo.demo.consumer.RestClient）</strong></p><p><br /></p><p><strong>7) 使用浏览器访问</strong><strong><code>http://localhost:8888/services/users/100.json</code></strong><strong>：</strong><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002552665-2596e9ac-e07c-486e-a6ad-f31fbc090e57.png#align=left&amp;display=inline&amp;height=424&amp;linkTarget=_blank&amp;originHeight=559&amp;originWidth=984&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p><strong>8) 同时支持序列化为xml结果：</strong><strong><code>http://localhost:8888/services/users/100.xml</code></strong><strong>：</strong><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002552756-26b80584-3007-4483-9c7b-8276a4e8c6ca.png#align=left&amp;display=inline&amp;height=424&amp;linkTarget=_blank&amp;originHeight=559&amp;originWidth=984&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"Dubbox-example\">Dubbox-example</h2><p><br /></p><p><strong>UserRestService.java</strong></p><pre data-lang=\"java\"><code>package com.alibaba.dubbo.demo.user.facade;\n\nimport com.alibaba.dubbo.demo.user.User;\n\nimport javax.validation.constraints.Min;\n\n/**\n * This interface acts as some kind of service broker for the original UserService\n\n * Here we want to simulate the twitter/weibo rest api, e.g.\n *\n * http://localhost:8888/user/1.json\n * http://localhost:8888/user/1.xml\n *\n * @author lishen\n */\npublic interface UserRestService {\n\n    /**\n     * the request object is just used to test jax-rs injection.\n     */\n    User getUser(@Min(value=1L, message=&quot;User ID must be greater than 1&quot;) Long id);\n\n    RegistrationResult registerUser(User user);\n}</code></pre><p><br /></p><p><strong>UserRestServiceImpl.java</strong></p><pre data-lang=\"java\"><code>package com.alibaba.dubbo.demo.user.facade;\n\nimport com.alibaba.dubbo.demo.user.User;\nimport com.alibaba.dubbo.demo.user.UserService;\nimport com.alibaba.dubbo.rpc.RpcContext;\nimport com.alibaba.dubbo.rpc.protocol.rest.support.ContentType;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(&quot;users&quot;)\n@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML})\n@Produces({ContentType.APPLICATION_JSON_UTF_8, ContentType.TEXT_XML_UTF_8})\npublic class UserRestServiceImpl implements UserRestService {\n    private UserService userService;\n\n    public void setUserService(UserService userService) {\n        this.userService = userService;\n    }\n\n    @GET\n    @Path(&quot;{id : \\\\d+}&quot;)\n    public User getUser(@PathParam(&quot;id&quot;) Long id) {\n        if (RpcContext.getContext().getRequest(HttpServletRequest.class) != null) {\n            System.out.println(&quot;Client IP address from RpcContext: &quot; + RpcContext.getContext().getRequest(HttpServletRequest.class).getRemoteAddr());\n        }\n        if (RpcContext.getContext().getResponse(HttpServletResponse.class) != null) {\n            System.out.println(&quot;Response object from RpcContext: &quot; + RpcContext.getContext().getResponse(HttpServletResponse.class));\n        }\n        return userService.getUser(id);\n    }\n\n    @POST\n    @Path(&quot;register&quot;)\n    public RegistrationResult registerUser(User user) {\n        return new RegistrationResult(userService.registerUser(user));\n    }\n}</code></pre><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:42:19.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:27:04.000Z",
    "updated_at": "2019-02-01T06:42:19.000Z",
    "published_at": "2019-02-01T06:42:19.000Z",
    "first_published_at": "2019-02-01T06:42:19.000Z",
    "word_count": 749,
    "cover": "",
    "description": "date: 2018-09-28 15:19:23tags: [&quot;Dubbo&quot;,&quot;DubboX&quot;]Dubbox是当当网基于阿里巴巴dubbo衍生出来的一个新版本，以下是在官网摘抄的相关特性：  支持REST风格远程调用（HTTP + JSON/XML)支...",
    "custom_description": "Dubbox是当当网基于阿里巴巴dubbo衍生出来的一个新版本，以下是在官网摘抄的相关特性：\n- 支持REST风格远程调用（HTTP + JSON/XML)\n- 支持基于Jackson的JSON序列化\n- 支持基于嵌入式Tomcat的HTTP remoting体系\n- 升级ZooKeeper",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224168,
    "slug": "dubbo-protocol-http",
    "title": "Ewei Dubbo自定义Http协议返回值过滤器",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-10-31 15:23:54<br />tags: [\"Dubbo\",\"Ewei\"]\n---\n\n公司将Dubbo又封装了一层，通过注解直接暴露Service接口，在序列化返回结果时，简单粗暴的将实体的所有非空属性全部序列化出来了，接口的返回体相当庞大，很是浪费资源。\n\n## 核心实现\n使用FastJson的`com.alibaba.fastjson.serializer.PropertyFilter`，在序列化时，排除相关的属性，核心代码如下：\n\n```java\nPropertyFilter profilter = new PropertyFilter(){\n    @Override\n    public boolean apply(Object object, String name, Object value) {\n        if(name.equalsIgnoreCase(\"password\")){\n            return false;  // 排除password 属性\n        }\n        return true;\n    }\n};\nserializer.addFilter(profilter);\n```\nV2接口基于Dubbo相关协议封装（JavaDoc：http://doc.ewei.ren/budo-dubbo-protocol-http/），在序列化接口返回信息时，没有做相关的配置；\n\n其核心序列化逻辑在`org.budo.dubbo.protocol.http.view.render.ViewRender`的`com.ewei.common.dubbo.http.view.render.EweiDubboHttpApiJsonViewRender`实现类中，见下图：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002305957-4fda94e6-ea46-4138-95b2-60c5a2abb9c9.png#align=left&display=inline&height=380&linkTarget=_blank&originHeight=408&originWidth=800&size=0&width=746)<br />\n现只需要在序列化之前，添加相关的PropertyFilter即可。\n\n```java\nserializer.addFilter(new XxxPropertyFilter());\n```\n\n### @ApiResponseFilter注解定义\n\n考虑到通用性和灵活性，每个接口的PropertyFilter的定义显然是不一样的，可以通过注解配置在接口方法上，然后在使用时读取注解配置，动态生成PropertyFilter对象。\n\n```java\n/**\n * 注解在V2接口上，规定接口返回结果JSON的序列化规则。\n * @author wwz\n * @version 1 (2018/10/23)\n * @since Java7\n */\n@Target({ ElementType.METHOD })\n@Retention(RetentionPolicy.RUNTIME)\n@Inherited\npublic @interface ApiResponseFilter {\n\n    /**\n     * 指定配置的序列化规则作用的实体类\n     * 当配置includeFields时，该属性必填\n     * @return\n     */\n    Class<?> clazz() default EmptyClazz.class;\n\n    /**\n     * 要排除的字段，多个用\",\"分割 (优先级0)\n     * @return\n     */\n    String ignoreFields() default \"\";\n\n    /**\n     * 要序列化的字段，多个用\",\"分割 (优先级1)\n     * @return\n     */\n    String includeFields() default \"\";\n\n    class EmptyClazz {}\n}\n```\n\n一般来说，一个@ApiResponseFilter，对应一个clazz，然而一个复杂的返回对象中，往往不止一个实体对象（存在嵌套关系），这时候就需要配置一组@ApiResponseFilter规则了。<br />\n下面通过组合注解的方式，将@ApiResponseFilter进行包装：\n\n```java\n/**\n * @author wwz\n * @version 1 (2018/10/23)\n * @since Java7\n * @see ApiResponseFilter\n */\n@Target({ ElementType.METHOD })\n@Retention(RetentionPolicy.RUNTIME)\n@Inherited\npublic @interface ApiResponseFilters {\n\n    ApiResponseFilter[] value();\n}\n```\n\n### 通用PropertyFilter定义\n\n```java\n/**\n * 自定义实现：指定序列化时只能包含哪些属性\n * @author wwz\n * @version 1 (2018/10/24)\n * @since Java7\n */\npublic class BudoJsonIncludeFieldFilter implements PropertyFilter {\n    private final static String[] PUBLIC_INCLUDE_FIELDS =//\n            {\"result\", \"status\", \"error\", \"error_code\", \"error_description\", \"empty\", \"list\", \"recordCount\"};\n    private Class<?> clazz;\n    private String[] includeFields;\n\n    public BudoJsonIncludeFieldFilter(Class<?> clazz, String... includeFields) {\n        this.clazz = clazz;\n        this.includeFields = includeFields;\n        this.assertionOfParameters();\n    }\n\n    public BudoJsonIncludeFieldFilter(Class<?> clazz, String includeFields) {\n        this.clazz = clazz;\n        this.includeFields = includeFields.split(\",\");\n        this.assertionOfParameters();\n    }\n\n    private void assertionOfParameters() {\n        if (null == clazz) {\n            throw new IllegalArgumentException(\"#1024 clazz is null.\");\n        }\n        if (null == includeFields || includeFields.length == 0) {\n            throw new IllegalArgumentException(\"#1024 includeFields is null.\");\n        }\n    }\n\n    @Override\n    public boolean apply(Object obj, String field, Object value) {\n        if (!StringUtil.equals(obj.getClass().getName(), clazz.getName())) {\n            return true;\n        }\n        for (String includeField : includeFields) {\n            includeField = StringUtil.trim(includeField);\n            if (StringUtil.equalsIgnoreCase(includeField, field)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\n```java\n/**\n * 自定义实现：指定序列化时需要排除哪些属性\n * @author wwz\n * @version 1 (2018/10/24)\n * @since Java7\n */\npublic class BudoJsonIgnoreFieldFilter implements PropertyFilter {\n    private Class<?> clazz;\n    private String[] ignoreFieldNames;\n\n    public BudoJsonIgnoreFieldFilter(String... ignoreFieldNames) {\n        this(null, ignoreFieldNames);\n    }\n\n    public BudoJsonIgnoreFieldFilter(Class<?> clazz, String... ignoreFieldNames) {\n        this.clazz = clazz;\n        this.ignoreFieldNames = ignoreFieldNames;\n        this.assertionOfParameters();\n    }\n\n    public BudoJsonIgnoreFieldFilter(String ignoreFieldNames) {\n        this(null, ignoreFieldNames);\n    }\n\n    public BudoJsonIgnoreFieldFilter(Class<?> clazz, String ignoreFieldNames) {\n        this.clazz = clazz;\n        this.ignoreFieldNames = ignoreFieldNames.split(\",\");\n        this.assertionOfParameters();\n    }\n\n    private void assertionOfParameters() {\n        if (null == ignoreFieldNames || ignoreFieldNames.length == 0) {\n            throw new IllegalArgumentException(\"#1024 ignoreFieldNames is null.\");\n        }\n    }\n\n    @Override\n    public boolean apply(Object obj, String field, Object value) {\n        String objClassName = obj.getClass().getName();\n        if (null != clazz &&//\n                !StringUtil.equals(objClassName, clazz.getName())) {\n            return true;\n        }\n\n        for (String ignoreField : ignoreFieldNames) {\n            ignoreField = StringUtil.trim(ignoreField);\n            if (StringUtil.equalsIgnoreCase(ignoreField, field)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n### ViewRender重构\n\nViewRender用于视图的渲染，是一个顶层的接口，其主要实现类有以下：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002305856-4a055e3f-fef6-4756-b181-1b74a9fa754d.png#align=left&display=inline&height=147&linkTarget=_blank&originHeight=152&originWidth=770&size=0&width=746)\n\n由于在渲染JSON数据时，需要获取到当前接口的配置信息（注解），目前的ViewRender还满足不了，重新定义后如下：\n\n```java\npublic interface ViewRender {\n    void renderView(ProtocolRequest request, ProtocolResponse response, Object result) throws Throwable;\n}\n\n// 添加Invocation参数\npublic interface ViewRender {\n    void renderView(ProtocolRequest request, ProtocolResponse response, Invocation invocation, Object result) throws Throwable;\n}\n```\n\n`com.alibaba.dubbo.rpc.Invocation`中包含RPC调用相关参数信息：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002305486-69735518-b6ce-4db9-ab1b-0773ce0cfdb2.png#align=left&display=inline&height=500&linkTarget=_blank&originHeight=500&originWidth=663&size=0&width=663)<br />\n可以通过getInvoker().getInterface()、getMethodName()、getParameterTypes()等信息获取到被调用接口的相关对象，从而反射获取@ApiResponseFilter配置。\n\n顶级ViewRender被重新定义后，相关的实现类也做响应的重构操作（这里不详细描述了，见ewei-group项目SVN提交：#80550）<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002306749-2aa5877d-a43f-4c2e-8a40-a2c4ef54ca06.png#align=left&display=inline&height=315&linkTarget=_blank&originHeight=602&originWidth=1425&size=0&width=746)\n\n### EweiDubboHttpApiJsonViewRender实现\n\n```java\n@Override\nprotected void doWriteResponse(ProtocolRequest protocolRequest, ProtocolResponse protocolResponse, Invocation invocation, Object result) throws IOException {\n    String json = this.serializeJsonString(invocation, result);\n    protocolResponse.write(new ByteArrayInputStream(json.getBytes()));\n}\n\nprivate String serializeJsonString(Invocation invocation, Object result) {\n    SerializeWriter serializeWriter = new SerializeWriter();\n\n    try {\n        JSONSerializer serializer = new JSONSerializer(serializeWriter);\n\n        if (FastJsonHibernatePropertyFilter.HAS_HIBERNATE) {\n            serializer.addFilter(FastJsonHibernatePropertyFilter.INSTANCE);\n        }\n        // 根据调用接口配置的@ApiResponseFilter注解，动态生成PropertyFilter\n        this.builderSerializerFilter(serializer, invocation);\n        serializer.setDateFormat(DATE_FORMAT);\n        serializer.config(SerializerFeature.WriteDateUseDateFormat, true);\n\n        serializer.write(result);\n\n        return serializeWriter.toString();\n    } finally {\n        serializeWriter.close();\n    }\n}\n\nprivate void builderSerializerFilter(JSONSerializer serializer, Invocation invocation) {\n    if (null == invocation) {\n        return;\n    }\n    List<ApiResponseFilter> apiResponseFilters = this.getMethodAnnotationWithApiResponseFilter(invocation);\n    if (CollectionUtil.isEmpty(apiResponseFilters)) {\n        return;\n    }\n    for (ApiResponseFilter apiResponseFilter : apiResponseFilters) {\n        Class<?> clazz = apiResponseFilter.clazz();\n        if (StringUtil.equals(clazz.getName(), ApiResponseFilter.EmptyClazz.class.getName())) {\n            clazz = null;\n        }\n        String ignoreFields = apiResponseFilter.ignoreFields();\n        String includeFields = apiResponseFilter.includeFields();\n\n        if (!StringUtil.isEmpty(ignoreFields)) {\n            serializer.addFilter(new BudoJsonIgnoreFieldFilter(clazz, ignoreFields));\n        }\n        if (!StringUtil.isEmpty(includeFields)) {\n            serializer.addFilter(new BudoJsonIncludeFieldFilter(clazz, includeFields));\n        }\n    }\n}\n\nprivate List<ApiResponseFilter> getMethodAnnotationWithApiResponseFilter(Invocation invocation) {\n    List<ApiResponseFilter> apiResponseFilterList = new ArrayList<>();\n\n    Invoker<?> invoker = invocation.getInvoker();\n    ApiResponseFilters apiResponseFilters = BudoReflectionUtil.getMethodAnnotation(invoker.getInterface(), //\n        invocation.getMethodName(), //\n        invocation.getParameterTypes(), //\n        ApiResponseFilters.class);\n    if (null != apiResponseFilters) {\n        ApiResponseFilter[] filters = apiResponseFilters.value();\n        if (!ArrayUtil.isEmpty(filters)) {\n            for (ApiResponseFilter filter : filters) {\n                apiResponseFilterList.add(filter);\n            }\n        }\n    }\n\n    ApiResponseFilter apiResponseFilter = BudoReflectionUtil.getMethodAnnotation(invoker.getInterface(), //\n        invocation.getMethodName(), //\n        invocation.getParameterTypes(), //\n        ApiResponseFilter.class);\n    if (null != apiResponseFilter) {\n        apiResponseFilterList.add(apiResponseFilter);\n    }\n    return apiResponseFilterList;\n}\n```\n\n## 测试\n\n定义一个测试用的JavaBean:\n\n```java\npublic class TestEntity {\n\n    private Integer id;\n    private String name;\n    private String key;\n    private TestEntity1 testEntity1;\n\n    //...\n}\n\npublic class TestEntity1 {\n\n    private String name;\n    private String value;\n\n    //...\n}\n```\n\n初始化数据：\n\n```java\nprivate TestEntity build() {\n    TestEntity testEntity = new TestEntity();\n    testEntity.setId(1);\n    testEntity.setName(\"name\");\n    testEntity.setKey(\"key\");\n\n    TestEntity1 testEntity1 = new TestEntity1();\n    testEntity1.setName(\"name1\");\n    testEntity1.setValue(\"value1\");\n    testEntity.setTestEntity1(testEntity1);\n    return testEntity;\n}\n```\n\n按照Open V2的方式定义测试接口，并测试@ApiResponseFilter注解\n\n```java\npublic interface OpenTestApiResponseFilterApi {\n\n    /**\n     * 不做任何限制\n     * {\n     *  \"result\": {\n     *    \"id\": 1,\n     *    \"key\": \"key\",\n     *    \"name\": \"name\",\n     *    \"testEntity1\": {\n     *      \"name\": \"name1\",\n     *      \"value\": \"value1\"\n     *    }\n     *  },\n     *  \"status\": 0\n     * }\n     * @return\n     */\n    public TestEntity test();\n\n    /**\n     * 限制返回结果中，TestEntity只能包含id,testEntity1两个字段\n     * {\n     *  \"result\": {\n     *    \"id\": 1,\n     *    \"testEntity1\": {\n     *      \"name\": \"name1\",\n     *      \"value\": \"value1\"\n     *    }\n     *  },\n     *  \"status\": 0\n     * }\n     * @return\n     */\n    @ApiResponseFilter(clazz = TestEntity.class, includeFields = \"id,testEntity1\")\n    public TestEntity test1();\n\n    /**\n     * 需要忽略的字段（不限制实体类）\n     * {\n     *  \"result\": {\n     *    \"id\": 1,\n     *    \"name\": \"name\",\n     *    \"testEntity1\": {\n     *      \"name\": \"name1\"\n     *    }\n     *  },\n     *  \"status\": 0\n     * }\n     * @return\n     */\n    @ApiResponseFilter(ignoreFields = \"key,value\")\n    public TestEntity test2();\n\n    /**\n     * 需要忽略的字段（TestEntity中）\n     * {\n     *  \"result\": {\n     *    \"id\": 1,\n     *    \"name\": \"name\",\n     *    \"testEntity1\": {\n     *      \"name\": \"name1\",\n     *      \"value\": \"value1\"\n     *    }\n     *  },\n     *  \"status\": 0\n     * }\n     * @return\n     */\n    @ApiResponseFilter(clazz = TestEntity.class, ignoreFields = \"key,value\")\n    public TestEntity test3();\n\n    /**\n     * 同时配置多个规则，将按照配置顺序依次添加相关的PropertyFilter\n     * {\n     * \"result\": {\n     *    \"key\": \"key\",\n     *    \"name\": \"name\",\n     *    \"testEntity1\": {\n     *      \"value\": \"value1\"\n     *    }\n     *  },\n     *  \"status\": 0\n     * }\n     * @return\n     */\n    @ApiResponseFilters({ //\n        @ApiResponseFilter(clazz = TestEntity.class, ignoreFields = \"id\"), //\n        @ApiResponseFilter(clazz = TestEntity1.class, ignoreFields = \"name\")\n    })\n    public TestEntity test4();\n}\n```\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-10-31 15:23:54</p><p>tags: [&quot;Dubbo&quot;,&quot;Ewei&quot;]</p><hr /><p><br /></p><p>公司将Dubbo又封装了一层，通过注解直接暴露Service接口，在序列化返回结果时，简单粗暴的将实体的所有非空属性全部序列化出来了，接口的返回体相当庞大，很是浪费资源。</p><p><br /></p><h2 id=\"09d3d0bd\">核心实现</h2><p>使用FastJson的<code>com.alibaba.fastjson.serializer.PropertyFilter</code>，在序列化时，排除相关的属性，核心代码如下：</p><p><br /></p><pre data-lang=\"java\"><code>PropertyFilter profilter = new PropertyFilter(){\n    @Override\n    public boolean apply(Object object, String name, Object value) {\n        if(name.equalsIgnoreCase(&quot;password&quot;)){\n            return false;  // 排除password 属性\n        }\n        return true;\n    }\n};\nserializer.addFilter(profilter);</code></pre><p>V2接口基于Dubbo相关协议封装（JavaDoc：http://doc.ewei.ren/budo-dubbo-protocol-http/），在序列化接口返回信息时，没有做相关的配置；</p><p><br /></p><p>其核心序列化逻辑在<code>org.budo.dubbo.protocol.http.view.render.ViewRender</code>的<code>com.ewei.common.dubbo.http.view.render.EweiDubboHttpApiJsonViewRender</code>实现类中，见下图：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002305957-4fda94e6-ea46-4138-95b2-60c5a2abb9c9.png#align=left&amp;display=inline&amp;height=380&amp;linkTarget=_blank&amp;originHeight=408&amp;originWidth=800&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n现只需要在序列化之前，添加相关的PropertyFilter即可。</p><p><br /></p><pre data-lang=\"java\"><code>serializer.addFilter(new XxxPropertyFilter());</code></pre><p><br /></p><h3 id=\"eb6729ac\">@ApiResponseFilter注解定义</h3><p><br /></p><p>考虑到通用性和灵活性，每个接口的PropertyFilter的定义显然是不一样的，可以通过注解配置在接口方法上，然后在使用时读取注解配置，动态生成PropertyFilter对象。</p><p><br /></p><pre data-lang=\"java\"><code>/**\n * 注解在V2接口上，规定接口返回结果JSON的序列化规则。\n * @author wwz\n * @version 1 (2018/10/23)\n * @since Java7\n */\n@Target({ ElementType.METHOD })\n@Retention(RetentionPolicy.RUNTIME)\n@Inherited\npublic @interface ApiResponseFilter {\n\n    /**\n     * 指定配置的序列化规则作用的实体类\n     * 当配置includeFields时，该属性必填\n     * @return\n     */\n    Class&lt;?&gt; clazz() default EmptyClazz.class;\n\n    /**\n     * 要排除的字段，多个用&quot;,&quot;分割 (优先级0)\n     * @return\n     */\n    String ignoreFields() default &quot;&quot;;\n\n    /**\n     * 要序列化的字段，多个用&quot;,&quot;分割 (优先级1)\n     * @return\n     */\n    String includeFields() default &quot;&quot;;\n\n    class EmptyClazz {}\n}</code></pre><p><br /></p><p>一般来说，一个@ApiResponseFilter，对应一个clazz，然而一个复杂的返回对象中，往往不止一个实体对象（存在嵌套关系），这时候就需要配置一组@ApiResponseFilter规则了。<br />\n下面通过组合注解的方式，将@ApiResponseFilter进行包装：</p><p><br /></p><pre data-lang=\"java\"><code>/**\n * @author wwz\n * @version 1 (2018/10/23)\n * @since Java7\n * @see ApiResponseFilter\n */\n@Target({ ElementType.METHOD })\n@Retention(RetentionPolicy.RUNTIME)\n@Inherited\npublic @interface ApiResponseFilters {\n\n    ApiResponseFilter[] value();\n}</code></pre><p><br /></p><h3 id=\"e5fa266a\">通用PropertyFilter定义</h3><p><br /></p><pre data-lang=\"java\"><code>/**\n * 自定义实现：指定序列化时只能包含哪些属性\n * @author wwz\n * @version 1 (2018/10/24)\n * @since Java7\n */\npublic class BudoJsonIncludeFieldFilter implements PropertyFilter {\n    private final static String[] PUBLIC_INCLUDE_FIELDS =//\n            {&quot;result&quot;, &quot;status&quot;, &quot;error&quot;, &quot;error_code&quot;, &quot;error_description&quot;, &quot;empty&quot;, &quot;list&quot;, &quot;recordCount&quot;};\n    private Class&lt;?&gt; clazz;\n    private String[] includeFields;\n\n    public BudoJsonIncludeFieldFilter(Class&lt;?&gt; clazz, String... includeFields) {\n        this.clazz = clazz;\n        this.includeFields = includeFields;\n        this.assertionOfParameters();\n    }\n\n    public BudoJsonIncludeFieldFilter(Class&lt;?&gt; clazz, String includeFields) {\n        this.clazz = clazz;\n        this.includeFields = includeFields.split(&quot;,&quot;);\n        this.assertionOfParameters();\n    }\n\n    private void assertionOfParameters() {\n        if (null == clazz) {\n            throw new IllegalArgumentException(&quot;#1024 clazz is null.&quot;);\n        }\n        if (null == includeFields || includeFields.length == 0) {\n            throw new IllegalArgumentException(&quot;#1024 includeFields is null.&quot;);\n        }\n    }\n\n    @Override\n    public boolean apply(Object obj, String field, Object value) {\n        if (!StringUtil.equals(obj.getClass().getName(), clazz.getName())) {\n            return true;\n        }\n        for (String includeField : includeFields) {\n            includeField = StringUtil.trim(includeField);\n            if (StringUtil.equalsIgnoreCase(includeField, field)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}</code></pre><p><br /></p><pre data-lang=\"java\"><code>/**\n * 自定义实现：指定序列化时需要排除哪些属性\n * @author wwz\n * @version 1 (2018/10/24)\n * @since Java7\n */\npublic class BudoJsonIgnoreFieldFilter implements PropertyFilter {\n    private Class&lt;?&gt; clazz;\n    private String[] ignoreFieldNames;\n\n    public BudoJsonIgnoreFieldFilter(String... ignoreFieldNames) {\n        this(null, ignoreFieldNames);\n    }\n\n    public BudoJsonIgnoreFieldFilter(Class&lt;?&gt; clazz, String... ignoreFieldNames) {\n        this.clazz = clazz;\n        this.ignoreFieldNames = ignoreFieldNames;\n        this.assertionOfParameters();\n    }\n\n    public BudoJsonIgnoreFieldFilter(String ignoreFieldNames) {\n        this(null, ignoreFieldNames);\n    }\n\n    public BudoJsonIgnoreFieldFilter(Class&lt;?&gt; clazz, String ignoreFieldNames) {\n        this.clazz = clazz;\n        this.ignoreFieldNames = ignoreFieldNames.split(&quot;,&quot;);\n        this.assertionOfParameters();\n    }\n\n    private void assertionOfParameters() {\n        if (null == ignoreFieldNames || ignoreFieldNames.length == 0) {\n            throw new IllegalArgumentException(&quot;#1024 ignoreFieldNames is null.&quot;);\n        }\n    }\n\n    @Override\n    public boolean apply(Object obj, String field, Object value) {\n        String objClassName = obj.getClass().getName();\n        if (null != clazz &amp;&amp;//\n                !StringUtil.equals(objClassName, clazz.getName())) {\n            return true;\n        }\n\n        for (String ignoreField : ignoreFieldNames) {\n            ignoreField = StringUtil.trim(ignoreField);\n            if (StringUtil.equalsIgnoreCase(ignoreField, field)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}</code></pre><p><br /></p><h3 id=\"e19c779a\">ViewRender重构</h3><p><br /></p><p>ViewRender用于视图的渲染，是一个顶层的接口，其主要实现类有以下：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002305856-4a055e3f-fef6-4756-b181-1b74a9fa754d.png#align=left&amp;display=inline&amp;height=147&amp;linkTarget=_blank&amp;originHeight=152&amp;originWidth=770&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>由于在渲染JSON数据时，需要获取到当前接口的配置信息（注解），目前的ViewRender还满足不了，重新定义后如下：</p><p><br /></p><pre data-lang=\"java\"><code>public interface ViewRender {\n    void renderView(ProtocolRequest request, ProtocolResponse response, Object result) throws Throwable;\n}\n\n// 添加Invocation参数\npublic interface ViewRender {\n    void renderView(ProtocolRequest request, ProtocolResponse response, Invocation invocation, Object result) throws Throwable;\n}</code></pre><p><br /></p><p><code>com.alibaba.dubbo.rpc.Invocation</code>中包含RPC调用相关参数信息：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002305486-69735518-b6ce-4db9-ab1b-0773ce0cfdb2.png#align=left&amp;display=inline&amp;height=500&amp;linkTarget=_blank&amp;originHeight=500&amp;originWidth=663&amp;size=0&amp;width=663\" style=\"max-width: 600px; width: 663px;\" /><br />\n可以通过getInvoker().getInterface()、getMethodName()、getParameterTypes()等信息获取到被调用接口的相关对象，从而反射获取@ApiResponseFilter配置。</p><p><br /></p><p>顶级ViewRender被重新定义后，相关的实现类也做响应的重构操作（这里不详细描述了，见ewei-group项目SVN提交：#80550）<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002306749-2aa5877d-a43f-4c2e-8a40-a2c4ef54ca06.png#align=left&amp;display=inline&amp;height=315&amp;linkTarget=_blank&amp;originHeight=602&amp;originWidth=1425&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"b6f9ace7\">EweiDubboHttpApiJsonViewRender实现</h3><p><br /></p><pre data-lang=\"java\"><code>@Override\nprotected void doWriteResponse(ProtocolRequest protocolRequest, ProtocolResponse protocolResponse, Invocation invocation, Object result) throws IOException {\n    String json = this.serializeJsonString(invocation, result);\n    protocolResponse.write(new ByteArrayInputStream(json.getBytes()));\n}\n\nprivate String serializeJsonString(Invocation invocation, Object result) {\n    SerializeWriter serializeWriter = new SerializeWriter();\n\n    try {\n        JSONSerializer serializer = new JSONSerializer(serializeWriter);\n\n        if (FastJsonHibernatePropertyFilter.HAS_HIBERNATE) {\n            serializer.addFilter(FastJsonHibernatePropertyFilter.INSTANCE);\n        }\n        // 根据调用接口配置的@ApiResponseFilter注解，动态生成PropertyFilter\n        this.builderSerializerFilter(serializer, invocation);\n        serializer.setDateFormat(DATE_FORMAT);\n        serializer.config(SerializerFeature.WriteDateUseDateFormat, true);\n\n        serializer.write(result);\n\n        return serializeWriter.toString();\n    } finally {\n        serializeWriter.close();\n    }\n}\n\nprivate void builderSerializerFilter(JSONSerializer serializer, Invocation invocation) {\n    if (null == invocation) {\n        return;\n    }\n    List&lt;ApiResponseFilter&gt; apiResponseFilters = this.getMethodAnnotationWithApiResponseFilter(invocation);\n    if (CollectionUtil.isEmpty(apiResponseFilters)) {\n        return;\n    }\n    for (ApiResponseFilter apiResponseFilter : apiResponseFilters) {\n        Class&lt;?&gt; clazz = apiResponseFilter.clazz();\n        if (StringUtil.equals(clazz.getName(), ApiResponseFilter.EmptyClazz.class.getName())) {\n            clazz = null;\n        }\n        String ignoreFields = apiResponseFilter.ignoreFields();\n        String includeFields = apiResponseFilter.includeFields();\n\n        if (!StringUtil.isEmpty(ignoreFields)) {\n            serializer.addFilter(new BudoJsonIgnoreFieldFilter(clazz, ignoreFields));\n        }\n        if (!StringUtil.isEmpty(includeFields)) {\n            serializer.addFilter(new BudoJsonIncludeFieldFilter(clazz, includeFields));\n        }\n    }\n}\n\nprivate List&lt;ApiResponseFilter&gt; getMethodAnnotationWithApiResponseFilter(Invocation invocation) {\n    List&lt;ApiResponseFilter&gt; apiResponseFilterList = new ArrayList&lt;&gt;();\n\n    Invoker&lt;?&gt; invoker = invocation.getInvoker();\n    ApiResponseFilters apiResponseFilters = BudoReflectionUtil.getMethodAnnotation(invoker.getInterface(), //\n        invocation.getMethodName(), //\n        invocation.getParameterTypes(), //\n        ApiResponseFilters.class);\n    if (null != apiResponseFilters) {\n        ApiResponseFilter[] filters = apiResponseFilters.value();\n        if (!ArrayUtil.isEmpty(filters)) {\n            for (ApiResponseFilter filter : filters) {\n                apiResponseFilterList.add(filter);\n            }\n        }\n    }\n\n    ApiResponseFilter apiResponseFilter = BudoReflectionUtil.getMethodAnnotation(invoker.getInterface(), //\n        invocation.getMethodName(), //\n        invocation.getParameterTypes(), //\n        ApiResponseFilter.class);\n    if (null != apiResponseFilter) {\n        apiResponseFilterList.add(apiResponseFilter);\n    }\n    return apiResponseFilterList;\n}</code></pre><p><br /></p><h2 id=\"db06c78d\">测试</h2><p><br /></p><p>定义一个测试用的JavaBean:</p><p><br /></p><pre data-lang=\"java\"><code>public class TestEntity {\n\n    private Integer id;\n    private String name;\n    private String key;\n    private TestEntity1 testEntity1;\n\n    //...\n}\n\npublic class TestEntity1 {\n\n    private String name;\n    private String value;\n\n    //...\n}</code></pre><p><br /></p><p>初始化数据：</p><p><br /></p><pre data-lang=\"java\"><code>private TestEntity build() {\n    TestEntity testEntity = new TestEntity();\n    testEntity.setId(1);\n    testEntity.setName(&quot;name&quot;);\n    testEntity.setKey(&quot;key&quot;);\n\n    TestEntity1 testEntity1 = new TestEntity1();\n    testEntity1.setName(&quot;name1&quot;);\n    testEntity1.setValue(&quot;value1&quot;);\n    testEntity.setTestEntity1(testEntity1);\n    return testEntity;\n}</code></pre><p><br /></p><p>按照Open V2的方式定义测试接口，并测试@ApiResponseFilter注解</p><p><br /></p><pre data-lang=\"java\"><code>public interface OpenTestApiResponseFilterApi {\n\n    /**\n     * 不做任何限制\n     * {\n     *  &quot;result&quot;: {\n     *    &quot;id&quot;: 1,\n     *    &quot;key&quot;: &quot;key&quot;,\n     *    &quot;name&quot;: &quot;name&quot;,\n     *    &quot;testEntity1&quot;: {\n     *      &quot;name&quot;: &quot;name1&quot;,\n     *      &quot;value&quot;: &quot;value1&quot;\n     *    }\n     *  },\n     *  &quot;status&quot;: 0\n     * }\n     * @return\n     */\n    public TestEntity test();\n\n    /**\n     * 限制返回结果中，TestEntity只能包含id,testEntity1两个字段\n     * {\n     *  &quot;result&quot;: {\n     *    &quot;id&quot;: 1,\n     *    &quot;testEntity1&quot;: {\n     *      &quot;name&quot;: &quot;name1&quot;,\n     *      &quot;value&quot;: &quot;value1&quot;\n     *    }\n     *  },\n     *  &quot;status&quot;: 0\n     * }\n     * @return\n     */\n    @ApiResponseFilter(clazz = TestEntity.class, includeFields = &quot;id,testEntity1&quot;)\n    public TestEntity test1();\n\n    /**\n     * 需要忽略的字段（不限制实体类）\n     * {\n     *  &quot;result&quot;: {\n     *    &quot;id&quot;: 1,\n     *    &quot;name&quot;: &quot;name&quot;,\n     *    &quot;testEntity1&quot;: {\n     *      &quot;name&quot;: &quot;name1&quot;\n     *    }\n     *  },\n     *  &quot;status&quot;: 0\n     * }\n     * @return\n     */\n    @ApiResponseFilter(ignoreFields = &quot;key,value&quot;)\n    public TestEntity test2();\n\n    /**\n     * 需要忽略的字段（TestEntity中）\n     * {\n     *  &quot;result&quot;: {\n     *    &quot;id&quot;: 1,\n     *    &quot;name&quot;: &quot;name&quot;,\n     *    &quot;testEntity1&quot;: {\n     *      &quot;name&quot;: &quot;name1&quot;,\n     *      &quot;value&quot;: &quot;value1&quot;\n     *    }\n     *  },\n     *  &quot;status&quot;: 0\n     * }\n     * @return\n     */\n    @ApiResponseFilter(clazz = TestEntity.class, ignoreFields = &quot;key,value&quot;)\n    public TestEntity test3();\n\n    /**\n     * 同时配置多个规则，将按照配置顺序依次添加相关的PropertyFilter\n     * {\n     * &quot;result&quot;: {\n     *    &quot;key&quot;: &quot;key&quot;,\n     *    &quot;name&quot;: &quot;name&quot;,\n     *    &quot;testEntity1&quot;: {\n     *      &quot;value&quot;: &quot;value1&quot;\n     *    }\n     *  },\n     *  &quot;status&quot;: 0\n     * }\n     * @return\n     */\n    @ApiResponseFilters({ //\n        @ApiResponseFilter(clazz = TestEntity.class, ignoreFields = &quot;id&quot;), //\n        @ApiResponseFilter(clazz = TestEntity1.class, ignoreFields = &quot;name&quot;)\n    })\n    public TestEntity test4();\n}</code></pre><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:26:33.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:23:02.000Z",
    "updated_at": "2019-02-01T06:26:33.000Z",
    "published_at": "2019-02-01T06:26:33.000Z",
    "first_published_at": "2019-02-01T06:26:33.000Z",
    "word_count": 1715,
    "cover": "",
    "description": "date: 2018-10-31 15:23:54tags: [&quot;Dubbo&quot;,&quot;Ewei&quot;]公司将Dubbo又封装了一层，通过注解直接暴露Service接口，在序列化返回结果时，简单粗暴的将实体的所有非空属性全部序列化出来了，接口的返回体相当庞大，很是...",
    "custom_description": "目前的Open v2接口在序列化返回结果时，简单粗暴的将实体的所有非空属性全部序列化出来了，接口的返回体相当庞大，很是浪费资源。",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224154,
    "slug": "docker-deploy-springboot",
    "title": "使用Docker容器部署SpringBoot项目",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-12-26<br />tags: [Docker,SpringBoot]\n---\n\n## Docker简介\n\nDocker是基于Go语言实现的云开源项目，诞生于2013年初，最初发起者是dotClouw公司。Docker 自开源后受到广泛的关注和讨论，目前已有多个相关项目，逐断形成了围Docker的生态体系。dotCloud 公司后来也改名为Docker Ine。<br />\nDocker是一个开源的容器引擎，它有助于更快地交付应用。 Docker可将应用程序和基础设施层隔离，并且能将基础设施当作程序一样进行管理。使用 Docker可更快地打包、测试以及部署应用程序，并可以缩短从编写到部署运行代码的周期。\n\n> 官网地址：([https://docs.docker.com/](https://docs.docker.com/)) 中文：([http://www.docker.org.cn/](http://www.docker.org.cn/))\n\n\n## Docker架构\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002040181-477047bd-f245-4abc-ab0a-ce82010df6df.png#align=left&display=inline&height=200&linkTarget=_blank&originHeight=200&originWidth=386&size=0&width=386)\n\n**`Docker daemon`**：运行在宿主机(DOCKER-HOST)的后台进程，可通过 Docker 客户端与之通信。<br />\n**`Images`**：一个只读的镜像模板，可以自己创建一个镜像也可以从网站上下载镜像供自己使用，镜像包含了一个RFS，一个镜像可以创建很多容器。<br />\n**`Container`**：由Docker Client通过镜像创建的实例，用户在容器中运行应用，一旦创建后就可以看做是一个简单的RFS，每个应用运行在隔离的容器中，享用独自的权限，用户，网络。确保安全与互相干扰\u000b两者在创建后，都是一堆layer的统一视角，唯一的却别是镜像最上面那一层是只读的，不可以修改，但是容器最上面一层是rw的，提供给用户操作。<br />\n**`Repository`**：镜像仓库。\n\n## Docker VS 传统虚拟机\nDocker作为一种轻量级的虚拟化方式，Docker在运行应用上跟传统的虚拟机方式相比具有显著优势： \n* Docker容器很快，启动和停止可以在秒级实现，这相比传统的虚拟机方式要快得多。\n* Docker容器对系统资源需求很少，一台主机上可以同时运行数千个Docker容器。\n* Docker通过类似Git的操作来方便用户获取、分发和更新应用镜像，指令简明，学习成本较低。\n* Docker通过Dockerfile配置文件来支持灵活的自动化创建和部署机制，提高工作效率。\n| 特征 | Docker | 虚拟机 |\n| :---: | :---: | :---: |\n| 启动速度 | 秒级 | 分钟级 |\n| 硬盘占用 | 一般为MB级 | 一般为GB级 |\n| 性能 | 接近原生 | 低于原生 |\n| 支持量 | 单机支持上千个容器 | 一般几十个 |\n| 隔离性 | 完全隔离 | 完全隔离 |\n\n\n## Docker环境安装\n> Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）\n\n\nDocker要求`Linux内核版本在3.10以上`，本文中使用的是`CentOS 7.x`进行安装。\n\n### 检查内核版本\n```bash\nuname -r\n3.10.0-957.1.3.el7.x86_64\n```\n\n### 更新yum包\n确保使用`ROOT权限`进行操作，否则可能导致不可预知问题。\n```bash\nyum -y update\n```\n\n### 卸载旧版本\n若未安装过，忽略该步骤\n```bash\nyum remove docker docker-common docker-selinux docker-engine\n```\n\n### 安装依赖包\nyum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的\n```bash\nyum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n### 设置yum源\n```bash\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n### 查看yum源中可供安装的版本\n```bash\nyum list docker-ce --showduplicates | sort -r\n```\n\n### 安装Docker\n不指定版本，默认安装最新的stable版\n```bash\nsudo yum install -y docker-ce\n```\n\n### 启动 & 加入开机启动\n```bash\nsystemctl start docker\nsystemctl enable docker\n```\n\n### 验证Version\n```bash\ndocker version\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002041004-31dc90de-ba17-40a2-abee-f0bf574d6496.png#align=left&display=inline&height=525&linkTarget=_blank&originHeight=766&originWidth=1088&size=0&width=746)<br />\n出现如上图提示，则表示Docker安装成功。\n\n## Docker镜像相关命令\n### 搜索镜像\n```bash\ndocker search java\n```\n\n搜索存放在Docker Hub中的镜像。<br />\nDocker Hub 官网： [https://hub.docker.com/search?q=java&type=image](https://hub.docker.com/search?q=java&type=image)\n\n### 下载镜像\n```bash\ndocker pull java:8\n```\n\n执行该命令后，Docker会从Docker Hub中的java仓库下载指定版本的Java镜像。\n\n### 查看已安装镜像\n```bash\ndocker images\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002040512-996155c1-481c-4b88-add7-5b920575925e.png#align=left&display=inline&height=311&linkTarget=_blank&originHeight=367&originWidth=881&size=0&width=746)\n\n### 删除镜像\n使用IMAGE ID进行删除，参考上一个命令\n```bash\ndocker rmi d23bdf5b1b1b\n```\n\n### 附：阿里云镜像加速服务\n[https://cr.console.aliyun.com/cn-hangzhou/mirrors](https://cr.console.aliyun.com/cn-hangzhou/mirrors)\n\n## Docker容器相关命令\n### 启动容器\n```bash\ndocker run -d -p 81:80 nginx\n```\n\n`-d` 后台运行<br />\n`-p` 宿主机端口:容器端口 #开放容器端口到宿主机端口\n\n需要注意的是，使用docker run命令启动容器时，若本地没有相关镜像，Docker会从Docker Hub中自动下载相关镜像并启动<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002040477-d2faf59a-9430-448d-be7b-ac70a83190e0.png#align=left&display=inline&height=202&linkTarget=_blank&originHeight=217&originWidth=803&size=0&width=746)\n\n访问 `http://Docker宿主机IP:81/`，将会看到Nginx的主界面：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002040934-b2687b58-8fd2-41b0-a449-12eb3904f532.png#align=left&display=inline&height=343&linkTarget=_blank&originHeight=377&originWidth=821&size=0&width=746)\n\n### 查看运行中的容器\n```bash\ndocker ps\n```\n\n### 查看指定容器详细信息\n```bash\ndocker inspect b3e76480a94c\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002040915-38e8a885-a0c6-4729-b59c-759925e93cbf.png#align=left&display=inline&height=368&linkTarget=_blank&originHeight=508&originWidth=1031&size=0&width=746)\n\n## 构建自定义Docker镜像\n为方便演示，这里创建一个简单的SpringBoot项目（docker-springboot-example）\n```java\npackage com.wuwenze.dockerspringbootexample;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@RestController\n@SpringBootApplication\npublic class DockerSpringbootExampleApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DockerSpringbootExampleApplication.class, args);\n    }\n\n    @GetMapping(\"/sayHello\")\n    public @ResponseBody ResponseEntity<?> sayHello() {\n        return ResponseEntity.ok(\"Hello Docker & SpringBoot\");\n    }\n}\n```\n\n### 打包插件配置\n```xml\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n    <configuration>\n        <mainClass>com.wuwenze.dockerspringbootexample.DockerSpringbootExampleApplication</mainClass>\n    </configuration>\n    <executions>\n        <execution>\n            <goals>\n                <goal>repackage</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n### 创建Dockerfile\n文件暂时存放在Springboot项目的 src/main/resources 中，后面会用到。\n```java\n### 指定基础镜像\nFROM java:8\n\n### 复制文件到容器\nADD docker-springboot-example-0.0.1-SNAPSHOT.jar /docker-springboot-example.jar\n\nEXPOSE 8080\n\n### 配置容器启动后执行的命令\nENTRYPOINT [\"java\",\"-jar\",\"/docker-springboot-example.jar\"]\n```\n\n### 打包jar并上传到Linux服务器中\n```bash\nmvn clean package\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002041761-e8c6fae7-c293-43e8-8d94-15e3cee9e512.png#align=left&display=inline&height=570&linkTarget=_blank&originHeight=1007&originWidth=1317&size=0&width=746)\n\n```bash\nmkdir /usr/local/docker-app\ncd /usr/local/docker-app\nrz docker-springboot-example-0.0.1-SNAPSHOT.jar # 上传jar文件\nrz Dockerfile # 上传Dockerfile文件\n```\n\n### 构建镜像\n```bash\ndocker build -t docker-springboot-example .\n# 语法： docker build -t 镜像名[:标签] Dockerfile所在位置\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549002040704-c9b80cff-5e19-4536-ab13-e9e7514dd3ac.png#align=left&display=inline&height=334&linkTarget=_blank&originHeight=457&originWidth=1022&size=0&width=746)\n\n### 启动镜像\n```bash\ndocker run -p 8080:8080 docker-springboot-example\n```\n\n这里没有加`-d`参数，直接前台启动了，可以看到实时打印的控制台信息<br />\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-12-26</p><p>tags: [Docker,SpringBoot]</p><hr /><p><br /></p><h2 id=\"316d2f70\">Docker简介</h2><p><br /></p><p>Docker是基于Go语言实现的云开源项目，诞生于2013年初，最初发起者是dotClouw公司。Docker 自开源后受到广泛的关注和讨论，目前已有多个相关项目，逐断形成了围Docker的生态体系。dotCloud 公司后来也改名为Docker Ine。<br />\nDocker是一个开源的容器引擎，它有助于更快地交付应用。 Docker可将应用程序和基础设施层隔离，并且能将基础设施当作程序一样进行管理。使用 Docker可更快地打包、测试以及部署应用程序，并可以缩短从编写到部署运行代码的周期。</p><p><br /></p><blockquote><p>官网地址：(<a href=\"https://docs.docker.com/\" target=\"_blank\">https://docs.docker.com/</a>) 中文：(<a href=\"http://www.docker.org.cn/\" target=\"_blank\">http://www.docker.org.cn/</a>)</p></blockquote><p><br /></p><h2 id=\"7ad6d0c7\">Docker架构</h2><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002040181-477047bd-f245-4abc-ab0a-ce82010df6df.png#align=left&amp;display=inline&amp;height=200&amp;linkTarget=_blank&amp;originHeight=200&amp;originWidth=386&amp;size=0&amp;width=386\" style=\"max-width: 600px; width: 386px;\" /></p><p><br /></p><p><strong><code>Docker daemon</code></strong>：运行在宿主机(DOCKER-HOST)的后台进程，可通过 Docker 客户端与之通信。<br />\n<strong><code>Images</code></strong>：一个只读的镜像模板，可以自己创建一个镜像也可以从网站上下载镜像供自己使用，镜像包含了一个RFS，一个镜像可以创建很多容器。<br />\n<strong><code>Container</code></strong>：由Docker Client通过镜像创建的实例，用户在容器中运行应用，一旦创建后就可以看做是一个简单的RFS，每个应用运行在隔离的容器中，享用独自的权限，用户，网络。确保安全与互相干扰\u000b两者在创建后，都是一堆layer的统一视角，唯一的却别是镜像最上面那一层是只读的，不可以修改，但是容器最上面一层是rw的，提供给用户操作。<br />\n<strong><code>Repository</code></strong>：镜像仓库。</p><p><br /></p><h2 id=\"7536060f\">Docker VS 传统虚拟机</h2><p>Docker作为一种轻量级的虚拟化方式，Docker在运行应用上跟传统的虚拟机方式相比具有显著优势： </p><ul><li>Docker容器很快，启动和停止可以在秒级实现，这相比传统的虚拟机方式要快得多。</li></ul><ul><li>Docker容器对系统资源需求很少，一台主机上可以同时运行数千个Docker容器。</li></ul><ul><li>Docker通过类似Git的操作来方便用户获取、分发和更新应用镜像，指令简明，学习成本较低。</li><li>Docker通过Dockerfile配置文件来支持灵活的自动化创建和部署机制，提高工作效率。</li></ul><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"240\"></col><col width=\"240\"></col><col width=\"241\"></col></colgroup><tbody><tr><td style=\"text-align: center;\">特征</td><td style=\"text-align: center;\">Docker</td><td style=\"text-align: center;\">虚拟机</td></tr></tbody><tbody><tr><td style=\"text-align: center;\">启动速度</td><td style=\"text-align: center;\">秒级</td><td style=\"text-align: center;\">分钟级</td></tr><tr><td style=\"text-align: center;\">硬盘占用</td><td style=\"text-align: center;\">一般为MB级</td><td style=\"text-align: center;\">一般为GB级</td></tr><tr><td style=\"text-align: center;\">性能</td><td style=\"text-align: center;\">接近原生</td><td style=\"text-align: center;\">低于原生</td></tr><tr><td style=\"text-align: center;\">支持量</td><td style=\"text-align: center;\">单机支持上千个容器</td><td style=\"text-align: center;\">一般几十个</td></tr><tr><td style=\"text-align: center;\">隔离性</td><td style=\"text-align: center;\">完全隔离</td><td style=\"text-align: center;\">完全隔离</td></tr></tbody></table><p><br /></p><h2 id=\"2fc79eb4\">Docker环境安装</h2><blockquote><p>Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）</p></blockquote><p><br /></p><p>Docker要求<code>Linux内核版本在3.10以上</code>，本文中使用的是<code>CentOS 7.x</code>进行安装。</p><p><br /></p><h3 id=\"d34c2031\">检查内核版本</h3><pre data-lang=\"bash\"><code>uname -r\n3.10.0-957.1.3.el7.x86_64</code></pre><p><br /></p><h3 id=\"9fc9e54f\">更新yum包</h3><p>确保使用<code>ROOT权限</code>进行操作，否则可能导致不可预知问题。</p><pre data-lang=\"bash\"><code>yum -y update</code></pre><p><br /></p><h3 id=\"0e1b60e2\">卸载旧版本</h3><p>若未安装过，忽略该步骤</p><pre data-lang=\"bash\"><code>yum remove docker docker-common docker-selinux docker-engine</code></pre><p><br /></p><h3 id=\"415f7ef9\">安装依赖包</h3><p>yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><pre data-lang=\"bash\"><code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre><p><br /></p><h3 id=\"f8893899\">设置yum源</h3><pre data-lang=\"bash\"><code>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p><br /></p><h3 id=\"dc517688\">查看yum源中可供安装的版本</h3><pre data-lang=\"bash\"><code>yum list docker-ce --showduplicates | sort -r</code></pre><p><br /></p><h3 id=\"a7b621eb\">安装Docker</h3><p>不指定版本，默认安装最新的stable版</p><pre data-lang=\"bash\"><code>sudo yum install -y docker-ce</code></pre><p><br /></p><h3 id=\"a3ba71eb\">启动 &amp; 加入开机启动</h3><pre data-lang=\"bash\"><code>systemctl start docker\nsystemctl enable docker</code></pre><p><br /></p><h3 id=\"aa38c351\">验证Version</h3><pre data-lang=\"bash\"><code>docker version</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002041004-31dc90de-ba17-40a2-abee-f0bf574d6496.png#align=left&amp;display=inline&amp;height=525&amp;linkTarget=_blank&amp;originHeight=766&amp;originWidth=1088&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n出现如上图提示，则表示Docker安装成功。</p><p><br /></p><h2 id=\"25549f22\">Docker镜像相关命令</h2><h3 id=\"88d463d0\">搜索镜像</h3><pre data-lang=\"bash\"><code>docker search java</code></pre><p><br /></p><p>搜索存放在Docker Hub中的镜像。<br />\nDocker Hub 官网： <a href=\"https://hub.docker.com/search?q=java&amp;type=image\" target=\"_blank\">https://hub.docker.com/search?q=java&amp;type=image</a></p><p><br /></p><h3 id=\"22659ffa\">下载镜像</h3><pre data-lang=\"bash\"><code>docker pull java:8</code></pre><p><br /></p><p>执行该命令后，Docker会从Docker Hub中的java仓库下载指定版本的Java镜像。</p><p><br /></p><h3 id=\"e719384c\">查看已安装镜像</h3><pre data-lang=\"bash\"><code>docker images</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002040512-996155c1-481c-4b88-add7-5b920575925e.png#align=left&amp;display=inline&amp;height=311&amp;linkTarget=_blank&amp;originHeight=367&amp;originWidth=881&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"0306ea19\">删除镜像</h3><p>使用IMAGE ID进行删除，参考上一个命令</p><pre data-lang=\"bash\"><code>docker rmi d23bdf5b1b1b</code></pre><p><br /></p><h3 id=\"2903d334\">附：阿里云镜像加速服务</h3><p><a href=\"https://cr.console.aliyun.com/cn-hangzhou/mirrors\" target=\"_blank\">https://cr.console.aliyun.com/cn-hangzhou/mirrors</a></p><p><br /></p><h2 id=\"73a19c78\">Docker容器相关命令</h2><h3 id=\"b093c1c3\">启动容器</h3><pre data-lang=\"bash\"><code>docker run -d -p 81:80 nginx</code></pre><p><br /></p><p><code>-d</code> 后台运行<br />\n<code>-p</code> 宿主机端口:容器端口 #开放容器端口到宿主机端口</p><p><br /></p><p>需要注意的是，使用docker run命令启动容器时，若本地没有相关镜像，Docker会从Docker Hub中自动下载相关镜像并启动<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002040477-d2faf59a-9430-448d-be7b-ac70a83190e0.png#align=left&amp;display=inline&amp;height=202&amp;linkTarget=_blank&amp;originHeight=217&amp;originWidth=803&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>访问 <code>http://Docker宿主机IP:81/</code>，将会看到Nginx的主界面：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002040934-b2687b58-8fd2-41b0-a449-12eb3904f532.png#align=left&amp;display=inline&amp;height=343&amp;linkTarget=_blank&amp;originHeight=377&amp;originWidth=821&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"114bf177\">查看运行中的容器</h3><pre data-lang=\"bash\"><code>docker ps</code></pre><p><br /></p><h3 id=\"73b9c364\">查看指定容器详细信息</h3><pre data-lang=\"bash\"><code>docker inspect b3e76480a94c</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002040915-38e8a885-a0c6-4729-b59c-759925e93cbf.png#align=left&amp;display=inline&amp;height=368&amp;linkTarget=_blank&amp;originHeight=508&amp;originWidth=1031&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"af3227f4\">构建自定义Docker镜像</h2><p>为方便演示，这里创建一个简单的SpringBoot项目（docker-springboot-example）</p><pre data-lang=\"java\"><code>package com.wuwenze.dockerspringbootexample;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@RestController\n@SpringBootApplication\npublic class DockerSpringbootExampleApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DockerSpringbootExampleApplication.class, args);\n    }\n\n    @GetMapping(&quot;/sayHello&quot;)\n    public @ResponseBody ResponseEntity&lt;?&gt; sayHello() {\n        return ResponseEntity.ok(&quot;Hello Docker &amp; SpringBoot&quot;);\n    }\n}</code></pre><p><br /></p><h3 id=\"8b6e6a9a\">打包插件配置</h3><pre data-lang=\"xml\"><code>&lt;plugin&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n    &lt;configuration&gt;\n        &lt;mainClass&gt;com.wuwenze.dockerspringbootexample.DockerSpringbootExampleApplication&lt;/mainClass&gt;\n    &lt;/configuration&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;repackage&lt;/goal&gt;\n            &lt;/goals&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n&lt;/plugin&gt;</code></pre><p><br /></p><h3 id=\"6aca243d\">创建Dockerfile</h3><p>文件暂时存放在Springboot项目的 src/main/resources 中，后面会用到。</p><pre data-lang=\"java\"><code>### 指定基础镜像\nFROM java:8\n\n### 复制文件到容器\nADD docker-springboot-example-0.0.1-SNAPSHOT.jar /docker-springboot-example.jar\n\nEXPOSE 8080\n\n### 配置容器启动后执行的命令\nENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/docker-springboot-example.jar&quot;]</code></pre><p><br /></p><h3 id=\"4f21e451\">打包jar并上传到Linux服务器中</h3><pre data-lang=\"bash\"><code>mvn clean package</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002041761-e8c6fae7-c293-43e8-8d94-15e3cee9e512.png#align=left&amp;display=inline&amp;height=570&amp;linkTarget=_blank&amp;originHeight=1007&amp;originWidth=1317&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><pre data-lang=\"bash\"><code>mkdir /usr/local/docker-app\ncd /usr/local/docker-app\nrz docker-springboot-example-0.0.1-SNAPSHOT.jar # 上传jar文件\nrz Dockerfile # 上传Dockerfile文件</code></pre><p><br /></p><h3 id=\"0cd7fc52\">构建镜像</h3><pre data-lang=\"bash\"><code>docker build -t docker-springboot-example .\n# 语法： docker build -t 镜像名[:标签] Dockerfile所在位置</code></pre><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549002040704-c9b80cff-5e19-4536-ab13-e9e7514dd3ac.png#align=left&amp;display=inline&amp;height=334&amp;linkTarget=_blank&amp;originHeight=457&amp;originWidth=1022&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"88ab41ca\">启动镜像</h3><pre data-lang=\"bash\"><code>docker run -p 8080:8080 docker-springboot-example</code></pre><p><br /></p><p>这里没有加<code>-d</code>参数，直接前台启动了，可以看到实时打印的控制台信息<br /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:22:37.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:19:24.000Z",
    "updated_at": "2019-02-01T06:22:37.000Z",
    "published_at": "2019-02-01T06:22:37.000Z",
    "first_published_at": "2019-02-01T06:22:37.000Z",
    "word_count": 1538,
    "cover": "",
    "description": "date: 2018-12-26tags: [Docker,SpringBoot]Docker简介Docker是基于Go语言实现的云开源项目，诞生于2013年初，最初发起者是dotClouw公司。Docker 自开源后受到广泛的关注和讨论，目前已有多个相关项目，逐断形成了围Docker的生态体...",
    "custom_description": "Docker是基于Go语言实现的云开源项目，诞生于2013年初，最初发起者是dotClouw公司。Docker 自开源后受到广泛的关注和讨论，目前已有多个相关项目，逐断形成了围Docker的生态体系。dotCloud 公司后来也改名为Docker Ine。  \nDocker是一个开源的容器引擎，它有",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224141,
    "slug": "dingtalk-synchronous",
    "title": "DingTalk-通讯录单向同步实现示例",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-07-27<br />\ntags: [DingTalk,通讯录同步]\n---\n\n最近项目中需要实现对接钉钉，并实现单向通讯录同步（`钉钉服务器` -> `对接平台`）本文通过一个简单的案例快速实现相关的DEMO (本文主要实现与钉钉对接)。\n\n> 钉钉API：[https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.LucpAu&treeId=385&articleId=104975&docType=1#s7](https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.LucpAu&treeId=385&articleId=104975&docType=1#s7)\n\n\n## 流程示意图\n\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549001800418-ffff4373-05cb-4bc4-ae08-8e0722eaa169.png#align=left&display=inline&height=443&linkTarget=_blank&originHeight=443&originWidth=359&size=0&width=359)\n## 准备工作\n\n在使用回调接口前，需要做以下准备工作：\n\n1. 提供一个接收消息的RESTful接口。\n1. 调用钉钉API，主动注册回调通知。\n1. 因为涉及到消息的加密解密，默认的JDK存在一些限制，先要替换相关jar：\n\n> 在官方网站下载JCE无限制权限策略文件<br />\nJDK6的下载地址：[http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html](http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html)<br />\nJDK7的下载地址：[http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html](http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html)<br />\nJDK8的下载地址：[http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html](http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html)<br />\n下载后解压，可以看到local_policy.jar和US_export_policy.jar以及readme.txt。<br />\n如果安装的是JRE，将两个jar文件放到%JRE_HOME% \\lib\\security目录下覆盖原来的文件，<br />\n如果安装的是JDK，将两个jar文件放到%JDK_HOME%\\jre\\lib\\security目录下覆盖原来文件。\n\n\n1. 内网穿透映射本地RESTful接口到公网，推荐使用`Ngrok`: [http://ngrok.ciqiuwl.cn/](http://ngrok.ciqiuwl.cn/)\n\n## 具体实现\n\n### 提供回调接口\n\n```java\npackage com.wuwenze.dingtalk.rest;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.mzlion.core.lang.Assert;\nimport com.wuwenze.dingtalk.api.DingTalkConst;\nimport com.wuwenze.dingtalk.encrpty.DingTalkEncryptor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n/**\n * @author wwz\n * @version 1 (2018/7/26)\n * @since Java7\n */\n@Slf4j\n@RestController\npublic class DingTalkCallbackRest {\n\n    @PostMapping(\"/dingtalk/receive\")\n    public Map<String, ? extends Serializable> receive(//\n          String signature, String timestamp, String nonce,@RequestBody String requestBody) {\n        Assert.notNull(signature, \"signature is null.\");\n        Assert.notNull(timestamp, \"timestamp is null.\");\n        Assert.notNull(nonce, \"nonce is null.\");\n        Assert.notNull(requestBody, \"requestBody is null.\");\n\n        log.info(\"#receive 接收密文：{}\", requestBody);\n        DingTalkEncryptor dingTalkEncryptor = new DingTalkEncryptor(//\n                DingTalkConst.CALLBACK_TOKEN, DingTalkConst.CALLBACK_AES_KEY, DingTalkConst.CORP_ID);\n        JSONObject jsonEncrypt = JSON.parseObject(requestBody);\n        String encryptMessage = dingTalkEncryptor.getDecryptMsg(signature, timestamp, nonce, jsonEncrypt.getString(\"encrypt\"));\n        log.info(\"#receive 密文解密后：{}\", encryptMessage);\n\n        // TODO: 异步处理报文，解析相关信息\n\n        // 返回加密后的success (快速响应)\n        return dingTalkEncryptor.getEncryptedMsg(\"success\", Long.parseLong(timestamp), nonce);\n    }\n}\n```\n\n接口写好之后，还需要将接口暴露在公网，如此钉钉服务器才能进行调用，下为内网穿透示意图：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549001802346-78b50a2b-f090-4ae8-a805-6c14a20065a4.png#align=left&display=inline&height=420&linkTarget=_blank&originHeight=858&originWidth=1524&size=0&width=746)\n\n钉钉为我们开发者提供了一个Ngrok服务，在https://github.com/open-dingtalk/pierced.git，按照操作文章指引配置即可。\n\n我在这边使用的是其他的Ngrok服务，官网地址是http://ngrok.ciqiuwl.cn/，配置后启动如下图所示:<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549001800963-9d3d4a30-df19-4b5f-9037-0d1e6a2ce939.png#align=left&display=inline&height=504&linkTarget=_blank&originHeight=506&originWidth=749&size=0&width=746)<br />\n将本地的`http://127.0.0.1:8080`映射到`http://wuwz.ngrok.xiaomiqiu.cn`，最终提供给钉钉的回调接口地址即为：`http://wuwz.ngrok.xiaomiqiu.cn/dingtalk/receive`\n\n以上准备工作完后成，就可以将接口启动起来，继续后续的操作。\n\n### 主动注册回调接口\n\n> 写一个测试方法，将`http://wuwz.ngrok.xiaomiqiu.cn/dingtalk/receive`注册到钉钉，后续钉钉相关的消息都会推送到此处。\n\n\n```java\npackage com.wuwenze.dingtalk;\n\nimport com.wuwenze.dingtalk.api.DingTalkApi;\nimport com.wuwenze.dingtalk.api.DingTalkConst;\nimport com.wuwenze.dingtalk.enums.DingTalkCallbackTag;\n\n/**\n * @author wwz\n * @version 1 (2018/7/27)\n * @since Java7\n */\npublic class TestRegisterCallback {\n\n    public static void main(String[] args) {\n        // 获取Token\n        String accessToken = DingTalkApi.getAccessTokenCache();\n\n        // 先删除之前注册的回调接口\n        DingTalkApi.removeCallback(accessToken);\n\n        // 注册新的回调接口\n        String callbackToken = DingTalkConst.CALLBACK_TOKEN;\n        String callbackAesKey = DingTalkConst.CALLBACK_AES_KEY;\n        String callbackUrl = \"http://wuwz.ngrok.xiaomiqiu.cn/dingtalk/receive\";\n        DingTalkCallbackTag[] callbackTags = {\n                DingTalkCallbackTag.USER_ADD_ORG, // 增加用户\n                DingTalkCallbackTag.USER_MODIFY_ORG, // 修改用户\n                DingTalkCallbackTag.USER_LEAVE_ORG // 用户离职\n        };\n        DingTalkApi.registerCallback(accessToken, callbackToken, callbackAesKey, callbackUrl, callbackTags);\n    }\n}\n```\n\n执行代码，如果一切不出意外的话，就注册成功了（注册的过程中需**保证callbackUrl可以正常访问**,因为首次会向该接口发送一条check_url事件，验证其合法性）\n\n```java\n// 获取Token\n13:44:41.342 [main] INFO com.wuwenze.dingtalk.api.DingTalkApi - {\"access_token\":\"9990578f789c3fb1a9d974c268df5029\",\"errcode\":0.0,\"errmsg\":\"ok\",\"expires_in\":7200.0}\n// 先删除之前注册的回调接口\n13:44:41.438 [main] INFO com.wuwenze.dingtalk.api.DingTalkApi - {\"errcode\":0.0,\"errmsg\":\"ok\"}\n// 注册新的回调接口\n13:44:41.888 [main] INFO com.wuwenze.dingtalk.api.DingTalkApi - {\"errcode\":0.0,\"errmsg\":\"ok\"}\n13:44:41.893 [main] INFO com.wuwenze.dingtalk.api.DingTalkApi - #registerCallback 注册回调接口 -> url: http://wuwz.ngrok.xiaomiqiu.cn/dingtalk/receive, tags: tag: user_add_org, describe: 通讯录用户增加 + tag: user_modify_org, describe: 通讯录用户更改 + tag: user_leave_org, describe: 通讯录用户离职\n```\n\n另外再来观察一下回调接口是否收到checkUrL消息：\n\n```java\n2018-07-27 13:44:41.823  INFO 2392 --- [nio-8080-exec-1] c.w.dingtalk.rest.DingTalkCallbackRest   : #receive 接收密文：{\"encrypt\":\"JfRo/wn+E1agXgk1uN5UQP/WDv0RvWnw8TgXC/ucatBxYm54OSUcGn5uTGCVMaGIN6Lv24ZOujH/uixB39AKxjXWgzdJQ1Eq4HD0EIJFG+QY8mjcCltvhX0QfhisFlll\"}\n2018-07-27 13:44:41.823  INFO 2392 --- [nio-8080-exec-1] c.w.dingtalk.rest.DingTalkCallbackRest   : #receive 密文解密后：{\"EventType\":\"check_url\"}\n```\n\n### 测试注册的通讯录事件\n\n> 在上一步中，注册了`USER_ADD_ORG` (增加用户)、`USER_MODIFY_ORG` (修改用户)、`USER_LEAVE_ORG` (用户离职|删除)三个事件\n\n\n打开钉钉后台管理，在通讯录中新增一个用户：<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549001801224-0e151e32-d79a-44aa-bee0-ebc8fc0c4c46.png#align=left&display=inline&height=992&linkTarget=_blank&originHeight=992&originWidth=622&size=0&width=622)<br />\n保存成功后，在回调接口中则马上收到了该事件的通知消息：\n\n```java\n2018-07-27 13:49:55.985  INFO 2392 --- [nio-8080-exec-3] c.w.dingtalk.rest.DingTalkCallbackRest   : #receive 接收密文：{\"encrypt\":\"g6RsagVKTVUS2Gg7B1JSn81uJPgCpPKoaRN4kps4cMpp6CuqW1QahaDP8TcnwDP2fYyG0gwLFvF5cOWbn+lKX2kq4UYe5m08BB/FWw8lALV/4LYu7RI6OARCFDTsllBTs4W6/OUv+9AyYlWGmwK2ZYnXoFyiK4DqFt6jenp45NCXwvSgssjn8RsD/3E7kfw5DL/mfr4L3hkaBysmkU2ohaFFEqBO1r63cj+mONLsD8Dvr2lAsefBoMdZ2JV5sIIePuKhz08G6KnJDvkAqcm59naV6AIbDLouWrBK7upCP7Q=\"}\n2018-07-27 13:49:55.985  INFO 2392 --- [nio-8080-exec-3] c.w.dingtalk.rest.DingTalkCallbackRest   : #receive 密文解密后：{\"TimeStamp\":\"1532670599144\",\"CorpId\":\"dingb9875d6606f892ed35c2f4657eb6378f\",\"UserId\":[\"202844352662984130\"],\"EventType\":\"user_add_org\"}\n```\n\n### 后续同步逻辑\n\n在上面的例子中新增用户后，收到的报文解密后的信息为只包含事件类型和用户ID，所以后面还需要主动调用钉钉获取用户详情的接口，再做具体的同步逻辑，这里就不再往下写了，贴一下相关的API接口吧：<br />\n[https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.Y7lQU8&treeId=385&articleId=106816&docType=1](https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.Y7lQU8&treeId=385&articleId=106816&docType=1)<br />\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549001800440-fd0b9636-06ed-4efc-b578-884dd5d05e2a.png#align=left&display=inline&height=844&linkTarget=_blank&originHeight=844&originWidth=743&size=0&width=743)\n\n## 相关API工具封装\n\n> 下面罗列了以上示例中用到的工具类封装，不再具体讲解，直接贴代码\n\n\n### DingTalkConst\n\n> 常量池\n\n\n```java\npublic class DingTalkConst {\n    public final static String CORP_ID = \"dingb9875d6606f892ed35c2f4657eb6378f\";\n    public final static Object CORP_SECRET = \"到钉钉查看\";\n    public final static String CALLBACK_TOKEN = \"token\"; // 回调Token\n    public final static String CALLBACK_AES_KEY = \"xxxxx7p5qnb6zs3xxxxxlkfmxqfkv23d40yd0xxxxxx\"; // 回调秘钥，43个随机字符\n}\n```\n\n### DingTalkCallbackTag\n\n> 可供注册的回调事件类型枚举\n\n\n```java\npublic enum DingTalkCallbackTag {\n    USER_ADD_ORG(\"通讯录用户增加\"),\n    USER_MODIFY_ORG(\"通讯录用户更改\"),\n    USER_LEAVE_ORG(\"通讯录用户离职\"),\n    ORG_ADMIN_ADD(\"通讯录用户被设为管理员\"),\n    ORG_ADMIN_REMOVE(\"通讯录用户被取消设置管理员\"),\n    ORG_DEPT_CREATE(\"通讯录企业部门创建\"),\n    ORG_DEPT_MODIFY(\"通讯录企业部门修改\"),\n    ORG_DEPT_REMOVE(\"通讯录企业部门删除\"),\n    ORG_REMOVE(\"企业被解散\"),\n    ORG_CHANGE(\"企业信息发生变更\"),\n    LABEL_USER_CHANGE(\"员工角色信息发生变更\"),\n    LABEL_CONF_ADD(\"增加角色或者角色组\"),\n    LABEL_CONF_DEL(\"删除角色或者角色组\"),\n    LABEL_CONF_MODIFY(\"修改角色或者角色组\");\n\n    private String describe;\n    DingTalkCallbackTag(String describe) {\n        this.describe = describe;\n    }\n\n    public String getDescribe() {\n        return describe;\n    }\n\n    public void setDescribe(String describe) {\n        this.describe = describe;\n    }\n\n    @Override\n    public String toString() {\n        return super.toString().toLowerCase();\n    }\n\n    public String toInfoString() {\n        return String.format(\"tag: %s, describe: %s\", this.toString(), this.getDescribe());\n    }\n}\n```\n\n### DingTalkEncryptor\n\n> 钉钉消息加密解密工作类\n\n\n```java\npackage com.wuwenze.dingtalk.encrpty;\n\nimport com.google.common.collect.ImmutableMap;\nimport com.mzlion.core.binary.Base64;\nimport com.mzlion.core.lang.Assert;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.io.ByteArrayOutputStream;\nimport java.io.Serializable;\nimport java.nio.charset.Charset;\nimport java.security.MessageDigest;\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.Random;\n\n/**\n * @author wwz\n * @version 1 (2018/7/26)\n * @since Java7\n */\npublic class DingTalkEncryptor {\n    private static final Charset CHARSET = Charset.forName(\"UTF-8\");\n    private byte[] aesKey;\n    private String token;\n    private String corpId;\n\n    /**\n     * ask getPaddingBytes key固定长度\n     **/\n    private static final Integer AES_ENCODE_KEY_LENGTH = 43;\n    /**\n     * 加密随机字符串字节长度\n     **/\n    private static final Integer RANDOM_LENGTH = 16;\n\n    /**\n     * 构造函数\n     *\n     * @param token          钉钉开放平台上，开发者设置的token\n     * @param encodingAesKey 钉钉开放台上，开发者设置的EncodingAESKey\n     * @param corpId         ISV进行配置的时候应该传对应套件的SUITE_KEY(第一次创建时传的是默认的CREATE_SUITE_KEY)，普通企业是Corpid\n     */\n    public DingTalkEncryptor(String token, String encodingAesKey, String corpId) {\n        if (null == encodingAesKey || encodingAesKey.length() != AES_ENCODE_KEY_LENGTH) {\n            throw new IllegalArgumentException(\"encodingAesKey is null\");\n        }\n        this.token = token;\n        this.corpId = corpId;\n        this.aesKey = Base64.decode(encodingAesKey + \"=\");\n    }\n\n    /**\n     * 将和钉钉开放平台同步的消息体加密,返回加密Map\n     *\n     * @param message 传递的消息体明文\n     * @param timeStamp 时间戳\n     * @param nonce     随机字符串\n     * @return\n     */\n    public Map<String, ? extends Serializable> getEncryptedMsg(String message, Long timeStamp, String nonce) {\n        Assert.notNull(message, \"plaintext is null\");\n        Assert.notNull(timeStamp, \"timeStamp is null\");\n        Assert.notNull(nonce, \"nonce is null\");\n        String encrypt = encrypt(getRandomStr(RANDOM_LENGTH), message);\n        String signature = getSignature(token, String.valueOf(timeStamp), nonce, encrypt);\n        return ImmutableMap.of(\n                \"msg_signature\", signature, //\n                \"encrypt\", encrypt, //\n                \"timeStamp\", timeStamp,//\n                \"nonce\", nonce);\n    }\n\n    /**\n     * 密文解密\n     *\n     * @param msgSignature 签名串\n     * @param timeStamp    时间戳\n     * @param nonce        随机串\n     * @param encryptMsg   密文\n     * @return 解密后的原文\n     */\n    public String getDecryptMsg(String msgSignature, String timeStamp, String nonce, String encryptMsg) {\n        // 校验签名\n        String signature = getSignature(token, timeStamp, nonce, encryptMsg);\n        if (!signature.equals(msgSignature)) {\n            throw new RuntimeException(\"校验签名失败。\");\n        }\n        // 解密\n        return decrypt(encryptMsg);\n    }\n\n    private String encrypt(String random, String plaintext) {\n        try {\n            byte[] randomBytes = random.getBytes(CHARSET);\n            byte[] plainTextBytes = plaintext.getBytes(CHARSET);\n            byte[] lengthByte = int2Bytes(plainTextBytes.length);\n            byte[] corpidBytes = corpId.getBytes(CHARSET);\n            ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n            byteStream.write(randomBytes);\n            byteStream.write(lengthByte);\n            byteStream.write(plainTextBytes);\n            byteStream.write(corpidBytes);\n            byte[] padBytes = PKCS7Padding.getPaddingBytes(byteStream.size());\n            byteStream.write(padBytes);\n            byte[] unencrypted = byteStream.toByteArray();\n            byteStream.close();\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");\n            SecretKeySpec keySpec = new SecretKeySpec(aesKey, \"AES\");\n            IvParameterSpec iv = new IvParameterSpec(aesKey, 0, 16);\n            cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);\n            byte[] encrypted = cipher.doFinal(unencrypted);\n            return Base64.encode(encrypted);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * 对密文进行解密.\n     * @param text 需要解密的密文\n     * @return 解密得到的明文\n     */\n    private String decrypt(String text) {\n        byte[] originalArr;\n        try {\n            // 设置解密模式为AES的CBC模式\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");\n            SecretKeySpec keySpec = new SecretKeySpec(aesKey, \"AES\");\n            IvParameterSpec iv = new IvParameterSpec(Arrays.copyOfRange(aesKey, 0, 16));\n            cipher.init(Cipher.DECRYPT_MODE, keySpec, iv);\n            // 使用BASE64对密文进行解码, 解密\n            originalArr = cipher.doFinal(Base64.decode(text));\n        } catch (Exception e) {\n            throw new RuntimeException(\"计算解密文本错误\");\n        }\n\n        String plainText;\n        String fromCorpid;\n        try {\n            // 去除补位字符\n            byte[] bytes = PKCS7Padding.removePaddingBytes(originalArr);\n            // 分离16位随机字符串,网络字节序和corpId\n            byte[] networkOrder = Arrays.copyOfRange(bytes, 16, 20);\n            int plainTextLegth = bytes2int(networkOrder);\n            plainText = new String(Arrays.copyOfRange(bytes, 20, 20 + plainTextLegth), CHARSET);\n            fromCorpid = new String(Arrays.copyOfRange(bytes, 20 + plainTextLegth, bytes.length), CHARSET);\n        } catch (Exception e) {\n            throw new RuntimeException(\"计算解密文本长度错误\");\n        }\n\n        // corpid不相同的情况\n        if (!fromCorpid.equals(corpId)) {\n            throw new RuntimeException(\"计算文本密码错误\");\n        }\n        return plainText;\n    }\n\n    /**\n     * 数字签名\n     * @param token     isv token\n     * @param timestamp 时间戳\n     * @param nonce     随机串\n     * @param encrypt   加密文本\n     * @return\n     */\n    public String getSignature(String token, String timestamp, String nonce, String encrypt) {\n        try {\n            String[] array = new String[]{token, timestamp, nonce, encrypt};\n            Arrays.sort(array);\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < 4; i++) {\n                sb.append(array[i]);\n            }\n            String str = sb.toString();\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            md.update(str.getBytes());\n            byte[] digest = md.digest();\n\n            StringBuffer hexstr = new StringBuffer();\n            String shaHex = \"\";\n            for (int i = 0; i < digest.length; i++) {\n                shaHex = Integer.toHexString(digest[i] & 0xFF);\n                if (shaHex.length() < 2) {\n                    hexstr.append(0);\n                }\n                hexstr.append(shaHex);\n            }\n            return hexstr.toString();\n        } catch (Exception e) {\n           throw new RuntimeException(e);\n        }\n    }\n\n    public static String getRandomStr(int count) {\n        String base = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        Random random = new Random();\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < count; i++) {\n            int number = random.nextInt(base.length());\n            sb.append(base.charAt(number));\n        }\n        return sb.toString();\n    }\n\n\n    /**\n     * int转byte数组,高位在前\n     */\n    public static byte[] int2Bytes(int count) {\n        byte[] byteArr = new byte[4];\n        byteArr[3] = (byte) (count & 0xFF);\n        byteArr[2] = (byte) (count >> 8 & 0xFF);\n        byteArr[1] = (byte) (count >> 16 & 0xFF);\n        byteArr[0] = (byte) (count >> 24 & 0xFF);\n        return byteArr;\n    }\n\n    /**\n     * 高位在前bytes数组转int\n     * @param byteArr\n     * @return\n     */\n    public static int bytes2int(byte[] byteArr) {\n        int count = 0;\n        for (int i = 0; i < 4; i++) {\n            count <<= 8;\n            count |= byteArr[i] & 0xff;\n        }\n        return count;\n    }\n}\n```\n\n### PKCS7Padding\n\n```java\npackage com.wuwenze.dingtalk.encrpty;\n\nimport java.nio.charset.Charset;\nimport java.util.Arrays;\n\n/**\n * @author wwz\n * @version 1 (2018/7/10)\n * @since Java7\n */\npublic class PKCS7Padding {\n    private final static Charset CHARSET    = Charset.forName(\"utf-8\");\n    private final static int     BLOCK_SIZE = 32;\n\n    /**\n     * 填充mode字节\n     * @param count\n     * @return\n     */\n    public static byte[] getPaddingBytes(int count) {\n        int amountToPad = BLOCK_SIZE - (count % BLOCK_SIZE);\n        if (amountToPad == 0) {\n            amountToPad = BLOCK_SIZE;\n        }\n        char padChr = chr(amountToPad);\n        String tmp = new String();\n        for (int index = 0; index < amountToPad; index++) {\n            tmp += padChr;\n        }\n        return tmp.getBytes(CHARSET);\n    }\n\n    /**\n     * 移除mode填充字节\n     * @param decrypted\n     * @return\n     */\n    public static byte[] removePaddingBytes(byte[] decrypted) {\n        int pad = (int) decrypted[decrypted.length - 1];\n        if (pad < 1 || pad > BLOCK_SIZE) {\n            pad = 0;\n        }\n        return Arrays.copyOfRange(decrypted, 0, decrypted.length - pad);\n    }\n\n    private static char chr(int a) {\n        byte target = (byte) (a & 0xFF);\n        return (char) target;\n    }\n}\n```\n\n### DingTalkApi\n\n> 钉钉开放API简易封装 (仅供测试)\n\n\n```java\npackage com.wuwenze.dingtalk.api;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.collect.ImmutableMap;\nimport com.mzlion.core.lang.Assert;\nimport com.mzlion.easyokhttp.HttpClient;\nimport com.wuwenze.dingtalk.enums.DingTalkCallbackTag;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.io.Serializable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\n\n\n/**\n * @author wwz\n * @version 1 (2018/7/26)\n * @since Java7\n */\n@Slf4j\npublic class DingTalkApi {\n\n    private final static LoadingCache<String, String> mTokenCache = //\n            CacheBuilder.newBuilder()//\n                    .maximumSize(100)//\n                    .expireAfterAccess(7200, TimeUnit.SECONDS)//\n                    .build(new CacheLoader<String, String>() {\n                        @Override\n                        public String load(String key) throws Exception {\n                            // key:corpId#corpSecret\n                            String[] params = key.split(\"#\");\n                            if (params.length != 2) {\n                                throw new RuntimeException(\"#loadTokenCache error\");\n                            }\n                            return getAccessToken(params[0], params[1]);\n                        }\n                    });\n\n\n\n    public static String getAccessToken(String corpId, String corpSecret) {\n        String url = String.format(\"https://oapi.dingtalk.com/gettoken?corpid=%s&corpsecret=%s\",corpId, corpSecret);\n        JSONObject jsonObject = HttpClient.get(url).asBean(JSONObject.class);\n        assertDingTalkJSONObject(jsonObject);\n        return jsonObject.getString(\"access_token\");\n    }\n\n    public static String getAccessTokenCache() {\n        try {\n            return mTokenCache.get(DingTalkConst.CORP_ID + \"#\" + DingTalkConst.CORP_SECRET);\n        } catch (ExecutionException e) {\n            return null;\n        }\n    }\n\n    public static void registerCallback(String accessToken, String callbackToken, String callbackAesKey, String url, DingTalkCallbackTag ... tags) {\n        Assert.notNull(accessToken, \"accessToken is null\");\n        Assert.notNull(callbackToken, \"callbackToken is null\");\n        Assert.notNull(callbackAesKey, \"callbackAesKey is null\");\n        Assert.notNull(url, \"url is null\");\n        if (tags.length < 1) {\n            throw new IllegalArgumentException(\"至少指定一个回调事件类型。\");\n        }\n        String[] callbackTagArray = new String[tags.length];\n        for (int i = 0; i < tags.length; i++) {\n            callbackTagArray[i] = tags[i].toString();\n        }\n        ImmutableMap<String, Serializable> params = ImmutableMap.of(//\n                \"call_back_tag\", callbackTagArray,//\n                \"token\", callbackToken,//\n                \"aes_key\", callbackAesKey, //\n                \"url\", url//\n        );\n        String apiUrl =  \"https://oapi.dingtalk.com/call_back/register_call_back?access_token=\" + accessToken;\n        assertDingTalkJSONObject(//\n                HttpClient.textBody(apiUrl).json(JSON.toJSONString(params)).asBean(JSONObject.class)\n        );\n        log.info(\"#registerCallback 注册回调接口 -> url: {}, tags: {}\", url, showTagsInfo(tags));\n    }\n\n    private static String showTagsInfo(DingTalkCallbackTag ... tags) {\n        StringBuffer stringBuffer = new StringBuffer();\n        for (DingTalkCallbackTag tag : tags) {\n            stringBuffer.append(tag.toInfoString()).append(\" + \");\n        }\n        return stringBuffer.toString();\n    }\n\n    public static void removeCallback(String accessToken) {\n        String apiUrl = \"https://oapi.dingtalk.com/call_back/delete_call_back?access_token=\" + accessToken;\n        assertDingTalkJSONObject(//\n                HttpClient.get(apiUrl).asBean(JSONObject.class)\n        );\n    }\n\n    public static void removeCallback() {\n        removeCallback(getAccessTokenCache());\n    }\n\n    public static void registerCallback(String url, DingTalkCallbackTag ... tags) {\n        registerCallback(getAccessTokenCache(), DingTalkConst.CALLBACK_TOKEN, DingTalkConst.CALLBACK_AES_KEY, url, tags);\n    }\n\n    private static void assertDingTalkJSONObject(JSONObject jsonObject) {\n        log.info(jsonObject.toJSONString());\n        int errcode = jsonObject.getIntValue(\"errcode\");\n        if (errcode != 0) {\n            throw new RuntimeException(jsonObject.getString(\"errmsg\"));\n        }\n    }\n}\n```\n\n",
    "body_draft": "",
    "body_html": "<p>date: 2018-07-27<br />\ntags: [DingTalk,通讯录同步]</p><hr /><p><br /></p><p>最近项目中需要实现对接钉钉，并实现单向通讯录同步（<code>钉钉服务器</code> -&gt; <code>对接平台</code>）本文通过一个简单的案例快速实现相关的DEMO (本文主要实现与钉钉对接)。</p><p><br /></p><blockquote><p>钉钉API：<a href=\"https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.LucpAu&amp;treeId=385&amp;articleId=104975&amp;docType=1#s7\" target=\"_blank\">https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.LucpAu&amp;treeId=385&amp;articleId=104975&amp;docType=1#s7</a></p></blockquote><p><br /></p><h2 id=\"c7c62608\">流程示意图</h2><p><br /></p><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549001800418-ffff4373-05cb-4bc4-ae08-8e0722eaa169.png#align=left&amp;display=inline&amp;height=443&amp;linkTarget=_blank&amp;originHeight=443&amp;originWidth=359&amp;size=0&amp;width=359\" style=\"max-width: 600px; width: 359px;\" /></p><h2 id=\"88210852\">准备工作</h2><p><br /></p><p>在使用回调接口前，需要做以下准备工作：</p><p><br /></p><ol start=\"1\"><li>提供一个接收消息的RESTful接口。</li></ol><ol start=\"2\"><li>调用钉钉API，主动注册回调通知。</li></ol><ol start=\"3\"><li>因为涉及到消息的加密解密，默认的JDK存在一些限制，先要替换相关jar：</li></ol><p><br /></p><blockquote><p>在官方网站下载JCE无限制权限策略文件<br />\nJDK6的下载地址：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html\" target=\"_blank\">http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html</a><br />\nJDK7的下载地址：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html\" target=\"_blank\">http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html</a><br />\nJDK8的下载地址：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html\" target=\"_blank\">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a><br />\n下载后解压，可以看到local_policy.jar和US_export_policy.jar以及readme.txt。<br />\n如果安装的是JRE，将两个jar文件放到%JRE_HOME% \\lib\\security目录下覆盖原来的文件，<br />\n如果安装的是JDK，将两个jar文件放到%JDK_HOME%\\jre\\lib\\security目录下覆盖原来文件。</p></blockquote><p><br /></p><ol start=\"4\"><li>内网穿透映射本地RESTful接口到公网，推荐使用<code>Ngrok</code>: <a href=\"http://ngrok.ciqiuwl.cn/\" target=\"_blank\">http://ngrok.ciqiuwl.cn/</a></li></ol><p><br /></p><h2 id=\"380cf2b5\">具体实现</h2><p><br /></p><h3 id=\"a7168216\">提供回调接口</h3><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.dingtalk.rest;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.mzlion.core.lang.Assert;\nimport com.wuwenze.dingtalk.api.DingTalkConst;\nimport com.wuwenze.dingtalk.encrpty.DingTalkEncryptor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n/**\n * @author wwz\n * @version 1 (2018/7/26)\n * @since Java7\n */\n@Slf4j\n@RestController\npublic class DingTalkCallbackRest {\n\n    @PostMapping(&quot;/dingtalk/receive&quot;)\n    public Map&lt;String, ? extends Serializable&gt; receive(//\n          String signature, String timestamp, String nonce,@RequestBody String requestBody) {\n        Assert.notNull(signature, &quot;signature is null.&quot;);\n        Assert.notNull(timestamp, &quot;timestamp is null.&quot;);\n        Assert.notNull(nonce, &quot;nonce is null.&quot;);\n        Assert.notNull(requestBody, &quot;requestBody is null.&quot;);\n\n        log.info(&quot;#receive 接收密文：{}&quot;, requestBody);\n        DingTalkEncryptor dingTalkEncryptor = new DingTalkEncryptor(//\n                DingTalkConst.CALLBACK_TOKEN, DingTalkConst.CALLBACK_AES_KEY, DingTalkConst.CORP_ID);\n        JSONObject jsonEncrypt = JSON.parseObject(requestBody);\n        String encryptMessage = dingTalkEncryptor.getDecryptMsg(signature, timestamp, nonce, jsonEncrypt.getString(&quot;encrypt&quot;));\n        log.info(&quot;#receive 密文解密后：{}&quot;, encryptMessage);\n\n        // TODO: 异步处理报文，解析相关信息\n\n        // 返回加密后的success (快速响应)\n        return dingTalkEncryptor.getEncryptedMsg(&quot;success&quot;, Long.parseLong(timestamp), nonce);\n    }\n}</code></pre><p><br /></p><p>接口写好之后，还需要将接口暴露在公网，如此钉钉服务器才能进行调用，下为内网穿透示意图：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549001802346-78b50a2b-f090-4ae8-a805-6c14a20065a4.png#align=left&amp;display=inline&amp;height=420&amp;linkTarget=_blank&amp;originHeight=858&amp;originWidth=1524&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>钉钉为我们开发者提供了一个Ngrok服务，在https://github.com/open-dingtalk/pierced.git，按照操作文章指引配置即可。</p><p><br /></p><p>我在这边使用的是其他的Ngrok服务，官网地址是http://ngrok.ciqiuwl.cn/，配置后启动如下图所示:<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549001800963-9d3d4a30-df19-4b5f-9037-0d1e6a2ce939.png#align=left&amp;display=inline&amp;height=504&amp;linkTarget=_blank&amp;originHeight=506&amp;originWidth=749&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /><br />\n将本地的<code>http://127.0.0.1:8080</code>映射到<code>http://wuwz.ngrok.xiaomiqiu.cn</code>，最终提供给钉钉的回调接口地址即为：<code>http://wuwz.ngrok.xiaomiqiu.cn/dingtalk/receive</code></p><p><br /></p><p>以上准备工作完后成，就可以将接口启动起来，继续后续的操作。</p><p><br /></p><h3 id=\"c57cc7cc\">主动注册回调接口</h3><p><br /></p><blockquote><p>写一个测试方法，将<code>http://wuwz.ngrok.xiaomiqiu.cn/dingtalk/receive</code>注册到钉钉，后续钉钉相关的消息都会推送到此处。</p></blockquote><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.dingtalk;\n\nimport com.wuwenze.dingtalk.api.DingTalkApi;\nimport com.wuwenze.dingtalk.api.DingTalkConst;\nimport com.wuwenze.dingtalk.enums.DingTalkCallbackTag;\n\n/**\n * @author wwz\n * @version 1 (2018/7/27)\n * @since Java7\n */\npublic class TestRegisterCallback {\n\n    public static void main(String[] args) {\n        // 获取Token\n        String accessToken = DingTalkApi.getAccessTokenCache();\n\n        // 先删除之前注册的回调接口\n        DingTalkApi.removeCallback(accessToken);\n\n        // 注册新的回调接口\n        String callbackToken = DingTalkConst.CALLBACK_TOKEN;\n        String callbackAesKey = DingTalkConst.CALLBACK_AES_KEY;\n        String callbackUrl = &quot;http://wuwz.ngrok.xiaomiqiu.cn/dingtalk/receive&quot;;\n        DingTalkCallbackTag[] callbackTags = {\n                DingTalkCallbackTag.USER_ADD_ORG, // 增加用户\n                DingTalkCallbackTag.USER_MODIFY_ORG, // 修改用户\n                DingTalkCallbackTag.USER_LEAVE_ORG // 用户离职\n        };\n        DingTalkApi.registerCallback(accessToken, callbackToken, callbackAesKey, callbackUrl, callbackTags);\n    }\n}</code></pre><p><br /></p><p>执行代码，如果一切不出意外的话，就注册成功了（注册的过程中需<strong>保证callbackUrl可以正常访问</strong>,因为首次会向该接口发送一条check_url事件，验证其合法性）</p><p><br /></p><pre data-lang=\"java\"><code>// 获取Token\n13:44:41.342 [main] INFO com.wuwenze.dingtalk.api.DingTalkApi - {&quot;access_token&quot;:&quot;9990578f789c3fb1a9d974c268df5029&quot;,&quot;errcode&quot;:0.0,&quot;errmsg&quot;:&quot;ok&quot;,&quot;expires_in&quot;:7200.0}\n// 先删除之前注册的回调接口\n13:44:41.438 [main] INFO com.wuwenze.dingtalk.api.DingTalkApi - {&quot;errcode&quot;:0.0,&quot;errmsg&quot;:&quot;ok&quot;}\n// 注册新的回调接口\n13:44:41.888 [main] INFO com.wuwenze.dingtalk.api.DingTalkApi - {&quot;errcode&quot;:0.0,&quot;errmsg&quot;:&quot;ok&quot;}\n13:44:41.893 [main] INFO com.wuwenze.dingtalk.api.DingTalkApi - #registerCallback 注册回调接口 -&gt; url: http://wuwz.ngrok.xiaomiqiu.cn/dingtalk/receive, tags: tag: user_add_org, describe: 通讯录用户增加 + tag: user_modify_org, describe: 通讯录用户更改 + tag: user_leave_org, describe: 通讯录用户离职</code></pre><p><br /></p><p>另外再来观察一下回调接口是否收到checkUrL消息：</p><p><br /></p><pre data-lang=\"java\"><code>2018-07-27 13:44:41.823  INFO 2392 --- [nio-8080-exec-1] c.w.dingtalk.rest.DingTalkCallbackRest   : #receive 接收密文：{&quot;encrypt&quot;:&quot;JfRo/wn+E1agXgk1uN5UQP/WDv0RvWnw8TgXC/ucatBxYm54OSUcGn5uTGCVMaGIN6Lv24ZOujH/uixB39AKxjXWgzdJQ1Eq4HD0EIJFG+QY8mjcCltvhX0QfhisFlll&quot;}\n2018-07-27 13:44:41.823  INFO 2392 --- [nio-8080-exec-1] c.w.dingtalk.rest.DingTalkCallbackRest   : #receive 密文解密后：{&quot;EventType&quot;:&quot;check_url&quot;}</code></pre><p><br /></p><h3 id=\"d7836012\">测试注册的通讯录事件</h3><p><br /></p><blockquote><p>在上一步中，注册了<code>USER_ADD_ORG</code> (增加用户)、<code>USER_MODIFY_ORG</code> (修改用户)、<code>USER_LEAVE_ORG</code> (用户离职|删除)三个事件</p></blockquote><p><br /></p><p>打开钉钉后台管理，在通讯录中新增一个用户：<br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549001801224-0e151e32-d79a-44aa-bee0-ebc8fc0c4c46.png#align=left&amp;display=inline&amp;height=992&amp;linkTarget=_blank&amp;originHeight=992&amp;originWidth=622&amp;size=0&amp;width=622\" style=\"max-width: 600px; width: 622px;\" /><br />\n保存成功后，在回调接口中则马上收到了该事件的通知消息：</p><p><br /></p><pre data-lang=\"java\"><code>2018-07-27 13:49:55.985  INFO 2392 --- [nio-8080-exec-3] c.w.dingtalk.rest.DingTalkCallbackRest   : #receive 接收密文：{&quot;encrypt&quot;:&quot;g6RsagVKTVUS2Gg7B1JSn81uJPgCpPKoaRN4kps4cMpp6CuqW1QahaDP8TcnwDP2fYyG0gwLFvF5cOWbn+lKX2kq4UYe5m08BB/FWw8lALV/4LYu7RI6OARCFDTsllBTs4W6/OUv+9AyYlWGmwK2ZYnXoFyiK4DqFt6jenp45NCXwvSgssjn8RsD/3E7kfw5DL/mfr4L3hkaBysmkU2ohaFFEqBO1r63cj+mONLsD8Dvr2lAsefBoMdZ2JV5sIIePuKhz08G6KnJDvkAqcm59naV6AIbDLouWrBK7upCP7Q=&quot;}\n2018-07-27 13:49:55.985  INFO 2392 --- [nio-8080-exec-3] c.w.dingtalk.rest.DingTalkCallbackRest   : #receive 密文解密后：{&quot;TimeStamp&quot;:&quot;1532670599144&quot;,&quot;CorpId&quot;:&quot;dingb9875d6606f892ed35c2f4657eb6378f&quot;,&quot;UserId&quot;:[&quot;202844352662984130&quot;],&quot;EventType&quot;:&quot;user_add_org&quot;}</code></pre><p><br /></p><h3 id=\"05336b10\">后续同步逻辑</h3><p><br /></p><p>在上面的例子中新增用户后，收到的报文解密后的信息为只包含事件类型和用户ID，所以后面还需要主动调用钉钉获取用户详情的接口，再做具体的同步逻辑，这里就不再往下写了，贴一下相关的API接口吧：<br />\n<a href=\"https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.Y7lQU8&amp;treeId=385&amp;articleId=106816&amp;docType=1\" target=\"_blank\">https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.Y7lQU8&amp;treeId=385&amp;articleId=106816&amp;docType=1</a><br />\n<img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549001800440-fd0b9636-06ed-4efc-b578-884dd5d05e2a.png#align=left&amp;display=inline&amp;height=844&amp;linkTarget=_blank&amp;originHeight=844&amp;originWidth=743&amp;size=0&amp;width=743\" style=\"max-width: 600px; width: 743px;\" /></p><p><br /></p><h2 id=\"1696e8a7\">相关API工具封装</h2><p><br /></p><blockquote><p>下面罗列了以上示例中用到的工具类封装，不再具体讲解，直接贴代码</p></blockquote><p><br /></p><h3 id=\"DingTalkConst\">DingTalkConst</h3><p><br /></p><blockquote><p>常量池</p></blockquote><p><br /></p><pre data-lang=\"java\"><code>public class DingTalkConst {\n    public final static String CORP_ID = &quot;dingb9875d6606f892ed35c2f4657eb6378f&quot;;\n    public final static Object CORP_SECRET = &quot;到钉钉查看&quot;;\n    public final static String CALLBACK_TOKEN = &quot;token&quot;; // 回调Token\n    public final static String CALLBACK_AES_KEY = &quot;xxxxx7p5qnb6zs3xxxxxlkfmxqfkv23d40yd0xxxxxx&quot;; // 回调秘钥，43个随机字符\n}</code></pre><p><br /></p><h3 id=\"DingTalkCallbackTag\">DingTalkCallbackTag</h3><p><br /></p><blockquote><p>可供注册的回调事件类型枚举</p></blockquote><p><br /></p><pre data-lang=\"java\"><code>public enum DingTalkCallbackTag {\n    USER_ADD_ORG(&quot;通讯录用户增加&quot;),\n    USER_MODIFY_ORG(&quot;通讯录用户更改&quot;),\n    USER_LEAVE_ORG(&quot;通讯录用户离职&quot;),\n    ORG_ADMIN_ADD(&quot;通讯录用户被设为管理员&quot;),\n    ORG_ADMIN_REMOVE(&quot;通讯录用户被取消设置管理员&quot;),\n    ORG_DEPT_CREATE(&quot;通讯录企业部门创建&quot;),\n    ORG_DEPT_MODIFY(&quot;通讯录企业部门修改&quot;),\n    ORG_DEPT_REMOVE(&quot;通讯录企业部门删除&quot;),\n    ORG_REMOVE(&quot;企业被解散&quot;),\n    ORG_CHANGE(&quot;企业信息发生变更&quot;),\n    LABEL_USER_CHANGE(&quot;员工角色信息发生变更&quot;),\n    LABEL_CONF_ADD(&quot;增加角色或者角色组&quot;),\n    LABEL_CONF_DEL(&quot;删除角色或者角色组&quot;),\n    LABEL_CONF_MODIFY(&quot;修改角色或者角色组&quot;);\n\n    private String describe;\n    DingTalkCallbackTag(String describe) {\n        this.describe = describe;\n    }\n\n    public String getDescribe() {\n        return describe;\n    }\n\n    public void setDescribe(String describe) {\n        this.describe = describe;\n    }\n\n    @Override\n    public String toString() {\n        return super.toString().toLowerCase();\n    }\n\n    public String toInfoString() {\n        return String.format(&quot;tag: %s, describe: %s&quot;, this.toString(), this.getDescribe());\n    }\n}</code></pre><p><br /></p><h3 id=\"DingTalkEncryptor\">DingTalkEncryptor</h3><p><br /></p><blockquote><p>钉钉消息加密解密工作类</p></blockquote><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.dingtalk.encrpty;\n\nimport com.google.common.collect.ImmutableMap;\nimport com.mzlion.core.binary.Base64;\nimport com.mzlion.core.lang.Assert;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.io.ByteArrayOutputStream;\nimport java.io.Serializable;\nimport java.nio.charset.Charset;\nimport java.security.MessageDigest;\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.Random;\n\n/**\n * @author wwz\n * @version 1 (2018/7/26)\n * @since Java7\n */\npublic class DingTalkEncryptor {\n    private static final Charset CHARSET = Charset.forName(&quot;UTF-8&quot;);\n    private byte[] aesKey;\n    private String token;\n    private String corpId;\n\n    /**\n     * ask getPaddingBytes key固定长度\n     **/\n    private static final Integer AES_ENCODE_KEY_LENGTH = 43;\n    /**\n     * 加密随机字符串字节长度\n     **/\n    private static final Integer RANDOM_LENGTH = 16;\n\n    /**\n     * 构造函数\n     *\n     * @param token          钉钉开放平台上，开发者设置的token\n     * @param encodingAesKey 钉钉开放台上，开发者设置的EncodingAESKey\n     * @param corpId         ISV进行配置的时候应该传对应套件的SUITE_KEY(第一次创建时传的是默认的CREATE_SUITE_KEY)，普通企业是Corpid\n     */\n    public DingTalkEncryptor(String token, String encodingAesKey, String corpId) {\n        if (null == encodingAesKey || encodingAesKey.length() != AES_ENCODE_KEY_LENGTH) {\n            throw new IllegalArgumentException(&quot;encodingAesKey is null&quot;);\n        }\n        this.token = token;\n        this.corpId = corpId;\n        this.aesKey = Base64.decode(encodingAesKey + &quot;=&quot;);\n    }\n\n    /**\n     * 将和钉钉开放平台同步的消息体加密,返回加密Map\n     *\n     * @param message 传递的消息体明文\n     * @param timeStamp 时间戳\n     * @param nonce     随机字符串\n     * @return\n     */\n    public Map&lt;String, ? extends Serializable&gt; getEncryptedMsg(String message, Long timeStamp, String nonce) {\n        Assert.notNull(message, &quot;plaintext is null&quot;);\n        Assert.notNull(timeStamp, &quot;timeStamp is null&quot;);\n        Assert.notNull(nonce, &quot;nonce is null&quot;);\n        String encrypt = encrypt(getRandomStr(RANDOM_LENGTH), message);\n        String signature = getSignature(token, String.valueOf(timeStamp), nonce, encrypt);\n        return ImmutableMap.of(\n                &quot;msg_signature&quot;, signature, //\n                &quot;encrypt&quot;, encrypt, //\n                &quot;timeStamp&quot;, timeStamp,//\n                &quot;nonce&quot;, nonce);\n    }\n\n    /**\n     * 密文解密\n     *\n     * @param msgSignature 签名串\n     * @param timeStamp    时间戳\n     * @param nonce        随机串\n     * @param encryptMsg   密文\n     * @return 解密后的原文\n     */\n    public String getDecryptMsg(String msgSignature, String timeStamp, String nonce, String encryptMsg) {\n        // 校验签名\n        String signature = getSignature(token, timeStamp, nonce, encryptMsg);\n        if (!signature.equals(msgSignature)) {\n            throw new RuntimeException(&quot;校验签名失败。&quot;);\n        }\n        // 解密\n        return decrypt(encryptMsg);\n    }\n\n    private String encrypt(String random, String plaintext) {\n        try {\n            byte[] randomBytes = random.getBytes(CHARSET);\n            byte[] plainTextBytes = plaintext.getBytes(CHARSET);\n            byte[] lengthByte = int2Bytes(plainTextBytes.length);\n            byte[] corpidBytes = corpId.getBytes(CHARSET);\n            ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n            byteStream.write(randomBytes);\n            byteStream.write(lengthByte);\n            byteStream.write(plainTextBytes);\n            byteStream.write(corpidBytes);\n            byte[] padBytes = PKCS7Padding.getPaddingBytes(byteStream.size());\n            byteStream.write(padBytes);\n            byte[] unencrypted = byteStream.toByteArray();\n            byteStream.close();\n            Cipher cipher = Cipher.getInstance(&quot;AES/CBC/NoPadding&quot;);\n            SecretKeySpec keySpec = new SecretKeySpec(aesKey, &quot;AES&quot;);\n            IvParameterSpec iv = new IvParameterSpec(aesKey, 0, 16);\n            cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);\n            byte[] encrypted = cipher.doFinal(unencrypted);\n            return Base64.encode(encrypted);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * 对密文进行解密.\n     * @param text 需要解密的密文\n     * @return 解密得到的明文\n     */\n    private String decrypt(String text) {\n        byte[] originalArr;\n        try {\n            // 设置解密模式为AES的CBC模式\n            Cipher cipher = Cipher.getInstance(&quot;AES/CBC/NoPadding&quot;);\n            SecretKeySpec keySpec = new SecretKeySpec(aesKey, &quot;AES&quot;);\n            IvParameterSpec iv = new IvParameterSpec(Arrays.copyOfRange(aesKey, 0, 16));\n            cipher.init(Cipher.DECRYPT_MODE, keySpec, iv);\n            // 使用BASE64对密文进行解码, 解密\n            originalArr = cipher.doFinal(Base64.decode(text));\n        } catch (Exception e) {\n            throw new RuntimeException(&quot;计算解密文本错误&quot;);\n        }\n\n        String plainText;\n        String fromCorpid;\n        try {\n            // 去除补位字符\n            byte[] bytes = PKCS7Padding.removePaddingBytes(originalArr);\n            // 分离16位随机字符串,网络字节序和corpId\n            byte[] networkOrder = Arrays.copyOfRange(bytes, 16, 20);\n            int plainTextLegth = bytes2int(networkOrder);\n            plainText = new String(Arrays.copyOfRange(bytes, 20, 20 + plainTextLegth), CHARSET);\n            fromCorpid = new String(Arrays.copyOfRange(bytes, 20 + plainTextLegth, bytes.length), CHARSET);\n        } catch (Exception e) {\n            throw new RuntimeException(&quot;计算解密文本长度错误&quot;);\n        }\n\n        // corpid不相同的情况\n        if (!fromCorpid.equals(corpId)) {\n            throw new RuntimeException(&quot;计算文本密码错误&quot;);\n        }\n        return plainText;\n    }\n\n    /**\n     * 数字签名\n     * @param token     isv token\n     * @param timestamp 时间戳\n     * @param nonce     随机串\n     * @param encrypt   加密文本\n     * @return\n     */\n    public String getSignature(String token, String timestamp, String nonce, String encrypt) {\n        try {\n            String[] array = new String[]{token, timestamp, nonce, encrypt};\n            Arrays.sort(array);\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i &lt; 4; i++) {\n                sb.append(array[i]);\n            }\n            String str = sb.toString();\n            MessageDigest md = MessageDigest.getInstance(&quot;SHA-1&quot;);\n            md.update(str.getBytes());\n            byte[] digest = md.digest();\n\n            StringBuffer hexstr = new StringBuffer();\n            String shaHex = &quot;&quot;;\n            for (int i = 0; i &lt; digest.length; i++) {\n                shaHex = Integer.toHexString(digest[i] &amp; 0xFF);\n                if (shaHex.length() &lt; 2) {\n                    hexstr.append(0);\n                }\n                hexstr.append(shaHex);\n            }\n            return hexstr.toString();\n        } catch (Exception e) {\n           throw new RuntimeException(e);\n        }\n    }\n\n    public static String getRandomStr(int count) {\n        String base = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;\n        Random random = new Random();\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i &lt; count; i++) {\n            int number = random.nextInt(base.length());\n            sb.append(base.charAt(number));\n        }\n        return sb.toString();\n    }\n\n\n    /**\n     * int转byte数组,高位在前\n     */\n    public static byte[] int2Bytes(int count) {\n        byte[] byteArr = new byte[4];\n        byteArr[3] = (byte) (count &amp; 0xFF);\n        byteArr[2] = (byte) (count &gt;&gt; 8 &amp; 0xFF);\n        byteArr[1] = (byte) (count &gt;&gt; 16 &amp; 0xFF);\n        byteArr[0] = (byte) (count &gt;&gt; 24 &amp; 0xFF);\n        return byteArr;\n    }\n\n    /**\n     * 高位在前bytes数组转int\n     * @param byteArr\n     * @return\n     */\n    public static int bytes2int(byte[] byteArr) {\n        int count = 0;\n        for (int i = 0; i &lt; 4; i++) {\n            count &lt;&lt;= 8;\n            count |= byteArr[i] &amp; 0xff;\n        }\n        return count;\n    }\n}</code></pre><p><br /></p><h3 id=\"PKCS7Padding\">PKCS7Padding</h3><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.dingtalk.encrpty;\n\nimport java.nio.charset.Charset;\nimport java.util.Arrays;\n\n/**\n * @author wwz\n * @version 1 (2018/7/10)\n * @since Java7\n */\npublic class PKCS7Padding {\n    private final static Charset CHARSET    = Charset.forName(&quot;utf-8&quot;);\n    private final static int     BLOCK_SIZE = 32;\n\n    /**\n     * 填充mode字节\n     * @param count\n     * @return\n     */\n    public static byte[] getPaddingBytes(int count) {\n        int amountToPad = BLOCK_SIZE - (count % BLOCK_SIZE);\n        if (amountToPad == 0) {\n            amountToPad = BLOCK_SIZE;\n        }\n        char padChr = chr(amountToPad);\n        String tmp = new String();\n        for (int index = 0; index &lt; amountToPad; index++) {\n            tmp += padChr;\n        }\n        return tmp.getBytes(CHARSET);\n    }\n\n    /**\n     * 移除mode填充字节\n     * @param decrypted\n     * @return\n     */\n    public static byte[] removePaddingBytes(byte[] decrypted) {\n        int pad = (int) decrypted[decrypted.length - 1];\n        if (pad &lt; 1 || pad &gt; BLOCK_SIZE) {\n            pad = 0;\n        }\n        return Arrays.copyOfRange(decrypted, 0, decrypted.length - pad);\n    }\n\n    private static char chr(int a) {\n        byte target = (byte) (a &amp; 0xFF);\n        return (char) target;\n    }\n}</code></pre><p><br /></p><h3 id=\"DingTalkApi\">DingTalkApi</h3><p><br /></p><blockquote><p>钉钉开放API简易封装 (仅供测试)</p></blockquote><p><br /></p><pre data-lang=\"java\"><code>package com.wuwenze.dingtalk.api;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.collect.ImmutableMap;\nimport com.mzlion.core.lang.Assert;\nimport com.mzlion.easyokhttp.HttpClient;\nimport com.wuwenze.dingtalk.enums.DingTalkCallbackTag;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.io.Serializable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\n\n\n/**\n * @author wwz\n * @version 1 (2018/7/26)\n * @since Java7\n */\n@Slf4j\npublic class DingTalkApi {\n\n    private final static LoadingCache&lt;String, String&gt; mTokenCache = //\n            CacheBuilder.newBuilder()//\n                    .maximumSize(100)//\n                    .expireAfterAccess(7200, TimeUnit.SECONDS)//\n                    .build(new CacheLoader&lt;String, String&gt;() {\n                        @Override\n                        public String load(String key) throws Exception {\n                            // key:corpId#corpSecret\n                            String[] params = key.split(&quot;#&quot;);\n                            if (params.length != 2) {\n                                throw new RuntimeException(&quot;#loadTokenCache error&quot;);\n                            }\n                            return getAccessToken(params[0], params[1]);\n                        }\n                    });\n\n\n\n    public static String getAccessToken(String corpId, String corpSecret) {\n        String url = String.format(&quot;https://oapi.dingtalk.com/gettoken?corpid=%s&amp;corpsecret=%s&quot;,corpId, corpSecret);\n        JSONObject jsonObject = HttpClient.get(url).asBean(JSONObject.class);\n        assertDingTalkJSONObject(jsonObject);\n        return jsonObject.getString(&quot;access_token&quot;);\n    }\n\n    public static String getAccessTokenCache() {\n        try {\n            return mTokenCache.get(DingTalkConst.CORP_ID + &quot;#&quot; + DingTalkConst.CORP_SECRET);\n        } catch (ExecutionException e) {\n            return null;\n        }\n    }\n\n    public static void registerCallback(String accessToken, String callbackToken, String callbackAesKey, String url, DingTalkCallbackTag ... tags) {\n        Assert.notNull(accessToken, &quot;accessToken is null&quot;);\n        Assert.notNull(callbackToken, &quot;callbackToken is null&quot;);\n        Assert.notNull(callbackAesKey, &quot;callbackAesKey is null&quot;);\n        Assert.notNull(url, &quot;url is null&quot;);\n        if (tags.length &lt; 1) {\n            throw new IllegalArgumentException(&quot;至少指定一个回调事件类型。&quot;);\n        }\n        String[] callbackTagArray = new String[tags.length];\n        for (int i = 0; i &lt; tags.length; i++) {\n            callbackTagArray[i] = tags[i].toString();\n        }\n        ImmutableMap&lt;String, Serializable&gt; params = ImmutableMap.of(//\n                &quot;call_back_tag&quot;, callbackTagArray,//\n                &quot;token&quot;, callbackToken,//\n                &quot;aes_key&quot;, callbackAesKey, //\n                &quot;url&quot;, url//\n        );\n        String apiUrl =  &quot;https://oapi.dingtalk.com/call_back/register_call_back?access_token=&quot; + accessToken;\n        assertDingTalkJSONObject(//\n                HttpClient.textBody(apiUrl).json(JSON.toJSONString(params)).asBean(JSONObject.class)\n        );\n        log.info(&quot;#registerCallback 注册回调接口 -&gt; url: {}, tags: {}&quot;, url, showTagsInfo(tags));\n    }\n\n    private static String showTagsInfo(DingTalkCallbackTag ... tags) {\n        StringBuffer stringBuffer = new StringBuffer();\n        for (DingTalkCallbackTag tag : tags) {\n            stringBuffer.append(tag.toInfoString()).append(&quot; + &quot;);\n        }\n        return stringBuffer.toString();\n    }\n\n    public static void removeCallback(String accessToken) {\n        String apiUrl = &quot;https://oapi.dingtalk.com/call_back/delete_call_back?access_token=&quot; + accessToken;\n        assertDingTalkJSONObject(//\n                HttpClient.get(apiUrl).asBean(JSONObject.class)\n        );\n    }\n\n    public static void removeCallback() {\n        removeCallback(getAccessTokenCache());\n    }\n\n    public static void registerCallback(String url, DingTalkCallbackTag ... tags) {\n        registerCallback(getAccessTokenCache(), DingTalkConst.CALLBACK_TOKEN, DingTalkConst.CALLBACK_AES_KEY, url, tags);\n    }\n\n    private static void assertDingTalkJSONObject(JSONObject jsonObject) {\n        log.info(jsonObject.toJSONString());\n        int errcode = jsonObject.getIntValue(&quot;errcode&quot;);\n        if (errcode != 0) {\n            throw new RuntimeException(jsonObject.getString(&quot;errmsg&quot;));\n        }\n    }\n}</code></pre><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:18:37.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:15:44.000Z",
    "updated_at": "2019-02-01T06:18:37.000Z",
    "published_at": "2019-02-01T06:18:37.000Z",
    "first_published_at": "2019-02-01T06:17:38.000Z",
    "word_count": 3651,
    "cover": "",
    "description": "date: 2018-07-27 tags: [DingTalk,通讯录同步]最近项目中需要实现对接钉钉，并实现单向通讯录同步（钉钉服务器 -&gt; 对接平台）本文通过一个简单的案例快速实现相关的DEMO (本文主要实现与钉钉对接)。钉钉API：https://open-doc.dingta...",
    "custom_description": "最近项目中需要实现对接钉钉，并实现单向通讯录同步（钉钉服务器 -> 对接平台）本文通过一个简单的案例快速实现相关的DEMO (本文主要实现与钉钉对接)。",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224129,
    "slug": "contiperf-example",
    "title": "ContiPerf-更为优雅和方便的单元压力测试工具",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2018-07-22<br />tags: [junit,ContiPerf]\n---\n`ContiPerf` 是一个轻量级的单元测试工具，基于`JUnit 4`二次开发，使用它基于注解的方式，快速在本地进行单元压测并提供详细的报告。\n\n## Example\n### 新建 SpringBoot 工程\nPOM文件中的核心依赖如下：  \n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.databene</groupId>\n    <artifactId>contiperf</artifactId>\n    <version>2.1.0</version>\n    <scope>test</scope>\n</dependency>\n```\n### \n### 测试接口以及实现\n```java\npackage com.wuwenze.contiperf.service;\n\nimport java.util.List;\n\npublic interface ContiperfExampleService {\n\n    List<String> findAll();\n}\n```\n\n```java\nimport com.wuwenze.contiperf.service.ContiperfExampleService;\n\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\n@Service\npublic class ContiperfExampleServiceImpl implements ContiperfExampleService {\n    private final Random RANDOM = new Random();\n\n    @Override\n    public List<String> findAll() {\n        try {\n            int sleepSecond = RANDOM.nextInt(10);\n            log.info(\"#findAll(): sleep {} seconds..\", sleepSecond);\n            Thread.sleep(sleepSecond * 1000);\n        } catch (InterruptedException e) {\n            // ignore\n        }\n        List<String> resultList = new ArrayList<>();\n        for (int i = 0; i < 1000; i++) {\n            resultList.add(\"string_\" + i);\n        }\n        return resultList;\n    }\n}\n```\n\n### 构建单元测试\n```java\npackage com.wuwenze.contiperf.service;\n\nimport com.wuwenze.contiperf.ContiperfExamplesApplication;\n\nimport org.databene.contiperf.PerfTest;\nimport org.databene.contiperf.junit.ContiPerfRule;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = ContiperfExamplesApplication.class)\npublic class ContiperfExampleServiceTest {\n    @Rule\n    public ContiPerfRule i = new ContiPerfRule();\n\n    @Autowired\n    private ContiperfExampleService contiperfExampleService;\n\n    @Test\n    @PerfTest(threads = 1000, duration = 1500)\n    public void findAll() {\n        contiperfExampleService\n                .findAll()\n                .forEach(System.out::println);\n    }\n}\n```\n\n### 最终执行效果\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549001538739-ccd89e3f-d04a-42f8-a9c7-b0815be5b6fd.png#align=left&display=inline&height=441&linkTarget=_blank&originHeight=473&originWidth=800&size=0&width=746)\n\n### 查看测试报告\n![](https://cdn.nlark.com/yuque/0/2019/png/243237/1549001539736-7e05d87d-3464-4968-bdc1-2cbc61f2ef3d.png#align=left&display=inline&height=511&linkTarget=_blank&originHeight=548&originWidth=800&size=0&width=746)\n\n## \n## 总结\n### PerfTest参数\n| 参数 | 描述 |\n| :--- | :--- |\n| [PerfTest(invocations ]() = 300) | 执行300次，和线程数量无关，默认值为1，表示执行1次； |\n| @PerfTest(threads=30) | 并发执行30个线程，默认值为1个线程； |\n| [PerfTest(duration ]() = 20000) | 重复地执行测试至少执行20s。 |\n\n\n以上三个属性可以组合使用，其中Threads必须和其他两个属性组合才能生效。当Invocations和Duration都有指定时，以执行次数多的为准。\n\n```java\n// 如果执行方法300次的时候执行时间还没到100ms，则继续执行到满足执行时间等于100ms，如果执行到50次的时候已经100ms了，则会继续执行之100次。\n@PerfTest(invocations = 300, threads = 2, duration = 100)，\n\n// 如果你不想让测试连续不间断的跑完，可以通过注释设置等待时间，每执行完一次会等待30~80ms然后才会执行下一次调用。\n@PerfTest(invocations = 1000, threads = 10, timer = RandomTimer.class, timerParams = { 30, 80 })\n\n// 在开多线程进行并发压测的时候，如果一下子达到最大进程数有些系统可能会受不了，ContiPerf还提供了“预热”功能\n@PerfTest(threads = 10, duration = 60000, rampUp = 1000);\n// 启动时会先起一个线程，然后每个1000ms起一线程，到9000ms时10个线程同时执行，那么这个测试实际执行了69s，如果只想衡量全力压测的结果，那么可以在注释中加入warmUp，即\n@PerfTest(threads = 10, duration = 60000, rampUp = 1000, warmUp = 9000);\n// 那么统计结果的时候会去掉预热的9s。\n```\n\n### Required参数\n| 参数 | 描述 |\n| :--- | :--- |\n| [Required(throughput ]() = 20) | 要求每秒至少执行20个测试； |\n| [Required(average ]() = 50) | 要求平均执行时间不超过50ms； |\n| [Required(median ]() = 45) | 要求所有执行的50%不超过45ms； |\n| [Required(max ]() = 2000) | 要求没有测试超过2s； |\n| [Required(totalTime ]() = 5000) | 要求总的执行时间不超过5s； |\n| [Required(percentile90 ]() = 3000) | 要求90%的测试不超过3s； |\n| [Required(percentile95 ]() = 5000) | 要求95%的测试不超过5s； |\n| [Required(percentile99 ]() = 10000) | 要求99%的测试不超过10s; |\n| [Required(percentiles ]() = \"66:200,96:500\") | 要求66%的测试不超过200ms，96%的测试不超过500ms。 |\n\n\n### 测试报告\n最终的测试报告位于`target/contiperf-report/index.html`，使用浏览器打开即可。\n\n",
    "body_draft": "",
    "body_html": "<p><span>date: 2018-07-22</span></p><p><span>tags: [junit,ContiPerf]</span></p><hr /><p><code>ContiPerf</code> 是一个轻量级的单元测试工具，基于<code>JUnit 4</code>二次开发，使用它基于注解的方式，快速在本地进行单元压测并提供详细的报告。</p><p><br /></p><h2 id=\"Example\">Example</h2><h3 id=\"e698b60a\">新建 SpringBoot 工程</h3><p>POM文件中的核心依赖如下：  </p><pre data-lang=\"xml\"><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.databene&lt;/groupId&gt;\n    &lt;artifactId&gt;contiperf&lt;/artifactId&gt;\n    &lt;version&gt;2.1.0&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;</code></pre><h3 id=\"d41d8cd9\"><br /></h3><h3 id=\"30e28c7c\">测试接口以及实现</h3><pre data-lang=\"java\"><code>package com.wuwenze.contiperf.service;\n\nimport java.util.List;\n\npublic interface ContiperfExampleService {\n\n    List&lt;String&gt; findAll();\n}</code></pre><p><br /></p><pre data-lang=\"java\"><code>import com.wuwenze.contiperf.service.ContiperfExampleService;\n\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\n@Service\npublic class ContiperfExampleServiceImpl implements ContiperfExampleService {\n    private final Random RANDOM = new Random();\n\n    @Override\n    public List&lt;String&gt; findAll() {\n        try {\n            int sleepSecond = RANDOM.nextInt(10);\n            log.info(&quot;#findAll(): sleep {} seconds..&quot;, sleepSecond);\n            Thread.sleep(sleepSecond * 1000);\n        } catch (InterruptedException e) {\n            // ignore\n        }\n        List&lt;String&gt; resultList = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; 1000; i++) {\n            resultList.add(&quot;string_&quot; + i);\n        }\n        return resultList;\n    }\n}</code></pre><p><br /></p><h3 id=\"01f2fc4e\">构建单元测试</h3><pre data-lang=\"java\"><code>package com.wuwenze.contiperf.service;\n\nimport com.wuwenze.contiperf.ContiperfExamplesApplication;\n\nimport org.databene.contiperf.PerfTest;\nimport org.databene.contiperf.junit.ContiPerfRule;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = ContiperfExamplesApplication.class)\npublic class ContiperfExampleServiceTest {\n    @Rule\n    public ContiPerfRule i = new ContiPerfRule();\n\n    @Autowired\n    private ContiperfExampleService contiperfExampleService;\n\n    @Test\n    @PerfTest(threads = 1000, duration = 1500)\n    public void findAll() {\n        contiperfExampleService\n                .findAll()\n                .forEach(System.out::println);\n    }\n}</code></pre><p><br /></p><h3 id=\"302a8211\">最终执行效果</h3><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549001538739-ccd89e3f-d04a-42f8-a9c7-b0815be5b6fd.png#align=left&amp;display=inline&amp;height=441&amp;linkTarget=_blank&amp;originHeight=473&amp;originWidth=800&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"5fe84e4d\">查看测试报告</h3><p><img alt=\"\" src=\"https://cdn.nlark.com/yuque/0/2019/png/243237/1549001539736-7e05d87d-3464-4968-bdc1-2cbc61f2ef3d.png#align=left&amp;display=inline&amp;height=511&amp;linkTarget=_blank&amp;originHeight=548&amp;originWidth=800&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h2 id=\"d41d8cd9\"><br /></h2><h2 id=\"25f9c7fa\">总结</h2><h3 id=\"0bf0685d\">PerfTest参数</h3><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"360\"></col><col width=\"361\"></col></colgroup><tbody><tr><td style=\"text-align: left;\">参数</td><td style=\"text-align: left;\">描述</td></tr></tbody><tbody><tr><td style=\"text-align: left;\"><a>PerfTest(invocations </a> = 300)</td><td style=\"text-align: left;\">执行300次，和线程数量无关，默认值为1，表示执行1次；</td></tr><tr><td style=\"text-align: left;\">@PerfTest(threads=30)</td><td style=\"text-align: left;\">并发执行30个线程，默认值为1个线程；</td></tr><tr><td style=\"text-align: left;\"><a>PerfTest(duration </a> = 20000)</td><td style=\"text-align: left;\">重复地执行测试至少执行20s。</td></tr></tbody></table><p><br /></p><p>以上三个属性可以组合使用，其中Threads必须和其他两个属性组合才能生效。当Invocations和Duration都有指定时，以执行次数多的为准。</p><p><br /></p><pre data-lang=\"java\"><code>// 如果执行方法300次的时候执行时间还没到100ms，则继续执行到满足执行时间等于100ms，如果执行到50次的时候已经100ms了，则会继续执行之100次。\n@PerfTest(invocations = 300, threads = 2, duration = 100)，\n\n// 如果你不想让测试连续不间断的跑完，可以通过注释设置等待时间，每执行完一次会等待30~80ms然后才会执行下一次调用。\n@PerfTest(invocations = 1000, threads = 10, timer = RandomTimer.class, timerParams = { 30, 80 })\n\n// 在开多线程进行并发压测的时候，如果一下子达到最大进程数有些系统可能会受不了，ContiPerf还提供了“预热”功能\n@PerfTest(threads = 10, duration = 60000, rampUp = 1000);\n// 启动时会先起一个线程，然后每个1000ms起一线程，到9000ms时10个线程同时执行，那么这个测试实际执行了69s，如果只想衡量全力压测的结果，那么可以在注释中加入warmUp，即\n@PerfTest(threads = 10, duration = 60000, rampUp = 1000, warmUp = 9000);\n// 那么统计结果的时候会去掉预热的9s。</code></pre><p><br /></p><h3 id=\"d8dea160\">Required参数</h3><table class=\"lake-table\" style=\"width: 722px;\"><colgroup><col width=\"360\"></col><col width=\"361\"></col></colgroup><tbody><tr><td style=\"text-align: left;\">参数</td><td style=\"text-align: left;\">描述</td></tr></tbody><tbody><tr><td style=\"text-align: left;\"><a>Required(throughput </a> = 20)</td><td style=\"text-align: left;\">要求每秒至少执行20个测试；</td></tr><tr><td style=\"text-align: left;\"><a>Required(average </a> = 50)</td><td style=\"text-align: left;\">要求平均执行时间不超过50ms；</td></tr><tr><td style=\"text-align: left;\"><a>Required(median </a> = 45)</td><td style=\"text-align: left;\">要求所有执行的50%不超过45ms；</td></tr><tr><td style=\"text-align: left;\"><a>Required(max </a> = 2000)</td><td style=\"text-align: left;\">要求没有测试超过2s；</td></tr><tr><td style=\"text-align: left;\"><a>Required(totalTime </a> = 5000)</td><td style=\"text-align: left;\">要求总的执行时间不超过5s；</td></tr><tr><td style=\"text-align: left;\"><a>Required(percentile90 </a> = 3000)</td><td style=\"text-align: left;\">要求90%的测试不超过3s；</td></tr><tr><td style=\"text-align: left;\"><a>Required(percentile95 </a> = 5000)</td><td style=\"text-align: left;\">要求95%的测试不超过5s；</td></tr><tr><td style=\"text-align: left;\"><a>Required(percentile99 </a> = 10000)</td><td style=\"text-align: left;\">要求99%的测试不超过10s;</td></tr><tr><td style=\"text-align: left;\"><a>Required(percentiles </a> = &quot;66:200,96:500&quot;)</td><td style=\"text-align: left;\">要求66%的测试不超过200ms，96%的测试不超过500ms。</td></tr></tbody></table><p><br /></p><h3 id=\"9f5f3ef9\">测试报告</h3><p>最终的测试报告位于<code>target/contiperf-report/index.html</code>，使用浏览器打开即可。</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:19:01.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:10:49.000Z",
    "updated_at": "2019-02-01T06:19:01.000Z",
    "published_at": "2019-02-01T06:19:01.000Z",
    "first_published_at": "2019-02-01T06:13:51.000Z",
    "word_count": 961,
    "cover": "",
    "description": "date: 2018-07-22tags: [junit,ContiPerf]ContiPerf 是一个轻量级的单元测试工具，基于JUnit 4二次开发，使用它基于注解的方式，快速在本地进行单元压测并提供详细的报告。Example新建 SpringBoot 工程POM文件中的核心依赖如下：  ...",
    "custom_description": "ContiPerf 是一个轻量级的单元测试工具，基于JUnit 4二次开发，使用它基于注解的方式，快速在本地进行单元压测并提供详细的报告。\n",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224104,
    "slug": "chrome-capture",
    "title": "Google Chrome内置网页截屏命令",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [chrome,google]<br />date: 2018-11-30\n---\n\n1) 按下 `Ctrl` + `Shift` + `I` 打开Chrome开发者工具  <br />2) 按下 `Ctrl` + `Shift` + `P` 调出快捷命令栏  <br />3) 键入命令：`Capture full size screenshot`  \n\n",
    "body_draft": "",
    "body_html": "<p><span>tags: [chrome,google]</span><br /><span>date: 2018-11-30</span></p><hr /><p><br /></p><p>1) 按下 <code>Ctrl</code> + <code>Shift</code> + <code>I</code> 打开Chrome开发者工具  </p><p>2) 按下 <code>Ctrl</code> + <code>Shift</code> + <code>P</code> 调出快捷命令栏  </p><p>3) 键入命令：<code>Capture full size screenshot</code>  </p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T06:10:07.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T06:02:43.000Z",
    "updated_at": "2019-02-01T06:10:07.000Z",
    "published_at": "2019-02-01T06:10:07.000Z",
    "first_published_at": "2019-02-01T06:03:18.000Z",
    "word_count": 47,
    "cover": "",
    "description": "tags: [chrome,google]date: 2018-11-301) 按下 Ctrl + Shift + I 打开Chrome开发者工具  2) 按下 Ctrl + Shift + P 调出快捷命令栏  3) 键入命令：Capture full size screenshot  ",
    "custom_description": "1) 按下 Ctrl + Shift + I 打开Chrome开发者工具\n\n2) 按下 Ctrl + Shift + P 调出快捷命令栏\n\n3) 键入命令：Capture full size screenshot",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1224090,
    "slug": "angular-proxy-config",
    "title": "Angular开发环境跨域代理配置",
    "book_id": 206253,
    "book": {
      "id": 206253,
      "type": "Column",
      "slug": "blog",
      "name": "吴汶泽的博客",
      "user_id": 243237,
      "description": "https://wuwenze.com",
      "creator_id": 243237,
      "public": 1,
      "items_count": 44,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-02-12T08:29:12.174Z",
      "updated_at": "2019-02-13T04:26:05.000Z",
      "created_at": "2019-01-17T10:49:22.000Z",
      "namespace": "wuwenze/blog",
      "user": {
        "id": 243237,
        "type": "User",
        "login": "wuwenze",
        "name": "吴汶泽",
        "description": "纸上得来终觉浅，绝知此事要躬行。",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-01-11T05:15:16.000Z",
        "updated_at": "2019-02-01T05:46:15.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 243237,
    "creator": {
      "id": 243237,
      "type": "User",
      "login": "wuwenze",
      "name": "吴汶泽",
      "description": "纸上得来终觉浅，绝知此事要躬行。",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1547183692493-1518bbad-47ff-4b38-bb0f-0710a445f1a5.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-11T05:15:16.000Z",
      "updated_at": "2019-02-01T05:46:15.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [angular]<br />date: 2018-08-14\n---\n\n\n## 问题描述\n\nAPI地址:\n```\nhttp://fastjee-gateway.com:5002/api/uc/info/{userId}\n```\n\n前端地址:\n```\nhttp://localhost:4200\n```\n\n为解决跨域问题, 我们希望在前端开发环境配置代理转发, 转发后的URL如下:\n```\nhttp://localhost:4200/uc/info/{userId}\n```\n\n## 新建proxy.conf.json配置文件\n\n```javascript\n{\n    \"/uc/*\": {\n        \"target\": \"http://fastjee-gateway.com:5002/api/uc/\",\n        \"secure\": false,\n        \"logLevel\": \"debug\",\n        \"changeOrigin\": true,\n        \"pathRewrite\": {\n            \"^/uc\": \"\"\n        }\n    }\n}\n```\n\n## 配置scripts (package.json)\n```\n\"start\": \"ng serve -o --proxy-config proxy.conf.json\",\n```\n\n## 使用\n```javascript\nthis.http.get('uc/info/' + userid)\n    .subscribe((res) => {\n        console.log(res);\n    },(error) => {\n        console.error(error);\n    });\n```\n\n最终控制台打印如下:\n```\n[HPM] POST /uc/info/1 -> http://fastjee-gateway.com:5002/api/uc/info\n```\n\n注意: 此方法只适用于开发环境\n\n",
    "body_draft": "date: 2019-02-01<br/>tags: [java,hexo]<br/>categories:[后端]\n---\n\n",
    "body_html": "<p>tags: [angular]<br />date: 2018-08-14</p><hr /><p><br /></p><p><br /></p><h2 id=\"254dd6d2\">问题描述</h2><p><br /></p><p>API地址:</p><pre><code>http://fastjee-gateway.com:5002/api/uc/info/{userId}</code></pre><p><br /></p><p>前端地址:</p><pre><code>http://localhost:4200</code></pre><p><br /></p><p>为解决跨域问题, 我们希望在前端开发环境配置代理转发, 转发后的URL如下:</p><pre><code>http://localhost:4200/uc/info/{userId}</code></pre><p><br /></p><h2 id=\"c7bf34ce\">新建proxy.conf.json配置文件</h2><p><br /></p><pre data-lang=\"javascript\"><code>{\n    &quot;/uc/*&quot;: {\n        &quot;target&quot;: &quot;http://fastjee-gateway.com:5002/api/uc/&quot;,\n        &quot;secure&quot;: false,\n        &quot;logLevel&quot;: &quot;debug&quot;,\n        &quot;changeOrigin&quot;: true,\n        &quot;pathRewrite&quot;: {\n            &quot;^/uc&quot;: &quot;&quot;\n        }\n    }\n}</code></pre><p><br /></p><h2 id=\"16aca0b0\">配置scripts (package.json)</h2><pre><code>&quot;start&quot;: &quot;ng serve -o --proxy-config proxy.conf.json&quot;,</code></pre><p><br /></p><h2 id=\"ecff77a8\">使用</h2><pre data-lang=\"javascript\"><code>this.http.get('uc/info/' + userid)\n    .subscribe((res) =&gt; {\n        console.log(res);\n    },(error) =&gt; {\n        console.error(error);\n    });</code></pre><p><br /></p><p>最终控制台打印如下:</p><pre><code>[HPM] POST /uc/info/1 -&gt; http://fastjee-gateway.com:5002/api/uc/info</code></pre><p><br /></p><p>注意: 此方法只适用于开发环境</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-01T07:37:48.000Z",
    "deleted_at": null,
    "created_at": "2019-02-01T05:54:04.000Z",
    "updated_at": "2019-02-01T07:37:48.000Z",
    "published_at": "2019-02-01T07:37:48.000Z",
    "first_published_at": "2019-02-01T05:56:46.000Z",
    "word_count": 189,
    "cover": "",
    "description": "tags: [angular]date: 2018-08-14问题描述API地址:http://fastjee-gateway.com:5002/api/uc/info/{userId}前端地址:http://localhost:4200为解决跨域问题, 我们希望在前端开发环境配置代理转发, ...",
    "custom_description": "为解决跨域问题, 我们希望在前端开发环境配置代理转发.",
    "_serializer": "v2.doc_detail"
  }
]